
CORIA_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011464  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee0  08011658  08011658  00021658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013538  08013538  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08013538  08013538  00023538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013540  08013540  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013540  08013540  00023540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013544  08013544  00023544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08013548  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  20000070  080135b8  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  080135b8  00030790  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029761  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004215  00000000  00000000  00059807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002300  00000000  00000000  0005da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002420  00000000  00000000  0005fd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d314  00000000  00000000  00062140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002780f  00000000  00000000  0008f454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dc95  00000000  00000000  000b6c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d48f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4b0  00000000  00000000  001d4948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000070 	.word	0x20000070
 8000210:	00000000 	.word	0x00000000
 8000214:	08011640 	.word	0x08011640

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000074 	.word	0x20000074
 8000230:	08011640 	.word	0x08011640

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000254:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000258:	f000 b996 	b.w	8000588 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f81a 	bl	800029c <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__popcountsi2>:
 8000274:	0843      	lsrs	r3, r0, #1
 8000276:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	0883      	lsrs	r3, r0, #2
 800027e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000282:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000286:	4418      	add	r0, r3
 8000288:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 800028c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000290:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000294:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000298:	0e00      	lsrs	r0, r0, #24
 800029a:	4770      	bx	lr

0800029c <__udivmoddi4>:
 800029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002a2:	4604      	mov	r4, r0
 80002a4:	460f      	mov	r7, r1
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d148      	bne.n	800033c <__udivmoddi4+0xa0>
 80002aa:	428a      	cmp	r2, r1
 80002ac:	4694      	mov	ip, r2
 80002ae:	d961      	bls.n	8000374 <__udivmoddi4+0xd8>
 80002b0:	fab2 f382 	clz	r3, r2
 80002b4:	b143      	cbz	r3, 80002c8 <__udivmoddi4+0x2c>
 80002b6:	f1c3 0120 	rsb	r1, r3, #32
 80002ba:	409f      	lsls	r7, r3
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	409c      	lsls	r4, r3
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	430f      	orrs	r7, r1
 80002c8:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002cc:	fa1f fe8c 	uxth.w	lr, ip
 80002d0:	0c22      	lsrs	r2, r4, #16
 80002d2:	fbb7 f6f1 	udiv	r6, r7, r1
 80002d6:	fb01 7716 	mls	r7, r1, r6, r7
 80002da:	fb06 f00e 	mul.w	r0, r6, lr
 80002de:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e2:	4290      	cmp	r0, r2
 80002e4:	d908      	bls.n	80002f8 <__udivmoddi4+0x5c>
 80002e6:	eb1c 0202 	adds.w	r2, ip, r2
 80002ea:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x5a>
 80002f0:	4290      	cmp	r0, r2
 80002f2:	f200 8137 	bhi.w	8000564 <__udivmoddi4+0x2c8>
 80002f6:	463e      	mov	r6, r7
 80002f8:	1a12      	subs	r2, r2, r0
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb2 f0f1 	udiv	r0, r2, r1
 8000300:	fb01 2210 	mls	r2, r1, r0, r2
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800030c:	45a6      	cmp	lr, r4
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x86>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x84>
 800031a:	45a6      	cmp	lr, r4
 800031c:	f200 811c 	bhi.w	8000558 <__udivmoddi4+0x2bc>
 8000320:	4610      	mov	r0, r2
 8000322:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000326:	eba4 040e 	sub.w	r4, r4, lr
 800032a:	2600      	movs	r6, #0
 800032c:	b11d      	cbz	r5, 8000336 <__udivmoddi4+0x9a>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c5 4300 	strd	r4, r3, [r5]
 8000336:	4631      	mov	r1, r6
 8000338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800033c:	428b      	cmp	r3, r1
 800033e:	d909      	bls.n	8000354 <__udivmoddi4+0xb8>
 8000340:	2d00      	cmp	r5, #0
 8000342:	f000 80fd 	beq.w	8000540 <__udivmoddi4+0x2a4>
 8000346:	2600      	movs	r6, #0
 8000348:	e9c5 0100 	strd	r0, r1, [r5]
 800034c:	4630      	mov	r0, r6
 800034e:	4631      	mov	r1, r6
 8000350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000354:	fab3 f683 	clz	r6, r3
 8000358:	2e00      	cmp	r6, #0
 800035a:	d14b      	bne.n	80003f4 <__udivmoddi4+0x158>
 800035c:	428b      	cmp	r3, r1
 800035e:	f0c0 80f2 	bcc.w	8000546 <__udivmoddi4+0x2aa>
 8000362:	4282      	cmp	r2, r0
 8000364:	f240 80ef 	bls.w	8000546 <__udivmoddi4+0x2aa>
 8000368:	4630      	mov	r0, r6
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0e3      	beq.n	8000336 <__udivmoddi4+0x9a>
 800036e:	e9c5 4700 	strd	r4, r7, [r5]
 8000372:	e7e0      	b.n	8000336 <__udivmoddi4+0x9a>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xdc>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f382 	clz	r3, r2
 800037c:	2b00      	cmp	r3, #0
 800037e:	f040 809d 	bne.w	80004bc <__udivmoddi4+0x220>
 8000382:	1a89      	subs	r1, r1, r2
 8000384:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000388:	b297      	uxth	r7, r2
 800038a:	2601      	movs	r6, #1
 800038c:	0c20      	lsrs	r0, r4, #16
 800038e:	fbb1 f2fe 	udiv	r2, r1, lr
 8000392:	fb0e 1112 	mls	r1, lr, r2, r1
 8000396:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039a:	fb07 f002 	mul.w	r0, r7, r2
 800039e:	4288      	cmp	r0, r1
 80003a0:	d90f      	bls.n	80003c2 <__udivmoddi4+0x126>
 80003a2:	eb1c 0101 	adds.w	r1, ip, r1
 80003a6:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003aa:	bf2c      	ite	cs
 80003ac:	f04f 0901 	movcs.w	r9, #1
 80003b0:	f04f 0900 	movcc.w	r9, #0
 80003b4:	4288      	cmp	r0, r1
 80003b6:	d903      	bls.n	80003c0 <__udivmoddi4+0x124>
 80003b8:	f1b9 0f00 	cmp.w	r9, #0
 80003bc:	f000 80cf 	beq.w	800055e <__udivmoddi4+0x2c2>
 80003c0:	4642      	mov	r2, r8
 80003c2:	1a09      	subs	r1, r1, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d6:	42a7      	cmp	r7, r4
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x150>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14e>
 80003e4:	42a7      	cmp	r7, r4
 80003e6:	f200 80b4 	bhi.w	8000552 <__udivmoddi4+0x2b6>
 80003ea:	4608      	mov	r0, r1
 80003ec:	1be4      	subs	r4, r4, r7
 80003ee:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003f2:	e79b      	b.n	800032c <__udivmoddi4+0x90>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa01 f406 	lsl.w	r4, r1, r6
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	40f9      	lsrs	r1, r7
 8000404:	40b2      	lsls	r2, r6
 8000406:	ea4c 0c03 	orr.w	ip, ip, r3
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	431c      	orrs	r4, r3
 8000414:	fa1f fe8c 	uxth.w	lr, ip
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000422:	fb09 1118 	mls	r1, r9, r8, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb08 f00e 	mul.w	r0, r8, lr
 800042e:	4288      	cmp	r0, r1
 8000430:	d90f      	bls.n	8000452 <__udivmoddi4+0x1b6>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800043a:	bf2c      	ite	cs
 800043c:	f04f 0b01 	movcs.w	fp, #1
 8000440:	f04f 0b00 	movcc.w	fp, #0
 8000444:	4288      	cmp	r0, r1
 8000446:	d903      	bls.n	8000450 <__udivmoddi4+0x1b4>
 8000448:	f1bb 0f00 	cmp.w	fp, #0
 800044c:	f000 808d 	beq.w	800056a <__udivmoddi4+0x2ce>
 8000450:	46d0      	mov	r8, sl
 8000452:	1a09      	subs	r1, r1, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb1 f0f9 	udiv	r0, r1, r9
 800045a:	fb09 1110 	mls	r1, r9, r0, r1
 800045e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000462:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000466:	458e      	cmp	lr, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x1de>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000472:	d201      	bcs.n	8000478 <__udivmoddi4+0x1dc>
 8000474:	458e      	cmp	lr, r1
 8000476:	d87f      	bhi.n	8000578 <__udivmoddi4+0x2dc>
 8000478:	4620      	mov	r0, r4
 800047a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	fba0 9802 	umull	r9, r8, r0, r2
 8000486:	4541      	cmp	r1, r8
 8000488:	464c      	mov	r4, r9
 800048a:	46c6      	mov	lr, r8
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0x1f8>
 800048e:	d106      	bne.n	800049e <__udivmoddi4+0x202>
 8000490:	454b      	cmp	r3, r9
 8000492:	d204      	bcs.n	800049e <__udivmoddi4+0x202>
 8000494:	3801      	subs	r0, #1
 8000496:	ebb9 0402 	subs.w	r4, r9, r2
 800049a:	eb68 0e0c 	sbc.w	lr, r8, ip
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d070      	beq.n	8000584 <__udivmoddi4+0x2e8>
 80004a2:	1b1a      	subs	r2, r3, r4
 80004a4:	eb61 010e 	sbc.w	r1, r1, lr
 80004a8:	fa22 f306 	lsr.w	r3, r2, r6
 80004ac:	fa01 f707 	lsl.w	r7, r1, r7
 80004b0:	40f1      	lsrs	r1, r6
 80004b2:	2600      	movs	r6, #0
 80004b4:	431f      	orrs	r7, r3
 80004b6:	e9c5 7100 	strd	r7, r1, [r5]
 80004ba:	e73c      	b.n	8000336 <__udivmoddi4+0x9a>
 80004bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c0:	f1c3 0020 	rsb	r0, r3, #32
 80004c4:	fa01 f203 	lsl.w	r2, r1, r3
 80004c8:	fa21 f600 	lsr.w	r6, r1, r0
 80004cc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d0:	fa24 f100 	lsr.w	r1, r4, r0
 80004d4:	fa1f f78c 	uxth.w	r7, ip
 80004d8:	409c      	lsls	r4, r3
 80004da:	4311      	orrs	r1, r2
 80004dc:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e0:	0c0a      	lsrs	r2, r1, #16
 80004e2:	fb0e 6610 	mls	r6, lr, r0, r6
 80004e6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004ea:	fb00 f607 	mul.w	r6, r0, r7
 80004ee:	4296      	cmp	r6, r2
 80004f0:	d90e      	bls.n	8000510 <__udivmoddi4+0x274>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fa:	bf2c      	ite	cs
 80004fc:	f04f 0901 	movcs.w	r9, #1
 8000500:	f04f 0900 	movcc.w	r9, #0
 8000504:	4296      	cmp	r6, r2
 8000506:	d902      	bls.n	800050e <__udivmoddi4+0x272>
 8000508:	f1b9 0f00 	cmp.w	r9, #0
 800050c:	d031      	beq.n	8000572 <__udivmoddi4+0x2d6>
 800050e:	4640      	mov	r0, r8
 8000510:	1b92      	subs	r2, r2, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb2 f6fe 	udiv	r6, r2, lr
 8000518:	fb0e 2216 	mls	r2, lr, r6, r2
 800051c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000520:	fb06 f207 	mul.w	r2, r6, r7
 8000524:	428a      	cmp	r2, r1
 8000526:	d907      	bls.n	8000538 <__udivmoddi4+0x29c>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x29a>
 8000532:	428a      	cmp	r2, r1
 8000534:	d823      	bhi.n	800057e <__udivmoddi4+0x2e2>
 8000536:	4646      	mov	r6, r8
 8000538:	1a89      	subs	r1, r1, r2
 800053a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800053e:	e725      	b.n	800038c <__udivmoddi4+0xf0>
 8000540:	462e      	mov	r6, r5
 8000542:	4628      	mov	r0, r5
 8000544:	e6f7      	b.n	8000336 <__udivmoddi4+0x9a>
 8000546:	1a84      	subs	r4, r0, r2
 8000548:	eb61 0303 	sbc.w	r3, r1, r3
 800054c:	2001      	movs	r0, #1
 800054e:	461f      	mov	r7, r3
 8000550:	e70b      	b.n	800036a <__udivmoddi4+0xce>
 8000552:	4464      	add	r4, ip
 8000554:	3802      	subs	r0, #2
 8000556:	e749      	b.n	80003ec <__udivmoddi4+0x150>
 8000558:	4464      	add	r4, ip
 800055a:	3802      	subs	r0, #2
 800055c:	e6e1      	b.n	8000322 <__udivmoddi4+0x86>
 800055e:	3a02      	subs	r2, #2
 8000560:	4461      	add	r1, ip
 8000562:	e72e      	b.n	80003c2 <__udivmoddi4+0x126>
 8000564:	3e02      	subs	r6, #2
 8000566:	4462      	add	r2, ip
 8000568:	e6c6      	b.n	80002f8 <__udivmoddi4+0x5c>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4461      	add	r1, ip
 8000570:	e76f      	b.n	8000452 <__udivmoddi4+0x1b6>
 8000572:	3802      	subs	r0, #2
 8000574:	4462      	add	r2, ip
 8000576:	e7cb      	b.n	8000510 <__udivmoddi4+0x274>
 8000578:	3802      	subs	r0, #2
 800057a:	4461      	add	r1, ip
 800057c:	e77d      	b.n	800047a <__udivmoddi4+0x1de>
 800057e:	3e02      	subs	r6, #2
 8000580:	4461      	add	r1, ip
 8000582:	e7d9      	b.n	8000538 <__udivmoddi4+0x29c>
 8000584:	462e      	mov	r6, r5
 8000586:	e6d6      	b.n	8000336 <__udivmoddi4+0x9a>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4293      	cmp	r3, r2
 800059c:	bf38      	it	cc
 800059e:	4613      	movcc	r3, r2
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4293      	cmp	r3, r2
 80005bc:	bf28      	it	cs
 80005be:	4613      	movcs	r3, r2
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	fbb3 f2f2 	udiv	r2, r3, r2
 80005de:	6839      	ldr	r1, [r7, #0]
 80005e0:	fb01 f202 	mul.w	r2, r1, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	1ad3      	subs	r3, r2, r3
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	4413      	add	r3, r2
 8000606:	3b01      	subs	r3, #1
 8000608:	6839      	ldr	r1, [r7, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffde 	bl	80005cc <lfs_aligndown>
 8000610:	4603      	mov	r3, r0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3b01      	subs	r3, #1
 8000626:	fab3 f383 	clz	r3, r3
 800062a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800063a:	b480      	push	{r7}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	fa93 f3a3 	rbit	r3, r3
 8000648:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fe07 	bl	8000274 <__popcountsi2>
 8000666:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	1ad3      	subs	r3, r2, r3
}
 8000680:	4618      	mov	r0, r3
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000694:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ffee 	bl	800068c <lfs_fromle32>
 80006b0:	4603      	mov	r3, r0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ffed 	bl	80006ba <lfs_frombe32>
 80006e0:	4603      	mov	r3, r0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f00f fd8c 	bl	8010210 <malloc>
 80006f8:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f00f fd88 	bl	8010220 <free>
#else
    (void)p;
#endif
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	68d8      	ldr	r0, [r3, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074a:	461a      	mov	r2, r3
 800074c:	21ff      	movs	r1, #255	; 0xff
 800074e:	f00f fd8c 	bl	801026a <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af02      	add	r7, sp, #8
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000774:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800077a:	6a1b      	ldr	r3, [r3, #32]
 800077c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800077e:	429a      	cmp	r2, r3
 8000780:	d208      	bcs.n	8000794 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8000782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000786:	441a      	add	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800078c:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 800078e:	429a      	cmp	r2, r3
 8000790:	f240 811b 	bls.w	80009ca <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8000794:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000798:	e11c      	b.n	80009d4 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800079a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800079c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d03f      	beq.n	8000824 <lfs_bd_read+0xc0>
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d13a      	bne.n	8000824 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80007b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d232      	bcs.n	8000824 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d324      	bcc.n	8000812 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	6859      	ldr	r1, [r3, #4]
 80007d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d2:	1acb      	subs	r3, r1, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	4619      	mov	r1, r3
 80007d8:	69b8      	ldr	r0, [r7, #24]
 80007da:	f7ff fee7 	bl	80005ac <lfs_min>
 80007de:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	68da      	ldr	r2, [r3, #12]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80007ea:	1acb      	subs	r3, r1, r3
 80007ec:	4413      	add	r3, r2
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4619      	mov	r1, r3
 80007f2:	69f8      	ldr	r0, [r7, #28]
 80007f4:	f00f fd2c 	bl	8010250 <memcpy>

                data += diff;
 80007f8:	69fa      	ldr	r2, [r7, #28]
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	4413      	add	r3, r2
 80007fe:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	4413      	add	r3, r2
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000810:	e0db      	b.n	80009ca <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	4619      	mov	r1, r3
 800081c:	69b8      	ldr	r0, [r7, #24]
 800081e:	f7ff fec5 	bl	80005ac <lfs_min>
 8000822:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800082a:	429a      	cmp	r2, r3
 800082c:	d13a      	bne.n	80008a4 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800083a:	429a      	cmp	r2, r3
 800083c:	d232      	bcs.n	80008a4 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000844:	429a      	cmp	r2, r3
 8000846:	d324      	bcc.n	8000892 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6859      	ldr	r1, [r3, #4]
 8000850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000852:	1acb      	subs	r3, r1, r3
 8000854:	4413      	add	r3, r2
 8000856:	4619      	mov	r1, r3
 8000858:	69b8      	ldr	r0, [r7, #24]
 800085a:	f7ff fea7 	bl	80005ac <lfs_min>
 800085e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800086a:	1acb      	subs	r3, r1, r3
 800086c:	4413      	add	r3, r2
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4619      	mov	r1, r3
 8000872:	69f8      	ldr	r0, [r7, #28]
 8000874:	f00f fcec 	bl	8010250 <memcpy>

                data += diff;
 8000878:	69fa      	ldr	r2, [r7, #28]
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	4413      	add	r3, r2
 800087e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	4413      	add	r3, r2
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000890:	e09b      	b.n	80009ca <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	4619      	mov	r1, r3
 800089c:	69b8      	ldr	r0, [r7, #24]
 800089e:	f7ff fe85 	bl	80005ac <lfs_min>
 80008a2:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80008a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d336      	bcc.n	800091a <lfs_bd_read+0x1b6>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008b0:	695a      	ldr	r2, [r3, #20]
 80008b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80008b8:	fb01 f202 	mul.w	r2, r1, r2
 80008bc:	1a9b      	subs	r3, r3, r2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d12b      	bne.n	800091a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008c6:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80008c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d325      	bcc.n	800091a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	4619      	mov	r1, r3
 80008d6:	69b8      	ldr	r0, [r7, #24]
 80008d8:	f7ff fe78 	bl	80005cc <lfs_aligndown>
 80008dc:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008e2:	685c      	ldr	r4, [r3, #4]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80008f2:	47a0      	blx	r4
 80008f4:	6178      	str	r0, [r7, #20]
            if (err) {
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <lfs_bd_read+0x19c>
                return err;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	e069      	b.n	80009d4 <lfs_bd_read+0x270>
            }

            data += diff;
 8000900:	69fa      	ldr	r2, [r7, #28]
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	4413      	add	r3, r2
 8000906:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	4413      	add	r3, r2
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8000910:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000918:	e057      	b.n	80009ca <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800091e:	6a1b      	ldr	r3, [r3, #32]
 8000920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000922:	429a      	cmp	r2, r3
 8000924:	d305      	bcc.n	8000932 <lfs_bd_read+0x1ce>
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <lfs_bd_read+0x278>)
 8000928:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <lfs_bd_read+0x27c>)
 800092a:	216b      	movs	r1, #107	; 0x6b
 800092c:	482d      	ldr	r0, [pc, #180]	; (80009e4 <lfs_bd_read+0x280>)
 800092e:	f00f fc15 	bl	801015c <__assert_func>
        rcache->block = block;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000936:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4619      	mov	r1, r3
 8000940:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000942:	f7ff fe43 	bl	80005cc <lfs_aligndown>
 8000946:	4602      	mov	r2, r0
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800094c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	4619      	mov	r1, r3
 800095a:	4610      	mov	r0, r2
 800095c:	f7ff fe4b 	bl	80005f6 <lfs_alignup>
 8000960:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	4619      	mov	r1, r3
 800096a:	4610      	mov	r0, r2
 800096c:	f7ff fe1e 	bl	80005ac <lfs_min>
 8000970:	4602      	mov	r2, r0
                - rcache->off,
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000976:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 800097c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097e:	4619      	mov	r1, r3
 8000980:	4610      	mov	r0, r2
 8000982:	f7ff fe13 	bl	80005ac <lfs_min>
 8000986:	4602      	mov	r2, r0
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000990:	685c      	ldr	r4, [r3, #4]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6819      	ldr	r1, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	462b      	mov	r3, r5
 80009aa:	47a0      	blx	r4
 80009ac:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	dd05      	ble.n	80009c0 <lfs_bd_read+0x25c>
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <lfs_bd_read+0x284>)
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <lfs_bd_read+0x27c>)
 80009b8:	2176      	movs	r1, #118	; 0x76
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <lfs_bd_read+0x280>)
 80009bc:	f00f fbce 	bl	801015c <__assert_func>
        if (err) {
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <lfs_bd_read+0x266>
            return err;
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	e004      	b.n	80009d4 <lfs_bd_read+0x270>
    while (size > 0) {
 80009ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	f47f aee4 	bne.w	800079a <lfs_bd_read+0x36>
        }
    }

    return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bdb0      	pop	{r4, r5, r7, pc}
 80009dc:	08011658 	.word	0x08011658
 80009e0:	08012218 	.word	0x08012218
 80009e4:	08011678 	.word	0x08011678
 80009e8:	0801168c 	.word	0x0801168c

080009ec <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b090      	sub	sp, #64	; 0x40
 80009f0:	af04      	add	r7, sp, #16
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80009fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a06:	e039      	b.n	8000a7c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2108      	movs	r1, #8
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fdcb 	bl	80005ac <lfs_min>
 8000a16:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1c:	1ad1      	subs	r1, r2, r3
 8000a1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	4413      	add	r3, r2
 8000a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a26:	9203      	str	r2, [sp, #12]
 8000a28:	f107 0214 	add.w	r2, r7, #20
 8000a2c:	9202      	str	r2, [sp, #8]
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	460b      	mov	r3, r1
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fe92 	bl	8000764 <lfs_bd_read>
 8000a40:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <lfs_bd_cmp+0x60>
            return err;
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	e01c      	b.n	8000a86 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	18d1      	adds	r1, r2, r3
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00f fbe9 	bl	8010230 <memcmp>
 8000a5e:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	da01      	bge.n	8000a70 <lfs_bd_cmp+0x84>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e00a      	b.n	8000a86 <lfs_bd_cmp+0x9a>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e008      	b.n	8000a86 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	4413      	add	r3, r2
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d3c1      	bcc.n	8000a08 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b08e      	sub	sp, #56	; 0x38
 8000a92:	af04      	add	r7, sp, #16
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa4:	e030      	b.n	8000b08 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2108      	movs	r1, #8
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fd7c 	bl	80005ac <lfs_min>
 8000ab4:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	1ad1      	subs	r1, r2, r3
 8000abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac0:	4413      	add	r3, r2
 8000ac2:	6a3a      	ldr	r2, [r7, #32]
 8000ac4:	9203      	str	r2, [sp, #12]
 8000ac6:	f107 0214 	add.w	r2, r7, #20
 8000aca:	9202      	str	r2, [sp, #8]
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fe43 	bl	8000764 <lfs_bd_read>
 8000ade:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <lfs_bd_crc+0x5c>
            return err;
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	e013      	b.n	8000b12 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f107 0114 	add.w	r1, r7, #20
 8000af2:	6a3a      	ldr	r2, [r7, #32]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f006 fba3 	bl	8007240 <lfs_crc>
 8000afa:	4602      	mov	r2, r0
 8000afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000afe:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	4413      	add	r3, r2
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
 8000b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3ca      	bcc.n	8000aa6 <lfs_bd_crc+0x18>
    }

    return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af04      	add	r7, sp, #16
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b32:	d061      	beq.n	8000bf8 <lfs_bd_flush+0xdc>
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f113 0f02 	cmn.w	r3, #2
 8000b3c:	d05c      	beq.n	8000bf8 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d305      	bcc.n	8000b58 <lfs_bd_flush+0x3c>
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <lfs_bd_flush+0xe8>)
 8000b4e:	4a2e      	ldr	r2, [pc, #184]	; (8000c08 <lfs_bd_flush+0xec>)
 8000b50:	21b3      	movs	r1, #179	; 0xb3
 8000b52:	482e      	ldr	r0, [pc, #184]	; (8000c0c <lfs_bd_flush+0xf0>)
 8000b54:	f00f fb02 	bl	801015c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4619      	mov	r1, r3
 8000b64:	4610      	mov	r0, r2
 8000b66:	f7ff fd46 	bl	80005f6 <lfs_alignup>
 8000b6a:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b70:	689c      	ldr	r4, [r3, #8]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	462b      	mov	r3, r5
 8000b88:	47a0      	blx	r4
 8000b8a:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	dd05      	ble.n	8000b9e <lfs_bd_flush+0x82>
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <lfs_bd_flush+0xf4>)
 8000b94:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <lfs_bd_flush+0xec>)
 8000b96:	21b7      	movs	r1, #183	; 0xb7
 8000b98:	481c      	ldr	r0, [pc, #112]	; (8000c0c <lfs_bd_flush+0xf0>)
 8000b9a:	f00f fadf 	bl	801015c <__assert_func>
        if (err) {
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <lfs_bd_flush+0x8c>
            return err;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	e028      	b.n	8000bfa <lfs_bd_flush+0xde>
        }

        if (validate) {
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d020      	beq.n	8000bf0 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff fdb1 	bl	8000718 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000bc2:	69f8      	ldr	r0, [r7, #28]
 8000bc4:	9003      	str	r0, [sp, #12]
 8000bc6:	9102      	str	r1, [sp, #8]
 8000bc8:	9201      	str	r2, [sp, #4]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff ff0a 	bl	80009ec <lfs_bd_cmp>
 8000bd8:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	da01      	bge.n	8000be4 <lfs_bd_flush+0xc8>
                return res;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	e00a      	b.n	8000bfa <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8000bea:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000bee:	e004      	b.n	8000bfa <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f7ff fd9f 	bl	8000736 <lfs_cache_zero>
    }

    return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bdb0      	pop	{r4, r5, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	08011698 	.word	0x08011698
 8000c08:	08012224 	.word	0x08012224
 8000c0c:	08011678 	.word	0x08011678
 8000c10:	0801168c 	.word	0x0801168c

08000c14 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f7ff fd77 	bl	8000718 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff ff73 	bl	8000b1c <lfs_bd_flush>
 8000c36:	6178      	str	r0, [r7, #20]
    if (err) {
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <lfs_bd_sync+0x2e>
        return err;
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	e011      	b.n	8000c66 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4798      	blx	r3
 8000c50:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dd05      	ble.n	8000c64 <lfs_bd_sync+0x50>
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <lfs_bd_sync+0x5c>)
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <lfs_bd_sync+0x60>)
 8000c5c:	21dd      	movs	r1, #221	; 0xdd
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <lfs_bd_sync+0x64>)
 8000c60:	f00f fa7c 	bl	801015c <__assert_func>
    return err;
 8000c64:	697b      	ldr	r3, [r7, #20]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	0801168c 	.word	0x0801168c
 8000c74:	08012234 	.word	0x08012234
 8000c78:	08011678 	.word	0x08011678

08000c7c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
 8000c88:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8000c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c90:	f113 0f02 	cmn.w	r3, #2
 8000c94:	d00b      	beq.n	8000cae <lfs_bd_prog+0x32>
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d305      	bcc.n	8000cae <lfs_bd_prog+0x32>
 8000ca2:	4b47      	ldr	r3, [pc, #284]	; (8000dc0 <lfs_bd_prog+0x144>)
 8000ca4:	4a47      	ldr	r2, [pc, #284]	; (8000dc4 <lfs_bd_prog+0x148>)
 8000ca6:	21e8      	movs	r1, #232	; 0xe8
 8000ca8:	4847      	ldr	r0, [pc, #284]	; (8000dc8 <lfs_bd_prog+0x14c>)
 8000caa:	f00f fa57 	bl	801015c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb2:	441a      	add	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d978      	bls.n	8000db0 <lfs_bd_prog+0x134>
 8000cbe:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <lfs_bd_prog+0x150>)
 8000cc0:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <lfs_bd_prog+0x148>)
 8000cc2:	21e9      	movs	r1, #233	; 0xe9
 8000cc4:	4840      	ldr	r0, [pc, #256]	; (8000dc8 <lfs_bd_prog+0x14c>)
 8000cc6:	f00f fa49 	bl	801015c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d151      	bne.n	8000d78 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d34c      	bcc.n	8000d78 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	4413      	add	r3, r2
                off >= pcache->off &&
 8000cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d243      	bcs.n	8000d78 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	6859      	ldr	r1, [r3, #4]
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000cfe:	4413      	add	r3, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d04:	f7ff fc52 	bl	80005ac <lfs_min>
 8000d08:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d14:	1acb      	subs	r3, r1, r3
 8000d16:	4413      	add	r3, r2
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	69f9      	ldr	r1, [r7, #28]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00f fa97 	bl	8010250 <memcpy>

            data += diff;
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	4413      	add	r3, r2
 8000d28:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	4413      	add	r3, r2
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	6898      	ldr	r0, [r3, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fc20 	bl	800058c <lfs_max>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d127      	bne.n	8000db0 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f7ff fed8 	bl	8000b1c <lfs_bd_flush>
 8000d6c:	6178      	str	r0, [r7, #20]
                if (err) {
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d01d      	beq.n	8000db0 <lfs_bd_prog+0x134>
                    return err;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	e01f      	b.n	8000db8 <lfs_bd_prog+0x13c>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d80:	d006      	beq.n	8000d90 <lfs_bd_prog+0x114>
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <lfs_bd_prog+0x154>)
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <lfs_bd_prog+0x148>)
 8000d86:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000d8a:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <lfs_bd_prog+0x14c>)
 8000d8c:	f00f f9e6 	bl	801015c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d94:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000da0:	f7ff fc14 	bl	80005cc <lfs_aligndown>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8000db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d189      	bne.n	8000cca <lfs_bd_prog+0x4e>
    }

    return 0;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	080116c0 	.word	0x080116c0
 8000dc4:	08012240 	.word	0x08012240
 8000dc8:	08011678 	.word	0x08011678
 8000dcc:	080116fc 	.word	0x080116fc
 8000dd0:	08011720 	.word	0x08011720

08000dd4 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d306      	bcc.n	8000df8 <lfs_bd_erase+0x24>
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <lfs_bd_erase+0x54>)
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <lfs_bd_erase+0x58>)
 8000dee:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000df2:	480f      	ldr	r0, [pc, #60]	; (8000e30 <lfs_bd_erase+0x5c>)
 8000df4:	f00f f9b2 	bl	801015c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000e02:	6839      	ldr	r1, [r7, #0]
 8000e04:	4610      	mov	r0, r2
 8000e06:	4798      	blx	r3
 8000e08:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	dd06      	ble.n	8000e1e <lfs_bd_erase+0x4a>
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <lfs_bd_erase+0x60>)
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <lfs_bd_erase+0x58>)
 8000e14:	f44f 718b 	mov.w	r1, #278	; 0x116
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <lfs_bd_erase+0x5c>)
 8000e1a:	f00f f99f 	bl	801015c <__assert_func>
    return err;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	08011658 	.word	0x08011658
 8000e2c:	0801224c 	.word	0x0801224c
 8000e30:	08011678 	.word	0x08011678
 8000e34:	0801168c 	.word	0x0801168c

08000e38 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3304      	adds	r3, #4
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	601a      	str	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e72:	d005      	beq.n	8000e80 <lfs_pair_isnull+0x1e>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3304      	adds	r3, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e7e:	d101      	bne.n	8000e84 <lfs_pair_isnull+0x22>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <lfs_pair_isnull+0x24>
 8000e84:	2300      	movs	r3, #0
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d017      	beq.n	8000ede <lfs_pair_cmp+0x46>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d00f      	beq.n	8000ede <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d008      	beq.n	8000ede <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d001      	beq.n	8000ede <lfs_pair_cmp+0x46>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <lfs_pair_cmp+0x48>
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d107      	bne.n	8000f12 <lfs_pair_issync+0x26>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3304      	adds	r3, #4
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d00d      	beq.n	8000f2e <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d108      	bne.n	8000f32 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3304      	adds	r3, #4
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d101      	bne.n	8000f32 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <lfs_pair_issync+0x48>
 8000f32:	2300      	movs	r3, #0
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8000f46:	b590      	push	{r4, r7, lr}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fb9a 	bl	800068c <lfs_fromle32>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3304      	adds	r3, #4
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1d1c      	adds	r4, r3, #4
 8000f68:	4610      	mov	r0, r2
 8000f6a:	f7ff fb8f 	bl	800068c <lfs_fromle32>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6023      	str	r3, [r4, #0]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd90      	pop	{r4, r7, pc}

08000f7a <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fb8b 	bl	80006a2 <lfs_tole32>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	1d1c      	adds	r4, r3, #4
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	f7ff fb80 	bl	80006a2 <lfs_tole32>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6023      	str	r3, [r4, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}

08000fae <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	0fdb      	lsrs	r3, r3, #31
 8000fbc:	b2db      	uxtb	r3, r3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	059b      	lsls	r3, r3, #22
 8000fd6:	159b      	asrs	r3, r3, #22
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fdc:	bf0c      	ite	eq
 8000fde:	2301      	moveq	r3, #1
 8000fe0:	2300      	movne	r3, #0
 8000fe2:	b2db      	uxtb	r3, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	0d1b      	lsrs	r3, r3, #20
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001002:	b29b      	uxth	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	0d1b      	lsrs	r3, r3, #20
 800101c:	b29b      	uxth	r3, r3
 800101e:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8001022:	b29b      	uxth	r3, r3
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0d1b      	lsrs	r3, r3, #20
 800103c:	b29b      	uxth	r3, r3
 800103e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001042:	b29b      	uxth	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0d1b      	lsrs	r3, r3, #20
 800105c:	b2db      	uxtb	r3, r3
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffec 	bl	8001050 <lfs_tag_chunk>
 8001078:	4603      	mov	r3, r0
 800107a:	b25b      	sxtb	r3, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	0a9b      	lsrs	r3, r3, #10
 8001090:	b29b      	uxth	r3, r3
 8001092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001096:	b29b      	uxth	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff7f 	bl	8000fca <lfs_tag_isdelete>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ffe5 	bl	80010a4 <lfs_tag_size>
 80010da:	4603      	mov	r3, r0
 80010dc:	3304      	adds	r3, #4
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 80010e6:	b480      	push	{r7}
 80010e8:	b085      	sub	sp, #20
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	e012      	b.n	800111c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	6819      	ldr	r1, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	4403      	add	r3, r0
 8001112:	404a      	eors	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3301      	adds	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b02      	cmp	r3, #2
 8001120:	dde9      	ble.n	80010f6 <lfs_gstate_xor+0x10>
    }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e00b      	b.n	8001156 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <lfs_gstate_iszero+0x20>
            return false;
 800114c:	2300      	movs	r3, #0
 800114e:	e006      	b.n	800115e <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b02      	cmp	r3, #2
 800115a:	ddf0      	ble.n	800113e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff94 	bl	80010a4 <lfs_tag_size>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	bf14      	ite	ne
 8001182:	2301      	movne	r3, #1
 8001184:	2300      	moveq	r3, #0
 8001186:	b2db      	uxtb	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff81 	bl	80010a4 <lfs_tag_size>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b2db      	uxtb	r3, r3
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff18 	bl	8000ff0 <lfs_tag_type1>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5f 	bl	80010a4 <lfs_tag_size>
 80011e6:	4603      	mov	r3, r0
 80011e8:	0a5b      	lsrs	r3, r3, #9
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fef0 	bl	8000ff0 <lfs_tag_type1>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <lfs_gstate_hasmovehere+0x30>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3304      	adds	r3, #4
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe3b 	bl	8000e98 <lfs_pair_cmp>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <lfs_gstate_hasmovehere+0x30>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <lfs_gstate_hasmovehere+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fa1f 	bl	800068c <lfs_fromle32>
 800124e:	4602      	mov	r2, r0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fa17 	bl	800068c <lfs_fromle32>
 800125e:	4602      	mov	r2, r0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fa0f 	bl	800068c <lfs_fromle32>
 800126e:	4602      	mov	r2, r0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fa0a 	bl	80006a2 <lfs_tole32>
 800128e:	4602      	mov	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fa02 	bl	80006a2 <lfs_tole32>
 800129e:	4602      	mov	r2, r0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f9fa 	bl	80006a2 <lfs_tole32>
 80012ae:	4602      	mov	r2, r0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f9df 	bl	800068c <lfs_fromle32>
 80012ce:	4602      	mov	r2, r0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f9d7 	bl	800068c <lfs_fromle32>
 80012de:	4602      	mov	r2, r0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	605a      	str	r2, [r3, #4]
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f9d2 	bl	80006a2 <lfs_tole32>
 80012fe:	4602      	mov	r2, r0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f9ca 	bl	80006a2 <lfs_tole32>
 800130e:	4602      	mov	r2, r0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	605a      	str	r2, [r3, #4]
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f9af 	bl	800068c <lfs_fromle32>
 800132e:	4602      	mov	r2, r0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f9a7 	bl	800068c <lfs_fromle32>
 800133e:	4602      	mov	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	605a      	str	r2, [r3, #4]
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f9a2 	bl	80006a2 <lfs_tole32>
 800135e:	4602      	mov	r2, r0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f99a 	bl	80006a2 <lfs_tole32>
 800136e:	4602      	mov	r2, r0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	605a      	str	r2, [r3, #4]
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f97f 	bl	800068c <lfs_fromle32>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f977 	bl	800068c <lfs_fromle32>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f96f 	bl	800068c <lfs_fromle32>
 80013ae:	4602      	mov	r2, r0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f967 	bl	800068c <lfs_fromle32>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f95f 	bl	800068c <lfs_fromle32>
 80013ce:	4602      	mov	r2, r0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f957 	bl	800068c <lfs_fromle32>
 80013de:	4602      	mov	r2, r0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	615a      	str	r2, [r3, #20]
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f952 	bl	80006a2 <lfs_tole32>
 80013fe:	4602      	mov	r2, r0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f94a 	bl	80006a2 <lfs_tole32>
 800140e:	4602      	mov	r2, r0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f942 	bl	80006a2 <lfs_tole32>
 800141e:	4602      	mov	r2, r0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f93a 	bl	80006a2 <lfs_tole32>
 800142e:	4602      	mov	r2, r0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f932 	bl	80006a2 <lfs_tole32>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f92a 	bl	80006a2 <lfs_tole32>
 800144e:	4602      	mov	r2, r0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	615a      	str	r2, [r3, #20]
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e009      	b.n	8001480 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d101      	bne.n	800147a <lfs_mlist_isopen+0x1e>
            return true;
 8001476:	2301      	movs	r3, #1
 8001478:	e007      	b.n	800148a <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f1      	bne.n	800146c <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3328      	adds	r3, #40	; 0x28
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e00d      	b.n	80014c4 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d105      	bne.n	80014be <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	601a      	str	r2, [r3, #0]
            break;
 80014bc:	e007      	b.n	80014ce <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ed      	bne.n	80014a8 <lfs_mlist_remove+0x12>
        }
    }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <lfs_fs_disk_version+0x18>)
    }
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	00020001 	.word	0x00020001

0800151c <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffeb 	bl	8001500 <lfs_fs_disk_version>
 800152a:	4603      	mov	r3, r0
 800152c:	0c1b      	lsrs	r3, r3, #16
 800152e:	b29b      	uxth	r3, r3

}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ffdd 	bl	8001500 <lfs_fs_disk_version>
 8001546:	4603      	mov	r3, r0
 8001548:	b29b      	uxth	r3, r3
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4413      	add	r3, r2
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001574:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8001576:	fbb3 f1f2 	udiv	r1, r3, r2
 800157a:	fb01 f202 	mul.w	r2, r1, r2
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	429a      	cmp	r2, r3
 800158a:	d212      	bcs.n	80015b2 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	009a      	lsls	r2, r3, #2
 8001596:	440a      	add	r2, r1
 8001598:	6811      	ldr	r1, [r2, #0]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f002 021f 	and.w	r2, r2, #31
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4403      	add	r3, r0
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015cc:	6a1a      	ldr	r2, [r3, #32]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffe4 	bl	80015c0 <lfs_alloc_ack>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af02      	add	r7, sp, #8
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800160a:	e04f      	b.n	80016ac <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	095b      	lsrs	r3, r3, #5
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d132      	bne.n	80016ac <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001652:	6a12      	ldr	r2, [r2, #32]
 8001654:	fbb3 f1f2 	udiv	r1, r3, r2
 8001658:	fb01 f202 	mul.w	r2, r1, r2
 800165c:	1a9a      	subs	r2, r3, r2
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8001662:	e009      	b.n	8001678 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	429a      	cmp	r2, r3
 8001682:	d011      	beq.n	80016a8 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	095b      	lsrs	r3, r3, #5
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1dd      	bne.n	8001664 <lfs_alloc+0x64>
                }

                return 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e050      	b.n	800174e <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1a9      	bne.n	800160c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	4413      	add	r3, r2
 80016ca:	4a23      	ldr	r2, [pc, #140]	; (8001758 <lfs_alloc+0x158>)
 80016cc:	9200      	str	r2, [sp, #0]
 80016ce:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80016d2:	4922      	ldr	r1, [pc, #136]	; (800175c <lfs_alloc+0x15c>)
 80016d4:	4822      	ldr	r0, [pc, #136]	; (8001760 <lfs_alloc+0x160>)
 80016d6:	f00f f9a1 	bl	8010a1c <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 80016da:	f06f 031b 	mvn.w	r3, #27
 80016de:	e036      	b.n	800174e <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80016ee:	6a12      	ldr	r2, [r2, #32]
 80016f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80016f4:	fb01 f202 	mul.w	r2, r1, r2
 80016f8:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	00da      	lsls	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f7fe ff4d 	bl	80005ac <lfs_min>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	461a      	mov	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f00e fd9d 	bl	801026a <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8001730:	2301      	movs	r3, #1
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	490b      	ldr	r1, [pc, #44]	; (8001764 <lfs_alloc+0x164>)
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f004 fe5c 	bl	80063f4 <lfs_fs_rawtraverse>
 800173c:	60f8      	str	r0, [r7, #12]
        if (err) {
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f43f af62 	beq.w	800160a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff49 	bl	80015de <lfs_alloc_drop>
            return err;
 800174c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	0801176c 	.word	0x0801176c
 800175c:	08011678 	.word	0x08011678
 8001760:	08011744 	.word	0x08011744
 8001764:	08001553 	.word	0x08001553

08001768 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08f      	sub	sp, #60	; 0x3c
 800176c:	af04      	add	r7, sp, #16
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	333c      	adds	r3, #60	; 0x3c
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fd34 	bl	80011fc <lfs_gstate_hasmovehere>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80b9 	beq.w	800190e <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fc71 	bl	8001084 <lfs_tag_id>
 80017a2:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80b2 	beq.w	800190e <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fc68 	bl	8001084 <lfs_tag_id>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461c      	mov	r4, r3
 80017b8:	6838      	ldr	r0, [r7, #0]
 80017ba:	f7ff fc63 	bl	8001084 <lfs_tag_id>
 80017be:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 80017c0:	429c      	cmp	r4, r3
 80017c2:	f200 80a4 	bhi.w	800190e <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80017cc:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80017ce:	e09e      	b.n	800190e <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fc73 	bl	80010be <lfs_tag_dsize>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2204      	movs	r2, #4
 80017ec:	9203      	str	r2, [sp, #12]
 80017ee:	f107 0210 	add.w	r2, r7, #16
 80017f2:	9202      	str	r2, [sp, #8]
 80017f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f6:	9201      	str	r2, [sp, #4]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2304      	movs	r3, #4
 80017fc:	460a      	mov	r2, r1
 80017fe:	2100      	movs	r1, #0
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7fe ffaf 	bl	8000764 <lfs_bd_read>
 8001806:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <lfs_dir_getslice+0xaa>
            return err;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	e089      	b.n	8001926 <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ff50 	bl	80006ba <lfs_frombe32>
 800181a:	4602      	mov	r2, r0
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	4053      	eors	r3, r2
 8001820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001824:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fc2c 	bl	8001084 <lfs_tag_id>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d02b      	beq.n	800188a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001832:	69f8      	ldr	r0, [r7, #28]
 8001834:	f7ff fbdc 	bl	8000ff0 <lfs_tag_type1>
 8001838:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800183a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800183e:	d124      	bne.n	800188a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001840:	69f8      	ldr	r0, [r7, #28]
 8001842:	f7ff fc1f 	bl	8001084 <lfs_tag_id>
 8001846:	4603      	mov	r3, r0
 8001848:	461c      	mov	r4, r3
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc17 	bl	8001084 <lfs_tag_id>
 8001856:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001858:	429c      	cmp	r4, r3
 800185a:	d816      	bhi.n	800188a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	1ad2      	subs	r2, r2, r3
 8001862:	4b33      	ldr	r3, [pc, #204]	; (8001930 <lfs_dir_getslice+0x1c8>)
 8001864:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800186a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	429a      	cmp	r2, r3
 8001872:	d102      	bne.n	800187a <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8001874:	f06f 0301 	mvn.w	r3, #1
 8001878:	e055      	b.n	8001926 <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800187a:	69f8      	ldr	r0, [r7, #28]
 800187c:	f7ff fbf5 	bl	800106a <lfs_tag_splice>
 8001880:	4603      	mov	r3, r0
 8001882:	029a      	lsls	r2, r3, #10
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	4413      	add	r3, r2
 8001888:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	1ad2      	subs	r2, r2, r3
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	405a      	eors	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d138      	bne.n	800190e <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 800189c:	69f8      	ldr	r0, [r7, #28]
 800189e:	f7ff fb94 	bl	8000fca <lfs_tag_isdelete>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 80018a8:	f06f 0301 	mvn.w	r3, #1
 80018ac:	e03b      	b.n	8001926 <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 80018ae:	69f8      	ldr	r0, [r7, #28]
 80018b0:	f7ff fbf8 	bl	80010a4 <lfs_tag_size>
 80018b4:	4603      	mov	r3, r0
 80018b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe77 	bl	80005ac <lfs_min>
 80018be:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80018c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018ca:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80018cc:	3204      	adds	r2, #4
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	9103      	str	r1, [sp, #12]
 80018d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018d4:	9102      	str	r1, [sp, #8]
 80018d6:	9201      	str	r2, [sp, #4]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	4602      	mov	r2, r0
 80018de:	2100      	movs	r1, #0
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f7fe ff3f 	bl	8000764 <lfs_bd_read>
 80018e6:	61b8      	str	r0, [r7, #24]
            if (err) {
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <lfs_dir_getslice+0x18a>
                return err;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	e019      	b.n	8001926 <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80018f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	18d0      	adds	r0, r2, r3
 80018f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	2100      	movs	r1, #0
 8001902:	f00e fcb2 	bl	801026a <memset>

            return tag + gdiff;
 8001906:	6a3a      	ldr	r2, [r7, #32]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	4413      	add	r3, r2
 800190c:	e00b      	b.n	8001926 <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fbd4 	bl	80010be <lfs_tag_dsize>
 8001916:	4603      	mov	r3, r0
 8001918:	3304      	adds	r3, #4
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	429a      	cmp	r2, r3
 800191e:	f4bf af57 	bcs.w	80017d0 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8001922:	f06f 0301 	mvn.w	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	372c      	adds	r7, #44	; 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	bd90      	pop	{r4, r7, pc}
 800192e:	bf00      	nop
 8001930:	000ffc00 	.word	0x000ffc00

08001934 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af04      	add	r7, sp, #16
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001942:	6838      	ldr	r0, [r7, #0]
 8001944:	f7ff fbae 	bl	80010a4 <lfs_tag_size>
 8001948:	4603      	mov	r3, r0
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	2300      	movs	r3, #0
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff ff04 	bl	8001768 <lfs_dir_getslice>
 8001960:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800196a:	b580      	push	{r7, lr}
 800196c:	b08c      	sub	sp, #48	; 0x30
 800196e:	af04      	add	r7, sp, #16
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800197c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800197e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001980:	441a      	add	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	429a      	cmp	r2, r3
 800198a:	f240 80c0 	bls.w	8001b0e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800198e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001992:	e0c1      	b.n	8001b18 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001996:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03f      	beq.n	8001a1e <lfs_dir_getread+0xb4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f113 0f02 	cmn.w	r3, #2
 80019a6:	d13a      	bne.n	8001a1e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80019b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d232      	bcs.n	8001a1e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019be:	429a      	cmp	r2, r3
 80019c0:	d324      	bcc.n	8001a0c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019cc:	1acb      	subs	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	69b8      	ldr	r0, [r7, #24]
 80019d4:	f7fe fdea 	bl	80005ac <lfs_min>
 80019d8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019e4:	1acb      	subs	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4619      	mov	r1, r3
 80019ec:	69f8      	ldr	r0, [r7, #28]
 80019ee:	f00e fc2f 	bl	8010250 <memcpy>

                data += diff;
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	4413      	add	r3, r2
 80019f8:	61fb      	str	r3, [r7, #28]
                off += diff;
 80019fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	4413      	add	r3, r2
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001a0a:	e080      	b.n	8001b0e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	4619      	mov	r1, r3
 8001a16:	69b8      	ldr	r0, [r7, #24]
 8001a18:	f7fe fdc8 	bl	80005ac <lfs_min>
 8001a1c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f113 0f02 	cmn.w	r3, #2
 8001a26:	d13a      	bne.n	8001a9e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d232      	bcs.n	8001a9e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d324      	bcc.n	8001a8c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	1acb      	subs	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	69b8      	ldr	r0, [r7, #24]
 8001a54:	f7fe fdaa 	bl	80005ac <lfs_min>
 8001a58:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a64:	1acb      	subs	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	69f8      	ldr	r0, [r7, #28]
 8001a6e:	f00e fbef 	bl	8010250 <memcpy>

                data += diff;
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	4413      	add	r3, r2
 8001a78:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	4413      	add	r3, r2
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001a8a:	e040      	b.n	8001b0e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4619      	mov	r1, r3
 8001a96:	69b8      	ldr	r0, [r7, #24]
 8001a98:	f7fe fd88 	bl	80005ac <lfs_min>
 8001a9c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f06f 0201 	mvn.w	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	4619      	mov	r1, r3
 8001aae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ab0:	f7fe fd8c 	bl	80005cc <lfs_aligndown>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001abe:	441a      	add	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f7fe fd94 	bl	80005f6 <lfs_alignup>
 8001ace:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f7fe fd67 	bl	80005ac <lfs_min>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	6889      	ldr	r1, [r1, #8]
 8001af0:	9102      	str	r1, [sp, #8]
 8001af2:	9201      	str	r2, [sp, #4]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff fe33 	bl	8001768 <lfs_dir_getslice>
 8001b02:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	da01      	bge.n	8001b0e <lfs_dir_getread+0x1a4>
            return err;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	e004      	b.n	8001b18 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f47f af3f 	bne.w	8001994 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3720      	adds	r7, #32
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <lfs_dir_traverse_filter+0x1e>
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <lfs_dir_traverse_filter+0xac>)
 8001b3c:	e000      	b.n	8001b40 <lfs_dir_traverse_filter+0x20>
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001b40:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	405a      	eors	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d014      	beq.n	8001b7c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa37 	bl	8000fca <lfs_tag_isdelete>
 8001b5c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10c      	bne.n	8001b7c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <lfs_dir_traverse_filter+0xac>)
 8001b66:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <lfs_dir_traverse_filter+0xb4>)
 8001b6e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001b70:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001b74:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d104      	bne.n	8001b86 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
        return true;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e01e      	b.n	8001bc4 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f7ff fa32 	bl	8000ff0 <lfs_tag_type1>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d116      	bne.n	8001bc2 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001b94:	68b8      	ldr	r0, [r7, #8]
 8001b96:	f7ff fa75 	bl	8001084 <lfs_tag_id>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461c      	mov	r4, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fa6e 	bl	8001084 <lfs_tag_id>
 8001ba8:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001baa:	429c      	cmp	r4, r3
 8001bac:	d809      	bhi.n	8001bc2 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001bae:	68b8      	ldr	r0, [r7, #8]
 8001bb0:	f7ff fa5b 	bl	800106a <lfs_tag_splice>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	029a      	lsls	r2, r3, #10
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	7ffffc00 	.word	0x7ffffc00
 8001bd0:	700ffc00 	.word	0x700ffc00
 8001bd4:	000ffc00 	.word	0x000ffc00

08001bd8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b0c1      	sub	sp, #260	; 0x104
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001bec:	6838      	ldr	r0, [r7, #0]
 8001bee:	f7ff fa66 	bl	80010be <lfs_tag_dsize>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d237      	bcs.n	8001c70 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8001c00:	6838      	ldr	r0, [r7, #0]
 8001c02:	f7ff fa5c 	bl	80010be <lfs_tag_dsize>
 8001c06:	4602      	mov	r2, r0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001c0e:	68f9      	ldr	r1, [r7, #12]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2204      	movs	r2, #4
 8001c16:	9203      	str	r2, [sp, #12]
 8001c18:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001c1c:	9202      	str	r2, [sp, #8]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	9201      	str	r2, [sp, #4]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2304      	movs	r3, #4
 8001c26:	460a      	mov	r2, r1
 8001c28:	2100      	movs	r1, #0
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7fe fd9a 	bl	8000764 <lfs_bd_read>
 8001c30:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8001c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <lfs_dir_traverse+0x6a>
                    return err;
 8001c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c40:	e3a6      	b.n	8002390 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fd38 	bl	80006ba <lfs_frombe32>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4053      	eors	r3, r2
 8001c50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c54:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001c62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	e01b      	b.n	8001ca8 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8001c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	dd13      	ble.n	8001ca0 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8001c78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8001c80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8001c8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c8e:	3308      	adds	r3, #8
 8001c90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8001c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c9e:	e003      	b.n	8001ca8 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8001ca6:	e2a2      	b.n	80021ee <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8001ca8:	4b7e      	ldr	r3, [pc, #504]	; (8001ea4 <lfs_dir_traverse+0x2cc>)
 8001caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8001cae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cb4:	405a      	eors	r2, r3
 8001cb6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001cba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 8285 	bne.w	80021d2 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8001cc8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001ccc:	f7ff f9da 	bl	8001084 <lfs_tag_id>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80f0 	beq.w	8001eb8 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8001cd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d906      	bls.n	8001cee <lfs_dir_traverse+0x116>
 8001ce0:	4b71      	ldr	r3, [pc, #452]	; (8001ea8 <lfs_dir_traverse+0x2d0>)
 8001ce2:	4a72      	ldr	r2, [pc, #456]	; (8001eac <lfs_dir_traverse+0x2d4>)
 8001ce4:	f240 3193 	movw	r1, #915	; 0x393
 8001ce8:	4871      	ldr	r0, [pc, #452]	; (8001eb0 <lfs_dir_traverse+0x2d8>)
 8001cea:	f00e fa37 	bl	801015c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001cee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cf0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	33f0      	adds	r3, #240	; 0xf0
 8001cfe:	443b      	add	r3, r7
 8001d00:	3b98      	subs	r3, #152	; 0x98
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	33f0      	adds	r3, #240	; 0xf0
 8001d14:	443b      	add	r3, r7
 8001d16:	3b94      	subs	r3, #148	; 0x94
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d20:	4613      	mov	r3, r2
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	1a9b      	subs	r3, r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	33f0      	adds	r3, #240	; 0xf0
 8001d2a:	443b      	add	r3, r7
 8001d2c:	3b90      	subs	r3, #144	; 0x90
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	33f0      	adds	r3, #240	; 0xf0
 8001d40:	443b      	add	r3, r7
 8001d42:	3b8c      	subs	r3, #140	; 0x8c
 8001d44:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d4e:	4613      	mov	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	33f0      	adds	r3, #240	; 0xf0
 8001d58:	443b      	add	r3, r7
 8001d5a:	3b88      	subs	r3, #136	; 0x88
 8001d5c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	33f0      	adds	r3, #240	; 0xf0
 8001d70:	443b      	add	r3, r7
 8001d72:	3b84      	subs	r3, #132	; 0x84
 8001d74:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d7e:	4613      	mov	r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	1a9b      	subs	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	33f0      	adds	r3, #240	; 0xf0
 8001d88:	443b      	add	r3, r7
 8001d8a:	3b80      	subs	r3, #128	; 0x80
 8001d8c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d96:	4613      	mov	r3, r2
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	33f0      	adds	r3, #240	; 0xf0
 8001da0:	443b      	add	r3, r7
 8001da2:	3b7c      	subs	r3, #124	; 0x7c
 8001da4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001dae:	4613      	mov	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	33f0      	adds	r3, #240	; 0xf0
 8001db8:	443b      	add	r3, r7
 8001dba:	3b7a      	subs	r3, #122	; 0x7a
 8001dbc:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	33f0      	adds	r3, #240	; 0xf0
 8001dd0:	443b      	add	r3, r7
 8001dd2:	3b78      	subs	r3, #120	; 0x78
 8001dd4:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001dde:	4613      	mov	r3, r2
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	33f0      	adds	r3, #240	; 0xf0
 8001de8:	443b      	add	r3, r7
 8001dea:	3b74      	subs	r3, #116	; 0x74
 8001dec:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001df6:	4613      	mov	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	33f0      	adds	r3, #240	; 0xf0
 8001e00:	443b      	add	r3, r7
 8001e02:	3b70      	subs	r3, #112	; 0x70
 8001e04:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e0e:	4613      	mov	r3, r2
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	33f0      	adds	r3, #240	; 0xf0
 8001e18:	443b      	add	r3, r7
 8001e1a:	3b6c      	subs	r3, #108	; 0x6c
 8001e1c:	6019      	str	r1, [r3, #0]
 8001e1e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	33f0      	adds	r3, #240	; 0xf0
 8001e2c:	443b      	add	r3, r7
 8001e2e:	3b68      	subs	r3, #104	; 0x68
 8001e30:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	33f0      	adds	r3, #240	; 0xf0
 8001e44:	443b      	add	r3, r7
 8001e46:	3b68      	subs	r3, #104	; 0x68
 8001e48:	3304      	adds	r3, #4
 8001e4a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e52:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8001e56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <lfs_dir_traverse+0x2dc>)
 8001e80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8001e84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001e8e:	4613      	mov	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	3328      	adds	r3, #40	; 0x28
 8001e98:	440b      	add	r3, r1
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ea0:	e6a4      	b.n	8001bec <lfs_dir_traverse+0x14>
 8001ea2:	bf00      	nop
 8001ea4:	7ff00000 	.word	0x7ff00000
 8001ea8:	08011770 	.word	0x08011770
 8001eac:	0801225c 	.word	0x0801225c
 8001eb0:	08011678 	.word	0x08011678
 8001eb4:	08001b21 	.word	0x08001b21
                continue;
            }
        }

popped:
 8001eb8:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8001eba:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001ebe:	f7ff f8e1 	bl	8001084 <lfs_tag_id>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f8da 	bl	8001084 <lfs_tag_id>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8001ed4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	f200 817c 	bhi.w	80021d6 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff f8cf 	bl	8001084 <lfs_tag_id>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f240 8171 	bls.w	80021d6 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f89a 	bl	8001030 <lfs_tag_type3>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f43f ae74 	beq.w	8001bec <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8001f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f892 	bl	8001030 <lfs_tag_type3>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f240 1301 	movw	r3, #257	; 0x101
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 80e0 	bne.w	80020da <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8001f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f1e:	4ab1      	ldr	r2, [pc, #708]	; (80021e4 <lfs_dir_traverse+0x60c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	f000 815a 	beq.w	80021da <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8001f26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	33f0      	adds	r3, #240	; 0xf0
 8001f34:	443b      	add	r3, r7
 8001f36:	3b98      	subs	r3, #152	; 0x98
 8001f38:	4618      	mov	r0, r3
 8001f3a:	233c      	movs	r3, #60	; 0x3c
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2100      	movs	r1, #0
 8001f40:	f00e f993 	bl	801026a <memset>
 8001f44:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	33f0      	adds	r3, #240	; 0xf0
 8001f52:	443b      	add	r3, r7
 8001f54:	3b98      	subs	r3, #152	; 0x98
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	33f0      	adds	r3, #240	; 0xf0
 8001f68:	443b      	add	r3, r7
 8001f6a:	3b94      	subs	r3, #148	; 0x94
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	33f0      	adds	r3, #240	; 0xf0
 8001f7e:	443b      	add	r3, r7
 8001f80:	3b90      	subs	r3, #144	; 0x90
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	33f0      	adds	r3, #240	; 0xf0
 8001f94:	443b      	add	r3, r7
 8001f96:	3b8c      	subs	r3, #140	; 0x8c
 8001f98:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	33f0      	adds	r3, #240	; 0xf0
 8001fac:	443b      	add	r3, r7
 8001fae:	3b88      	subs	r3, #136	; 0x88
 8001fb0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	33f0      	adds	r3, #240	; 0xf0
 8001fc4:	443b      	add	r3, r7
 8001fc6:	3b84      	subs	r3, #132	; 0x84
 8001fc8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	33f0      	adds	r3, #240	; 0xf0
 8001fdc:	443b      	add	r3, r7
 8001fde:	3b80      	subs	r3, #128	; 0x80
 8001fe0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	33f0      	adds	r3, #240	; 0xf0
 8001ff4:	443b      	add	r3, r7
 8001ff6:	3b7c      	subs	r3, #124	; 0x7c
 8001ff8:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	33f0      	adds	r3, #240	; 0xf0
 800200c:	443b      	add	r3, r7
 800200e:	3b7a      	subs	r3, #122	; 0x7a
 8002010:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002014:	801a      	strh	r2, [r3, #0]
 8002016:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	33f0      	adds	r3, #240	; 0xf0
 8002024:	443b      	add	r3, r7
 8002026:	3b78      	subs	r3, #120	; 0x78
 8002028:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002032:	4613      	mov	r3, r2
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	33f0      	adds	r3, #240	; 0xf0
 800203c:	443b      	add	r3, r7
 800203e:	3b74      	subs	r3, #116	; 0x74
 8002040:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	33f0      	adds	r3, #240	; 0xf0
 8002054:	443b      	add	r3, r7
 8002056:	3b70      	subs	r3, #112	; 0x70
 8002058:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800205c:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800205e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002062:	3301      	adds	r3, #1
 8002064:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f81a 	bl	80010a4 <lfs_tag_size>
 8002070:	4603      	mov	r3, r0
 8002072:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f803 	bl	8001084 <lfs_tag_id>
 800207e:	4603      	mov	r3, r0
 8002080:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002088:	60bb      	str	r3, [r7, #8]
            off = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002092:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80020a0:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <lfs_dir_traverse+0x610>)
 80020a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80020a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80020ae:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80020b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 80020b6:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80020ba:	3301      	adds	r3, #1
 80020bc:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 80020c0:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80020c4:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80020d0:	4413      	add	r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 80020d8:	e588      	b.n	8001bec <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80020da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe ffa7 	bl	8001030 <lfs_tag_type3>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80020e8:	d159      	bne.n	800219e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020f0:	e04b      	b.n	800218a <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 80020f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80020fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	461a      	mov	r2, r3
 8002108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002114:	051c      	lsls	r4, r3, #20
 8002116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe ffb3 	bl	8001084 <lfs_tag_id>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002126:	4413      	add	r3, r2
 8002128:	029b      	lsls	r3, r3, #10
 800212a:	ea44 0103 	orr.w	r1, r4, r3
 800212e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	461a      	mov	r2, r3
 800213c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002140:	4413      	add	r3, r2
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8002146:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	461a      	mov	r2, r3
 8002154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002158:	4413      	add	r3, r2
 800215a:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800215c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002160:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002164:	4798      	blx	r3
 8002166:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 800216a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800216e:	2b00      	cmp	r3, #0
 8002170:	da02      	bge.n	8002178 <lfs_dir_traverse+0x5a0>
                    return res;
 8002172:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002176:	e10b      	b.n	8002390 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8002178:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d12e      	bne.n	80021de <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002184:	3301      	adds	r3, #1
 8002186:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800218a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe ff89 	bl	80010a4 <lfs_tag_size>
 8002192:	4602      	mov	r2, r0
 8002194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002198:	4293      	cmp	r3, r2
 800219a:	d3aa      	bcc.n	80020f2 <lfs_dir_traverse+0x51a>
 800219c:	e526      	b.n	8001bec <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800219e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80021a2:	029a      	lsls	r2, r3, #10
 80021a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a6:	18d1      	adds	r1, r2, r3
 80021a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021ac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80021b0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80021b4:	4798      	blx	r3
 80021b6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80021ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	da02      	bge.n	80021c8 <lfs_dir_traverse+0x5f0>
                return res;
 80021c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021c6:	e0e3      	b.n	8002390 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 80021c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10d      	bne.n	80021ec <lfs_dir_traverse+0x614>
 80021d0:	e50c      	b.n	8001bec <lfs_dir_traverse+0x14>
                continue;
 80021d2:	bf00      	nop
 80021d4:	e50a      	b.n	8001bec <lfs_dir_traverse+0x14>
            continue;
 80021d6:	bf00      	nop
 80021d8:	e508      	b.n	8001bec <lfs_dir_traverse+0x14>
                continue;
 80021da:	bf00      	nop
 80021dc:	e506      	b.n	8001bec <lfs_dir_traverse+0x14>
                    break;
 80021de:	bf00      	nop
        {
 80021e0:	e504      	b.n	8001bec <lfs_dir_traverse+0x14>
 80021e2:	bf00      	nop
 80021e4:	08001b21 	.word	0x08001b21
 80021e8:	600ffc00 	.word	0x600ffc00
                break;
 80021ec:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80021ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80ca 	beq.w	800238c <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80021f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	33f0      	adds	r3, #240	; 0xf0
 8002208:	443b      	add	r3, r7
 800220a:	3b98      	subs	r3, #152	; 0x98
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8002210:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002214:	1e5a      	subs	r2, r3, #1
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	33f0      	adds	r3, #240	; 0xf0
 8002220:	443b      	add	r3, r7
 8002222:	3b94      	subs	r3, #148	; 0x94
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8002228:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800222c:	1e5a      	subs	r2, r3, #1
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	33f0      	adds	r3, #240	; 0xf0
 8002238:	443b      	add	r3, r7
 800223a:	3b90      	subs	r3, #144	; 0x90
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8002240:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002244:	1e5a      	subs	r2, r3, #1
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	33f0      	adds	r3, #240	; 0xf0
 8002250:	443b      	add	r3, r7
 8002252:	3b8c      	subs	r3, #140	; 0x8c
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 800225a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800225e:	1e5a      	subs	r2, r3, #1
 8002260:	4613      	mov	r3, r2
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	33f0      	adds	r3, #240	; 0xf0
 800226a:	443b      	add	r3, r7
 800226c:	3b88      	subs	r3, #136	; 0x88
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8002274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	33f0      	adds	r3, #240	; 0xf0
 8002284:	443b      	add	r3, r7
 8002286:	3b84      	subs	r3, #132	; 0x84
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 800228e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	33f0      	adds	r3, #240	; 0xf0
 800229e:	443b      	add	r3, r7
 80022a0:	3b80      	subs	r3, #128	; 0x80
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80022a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022ac:	1e5a      	subs	r2, r3, #1
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	33f0      	adds	r3, #240	; 0xf0
 80022b8:	443b      	add	r3, r7
 80022ba:	3b7c      	subs	r3, #124	; 0x7c
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 80022c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022c6:	1e5a      	subs	r2, r3, #1
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	33f0      	adds	r3, #240	; 0xf0
 80022d2:	443b      	add	r3, r7
 80022d4:	3b7a      	subs	r3, #122	; 0x7a
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80022dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	33f0      	adds	r3, #240	; 0xf0
 80022ec:	443b      	add	r3, r7
 80022ee:	3b78      	subs	r3, #120	; 0x78
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80022f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	33f0      	adds	r3, #240	; 0xf0
 8002306:	443b      	add	r3, r7
 8002308:	3b74      	subs	r3, #116	; 0x74
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8002310:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	33f0      	adds	r3, #240	; 0xf0
 8002320:	443b      	add	r3, r7
 8002322:	3b70      	subs	r3, #112	; 0x70
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 800232a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	4613      	mov	r3, r2
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	33f0      	adds	r3, #240	; 0xf0
 800233a:	443b      	add	r3, r7
 800233c:	3b6c      	subs	r3, #108	; 0x6c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8002342:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	33f0      	adds	r3, #240	; 0xf0
 8002352:	443b      	add	r3, r7
 8002354:	3b68      	subs	r3, #104	; 0x68
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 800235c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	33f0      	adds	r3, #240	; 0xf0
 800236c:	443b      	add	r3, r7
 800236e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8002372:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002376:	3204      	adds	r2, #4
 8002378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800237c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002380:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002384:	3b01      	subs	r3, #1
 8002386:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 800238a:	e596      	b.n	8001eba <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 800238c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8002390:	4618      	mov	r0, r3
 8002392:	37f4      	adds	r7, #244	; 0xf4
 8002394:	46bd      	mov	sp, r7
 8002396:	bd90      	pop	{r4, r7, pc}

08002398 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239a:	b0a5      	sub	sp, #148	; 0x94
 800239c:	af04      	add	r7, sp, #16
 800239e:	6178      	str	r0, [r7, #20]
 80023a0:	6139      	str	r1, [r7, #16]
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023aa:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d207      	bcs.n	80023ca <lfs_dir_fetchmatch+0x32>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3304      	adds	r3, #4
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d302      	bcc.n	80023d0 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 80023ca:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80023ce:	e3a4      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80023d0:	2300      	movs	r3, #0
 80023d2:	647b      	str	r3, [r7, #68]	; 0x44
 80023d4:	2300      	movs	r3, #0
 80023d6:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80023dc:	2300      	movs	r3, #0
 80023de:	677b      	str	r3, [r7, #116]	; 0x74
 80023e0:	e05a      	b.n	8002498 <lfs_dir_fetchmatch+0x100>
        int err = lfs_bd_read(lfs,
 80023e2:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80023e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80023ec:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80023ee:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80023f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80023f8:	2104      	movs	r1, #4
 80023fa:	9103      	str	r1, [sp, #12]
 80023fc:	9202      	str	r2, [sp, #8]
 80023fe:	2200      	movs	r2, #0
 8002400:	9201      	str	r2, [sp, #4]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2304      	movs	r3, #4
 8002406:	4602      	mov	r2, r0
 8002408:	2100      	movs	r1, #0
 800240a:	6978      	ldr	r0, [r7, #20]
 800240c:	f7fe f9aa 	bl	8000764 <lfs_bd_read>
 8002410:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8002412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	3378      	adds	r3, #120	; 0x78
 8002418:	f107 0208 	add.w	r2, r7, #8
 800241c:	4413      	add	r3, r2
 800241e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f932 	bl	800068c <lfs_fromle32>
 8002428:	4602      	mov	r2, r0
 800242a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	3378      	adds	r3, #120	; 0x78
 8002430:	f107 0108 	add.w	r1, r7, #8
 8002434:	440b      	add	r3, r1
 8002436:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800243a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <lfs_dir_fetchmatch+0xb4>
 8002440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002442:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002446:	d001      	beq.n	800244c <lfs_dir_fetchmatch+0xb4>
            return err;
 8002448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244a:	e366      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
        }

        if (err != LFS_ERR_CORRUPT &&
 800244c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002452:	d01e      	beq.n	8002492 <lfs_dir_fetchmatch+0xfa>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	3378      	adds	r3, #120	; 0x78
 800245a:	f107 0208 	add.w	r2, r7, #8
 800245e:	4413      	add	r3, r2
 8002460:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002466:	3301      	adds	r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	bfb8      	it	lt
 8002470:	425b      	neglt	r3, r3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	3378      	adds	r3, #120	; 0x78
 8002476:	f107 0108 	add.w	r1, r7, #8
 800247a:	440b      	add	r3, r1
 800247c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f7fe f8f4 	bl	8000670 <lfs_scmp>
 8002488:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800248a:	2b00      	cmp	r3, #0
 800248c:	dd01      	ble.n	8002492 <lfs_dir_fetchmatch+0xfa>
            r = i;
 800248e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002490:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002494:	3301      	adds	r3, #1
 8002496:	677b      	str	r3, [r7, #116]	; 0x74
 8002498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800249a:	2b01      	cmp	r3, #1
 800249c:	dda1      	ble.n	80023e2 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800249e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	bfb8      	it	lt
 80024a8:	425b      	neglt	r3, r3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80024b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b8:	3301      	adds	r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	bfb8      	it	lt
 80024c2:	425b      	neglt	r3, r3
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80024d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	bfb8      	it	lt
 80024da:	425b      	neglt	r3, r3
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	3378      	adds	r3, #120	; 0x78
 80024e0:	f107 0208 	add.w	r2, r7, #8
 80024e4:	4413      	add	r3, r2
 80024e6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80024f4:	2300      	movs	r3, #0
 80024f6:	673b      	str	r3, [r7, #112]	; 0x70
 80024f8:	e2fb      	b.n	8002af2 <lfs_dir_fetchmatch+0x75a>
        lfs_off_t off = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002502:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800250a:	4aa9      	ldr	r2, [pc, #676]	; (80027b0 <lfs_dir_fetchmatch+0x418>)
 800250c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002514:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 800251e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002520:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f8b5 	bl	80006a2 <lfs_tole32>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	3308      	adds	r3, #8
 8002542:	2204      	movs	r2, #4
 8002544:	4619      	mov	r1, r3
 8002546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254a:	f004 fe79 	bl	8007240 <lfs_crc>
 800254e:	4603      	mov	r3, r0
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe f898 	bl	800068c <lfs_fromle32>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002562:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002564:	f7fe fdab 	bl	80010be <lfs_tag_dsize>
 8002568:	4602      	mov	r2, r0
 800256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256c:	4413      	add	r3, r2
 800256e:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8002570:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002576:	69d8      	ldr	r0, [r3, #28]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2204      	movs	r2, #4
 800257e:	9203      	str	r2, [sp, #12]
 8002580:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002584:	9202      	str	r2, [sp, #8]
 8002586:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002588:	9201      	str	r2, [sp, #4]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	4603      	mov	r3, r0
 800258e:	460a      	mov	r2, r1
 8002590:	2100      	movs	r1, #0
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7fe f8e6 	bl	8000764 <lfs_bd_read>
 8002598:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800259a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <lfs_dir_fetchmatch+0x216>
                if (err == LFS_ERR_CORRUPT) {
 80025a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025a2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80025a6:	f000 81d6 	beq.w	8002956 <lfs_dir_fetchmatch+0x5be>
                    // can't continue?
                    break;
                }
                return err;
 80025aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ac:	e2b5      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80025b4:	2204      	movs	r2, #4
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 fe42 	bl	8007240 <lfs_crc>
 80025bc:	4603      	mov	r3, r0
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe f879 	bl	80006ba <lfs_frombe32>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025cc:	4053      	eors	r3, r2
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fceb 	bl	8000fae <lfs_tag_isvalid>
 80025d8:	4603      	mov	r3, r0
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <lfs_dir_fetchmatch+0x264>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 80025e4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80025e6:	f7fe fd13 	bl	8001010 <lfs_tag_type2>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 80025fa:	e1bb      	b.n	8002974 <lfs_dir_fetchmatch+0x5dc>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fd5d 	bl	80010be <lfs_tag_dsize>
 8002604:	4602      	mov	r2, r0
 8002606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002608:	441a      	add	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	429a      	cmp	r2, r3
 8002612:	f200 81a2 	bhi.w	800295a <lfs_dir_fetchmatch+0x5c2>
                break;
            }

            ptag = tag;
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fcf7 	bl	8001010 <lfs_tag_type2>
 8002622:	4603      	mov	r3, r0
 8002624:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002628:	d15e      	bne.n	80026e8 <lfs_dir_fetchmatch+0x350>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800262a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002630:	69dc      	ldr	r4, [r3, #28]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002638:	3204      	adds	r2, #4
 800263a:	2104      	movs	r1, #4
 800263c:	9103      	str	r1, [sp, #12]
 800263e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002642:	9102      	str	r1, [sp, #8]
 8002644:	9201      	str	r2, [sp, #4]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	4623      	mov	r3, r4
 800264a:	4602      	mov	r2, r0
 800264c:	2100      	movs	r1, #0
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7fe f888 	bl	8000764 <lfs_bd_read>
 8002654:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8002656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <lfs_dir_fetchmatch+0x2d2>
                    if (err == LFS_ERR_CORRUPT) {
 800265c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002662:	f000 817c 	beq.w	800295e <lfs_dir_fetchmatch+0x5c6>
                        break;
                    }
                    return err;
 8002666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 8002668:	e257      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
                }
                dcrc = lfs_fromle32(dcrc);
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe f80d 	bl	800068c <lfs_fromle32>
 8002672:	4603      	mov	r3, r0
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8002676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	429a      	cmp	r2, r3
 800267c:	f040 8171 	bne.w	8002962 <lfs_dir_fetchmatch+0x5ca>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fce4 	bl	8001050 <lfs_tag_chunk>
 8002688:	4603      	mov	r3, r0
 800268a:	07db      	lsls	r3, r3, #31
 800268c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800268e:	4053      	eors	r3, r2
 8002690:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800269a:	2204      	movs	r2, #4
 800269c:	4618      	mov	r0, r3
 800269e:	f004 fdcf 	bl	8007240 <lfs_crc>
 80026a2:	4602      	mov	r2, r0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80026a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026aa:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fd05 	bl	80010be <lfs_tag_dsize>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b8:	441a      	add	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026c2:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026ca:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80026cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80026d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80026de:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
 80026e6:	e73c      	b.n	8002562 <lfs_dir_fetchmatch+0x1ca>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 80026e8:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	681c      	ldr	r4, [r3, #0]
 80026f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f8:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fcde 	bl	80010be <lfs_tag_dsize>
 8002702:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002704:	3b04      	subs	r3, #4
 8002706:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800270a:	9203      	str	r2, [sp, #12]
 800270c:	9302      	str	r3, [sp, #8]
 800270e:	9501      	str	r5, [sp, #4]
 8002710:	9400      	str	r4, [sp, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4632      	mov	r2, r6
 8002716:	2100      	movs	r1, #0
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f7fe f9b8 	bl	8000a8e <lfs_bd_crc>
 800271e:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8002720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <lfs_dir_fetchmatch+0x39c>
                if (err == LFS_ERR_CORRUPT) {
 8002726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002728:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800272c:	f000 811b 	beq.w	8002966 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }
                return err;
 8002730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002732:	e1f2      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fc5a 	bl	8000ff0 <lfs_tag_type1>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d113      	bne.n	800276a <lfs_dir_fetchmatch+0x3d2>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fc9d 	bl	8001084 <lfs_tag_id>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002752:	4293      	cmp	r3, r2
 8002754:	f200 80b6 	bhi.w	80028c4 <lfs_dir_fetchmatch+0x52c>
                    tempcount = lfs_tag_id(tag) + 1;
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fc92 	bl	8001084 <lfs_tag_id>
 8002760:	4603      	mov	r3, r0
 8002762:	3301      	adds	r3, #1
 8002764:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002768:	e0ac      	b.n	80028c4 <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fc3f 	bl	8000ff0 <lfs_tag_type1>
 8002772:	4603      	mov	r3, r0
 8002774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002778:	d13a      	bne.n	80027f0 <lfs_dir_fetchmatch+0x458>
                tempcount += lfs_tag_splice(tag);
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fc74 	bl	800106a <lfs_tag_splice>
 8002782:	4603      	mov	r3, r0
 8002784:	b29a      	uxth	r2, r3
 8002786:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800278a:	4413      	add	r3, r2
 800278c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <lfs_dir_fetchmatch+0x41c>)
 8002794:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002796:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800279a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800279e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d109      	bne.n	80027b8 <lfs_dir_fetchmatch+0x420>
                    tempbesttag |= 0x80000000;
 80027a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027aa:	663b      	str	r3, [r7, #96]	; 0x60
 80027ac:	e08a      	b.n	80028c4 <lfs_dir_fetchmatch+0x52c>
 80027ae:	bf00      	nop
 80027b0:	080117b0 	.word	0x080117b0
 80027b4:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 80027b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027be:	f000 8081 	beq.w	80028c4 <lfs_dir_fetchmatch+0x52c>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fc5d 	bl	8001084 <lfs_tag_id>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461c      	mov	r4, r3
 80027ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fc57 	bl	8001084 <lfs_tag_id>
 80027d6:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80027d8:	429c      	cmp	r4, r3
 80027da:	d873      	bhi.n	80028c4 <lfs_dir_fetchmatch+0x52c>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fc43 	bl	800106a <lfs_tag_splice>
 80027e4:	4603      	mov	r3, r0
 80027e6:	029a      	lsls	r2, r3, #10
 80027e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ea:	4413      	add	r3, r2
 80027ec:	663b      	str	r3, [r7, #96]	; 0x60
 80027ee:	e069      	b.n	80028c4 <lfs_dir_fetchmatch+0x52c>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fbfc 	bl	8000ff0 <lfs_tag_type1>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80027fe:	d132      	bne.n	8002866 <lfs_dir_fetchmatch+0x4ce>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fc24 	bl	8001050 <lfs_tag_chunk>
 8002808:	4603      	mov	r3, r0
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	bf14      	ite	ne
 8002812:	2301      	movne	r3, #1
 8002814:	2300      	moveq	r3, #0
 8002816:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 800281a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002820:	69dc      	ldr	r4, [r3, #28]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002828:	3204      	adds	r2, #4
 800282a:	2108      	movs	r1, #8
 800282c:	9103      	str	r1, [sp, #12]
 800282e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002832:	9102      	str	r1, [sp, #8]
 8002834:	9201      	str	r2, [sp, #4]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4623      	mov	r3, r4
 800283a:	4602      	mov	r2, r0
 800283c:	2100      	movs	r1, #0
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7fd ff90 	bl	8000764 <lfs_bd_read>
 8002844:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <lfs_dir_fetchmatch+0x4c2>
                    if (err == LFS_ERR_CORRUPT) {
 800284c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800284e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002852:	f000 808a 	beq.w	800296a <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return err;
 8002856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002858:	e15f      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
                }
                lfs_pair_fromle32(temptail);
 800285a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fb71 	bl	8000f46 <lfs_pair_fromle32>
 8002864:	e02e      	b.n	80028c4 <lfs_dir_fetchmatch+0x52c>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fbe1 	bl	8001030 <lfs_tag_type3>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002876:	429a      	cmp	r2, r3
 8002878:	d124      	bne.n	80028c4 <lfs_dir_fetchmatch+0x52c>
                err = lfs_bd_read(lfs,
 800287a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002880:	69dc      	ldr	r4, [r3, #28]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002888:	3204      	adds	r2, #4
 800288a:	2108      	movs	r1, #8
 800288c:	9103      	str	r1, [sp, #12]
 800288e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002892:	9102      	str	r1, [sp, #8]
 8002894:	9201      	str	r2, [sp, #4]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4623      	mov	r3, r4
 800289a:	4602      	mov	r2, r0
 800289c:	2100      	movs	r1, #0
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7fd ff60 	bl	8000764 <lfs_bd_read>
 80028a4:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 80028a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <lfs_dir_fetchmatch+0x51c>
                    if (err == LFS_ERR_CORRUPT) {
 80028ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80028b2:	d05c      	beq.n	800296e <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 80028b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fcff 	bl	80012bc <lfs_fcrc_fromle32>
                hasfcrc = true;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80028c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ca:	405a      	eors	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f47f ae46 	bne.w	8002562 <lfs_dir_fetchmatch+0x1ca>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80028d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80028dc:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80028de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e0:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
 80028e4:	f107 0220 	add.w	r2, r7, #32
 80028e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028ec:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80028f0:	4798      	blx	r3
 80028f2:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	da05      	bge.n	8002906 <lfs_dir_fetchmatch+0x56e>
                    if (res == LFS_ERR_CORRUPT) {
 80028fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002900:	d037      	beq.n	8002972 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                    return res;
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002904:	e109      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
                }

                if (res == LFS_CMP_EQ) {
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <lfs_dir_fetchmatch+0x57a>
                    // found a match
                    tempbesttag = tag;
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	663b      	str	r3, [r7, #96]	; 0x60
 8002910:	e627      	b.n	8002562 <lfs_dir_fetchmatch+0x1ca>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002916:	405a      	eors	r2, r3
 8002918:	4b82      	ldr	r3, [pc, #520]	; (8002b24 <lfs_dir_fetchmatch+0x78c>)
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <lfs_dir_fetchmatch+0x590>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002924:	663b      	str	r3, [r7, #96]	; 0x60
 8002926:	e61c      	b.n	8002562 <lfs_dir_fetchmatch+0x1ca>
                } else if (res == LFS_CMP_GT &&
 8002928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292a:	2b02      	cmp	r3, #2
 800292c:	f47f ae19 	bne.w	8002562 <lfs_dir_fetchmatch+0x1ca>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fba6 	bl	8001084 <lfs_tag_id>
 8002938:	4603      	mov	r3, r0
 800293a:	461c      	mov	r4, r3
 800293c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fba0 	bl	8001084 <lfs_tag_id>
 8002944:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002946:	429c      	cmp	r4, r3
 8002948:	f63f ae0b 	bhi.w	8002562 <lfs_dir_fetchmatch+0x1ca>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002952:	663b      	str	r3, [r7, #96]	; 0x60
 8002954:	e605      	b.n	8002562 <lfs_dir_fetchmatch+0x1ca>
                    break;
 8002956:	bf00      	nop
 8002958:	e00c      	b.n	8002974 <lfs_dir_fetchmatch+0x5dc>
                break;
 800295a:	bf00      	nop
 800295c:	e00a      	b.n	8002974 <lfs_dir_fetchmatch+0x5dc>
                        break;
 800295e:	bf00      	nop
 8002960:	e008      	b.n	8002974 <lfs_dir_fetchmatch+0x5dc>
                    break;
 8002962:	bf00      	nop
 8002964:	e006      	b.n	8002974 <lfs_dir_fetchmatch+0x5dc>
                    break;
 8002966:	bf00      	nop
 8002968:	e004      	b.n	8002974 <lfs_dir_fetchmatch+0x5dc>
                        break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <lfs_dir_fetchmatch+0x5dc>
                        break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <lfs_dir_fetchmatch+0x5dc>
                        break;
 8002972:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d000      	beq.n	800297e <lfs_dir_fetchmatch+0x5e6>
 800297c:	e017      	b.n	80029ae <lfs_dir_fetchmatch+0x616>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fa59 	bl	8000e38 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002988:	3301      	adds	r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	bfb8      	it	lt
 8002992:	425b      	neglt	r3, r3
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	3378      	adds	r3, #120	; 0x78
 8002998:	f107 0208 	add.w	r2, r7, #8
 800299c:	4413      	add	r3, r2
 800299e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80029a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a8:	3301      	adds	r3, #1
 80029aa:	673b      	str	r3, [r7, #112]	; 0x70
 80029ac:	e0a1      	b.n	8002af2 <lfs_dir_fetchmatch+0x75a>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2200      	movs	r2, #0
 80029b2:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 80029b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03a      	beq.n	8002a32 <lfs_dir_fetchmatch+0x69a>
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029c4:	6992      	ldr	r2, [r2, #24]
 80029c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80029ca:	fb01 f202 	mul.w	r2, r1, r2
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d12e      	bne.n	8002a32 <lfs_dir_fetchmatch+0x69a>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 80029d4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d02a      	beq.n	8002a32 <lfs_dir_fetchmatch+0x69a>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029e0:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 80029e2:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 80029e8:	69dd      	ldr	r5, [r3, #28]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029f4:	f107 001c 	add.w	r0, r7, #28
 80029f8:	9003      	str	r0, [sp, #12]
 80029fa:	9102      	str	r1, [sp, #8]
 80029fc:	9201      	str	r2, [sp, #4]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	462b      	mov	r3, r5
 8002a02:	4622      	mov	r2, r4
 8002a04:	2100      	movs	r1, #0
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f7fe f841 	bl	8000a8e <lfs_bd_crc>
 8002a0c:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <lfs_dir_fetchmatch+0x688>
 8002a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a16:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002a1a:	d001      	beq.n	8002a20 <lfs_dir_fetchmatch+0x688>
                    return err;
 8002a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1e:	e07c      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	333c      	adds	r3, #60	; 0x3c
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fbde 	bl	80011fc <lfs_gstate_hasmovehere>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d028      	beq.n	8002a98 <lfs_dir_fetchmatch+0x700>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fb1a 	bl	8001084 <lfs_tag_id>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461c      	mov	r4, r3
 8002a54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fb14 	bl	8001084 <lfs_tag_id>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	429c      	cmp	r4, r3
 8002a60:	d104      	bne.n	8002a6c <lfs_dir_fetchmatch+0x6d4>
                besttag |= 0x80000000;
 8002a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a6a:	e015      	b.n	8002a98 <lfs_dir_fetchmatch+0x700>
            } else if (besttag != -1 &&
 8002a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a72:	d011      	beq.n	8002a98 <lfs_dir_fetchmatch+0x700>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fb03 	bl	8001084 <lfs_tag_id>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	461c      	mov	r4, r3
 8002a82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fafd 	bl	8001084 <lfs_tag_id>
 8002a8a:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002a8c:	429c      	cmp	r4, r3
 8002a8e:	d203      	bcs.n	8002a98 <lfs_dir_fetchmatch+0x700>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a92:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002a96:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <lfs_dir_fetchmatch+0x72a>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002aa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe faee 	bl	8001084 <lfs_tag_id>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	8a9b      	ldrh	r3, [r3, #20]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f7fd fd7a 	bl	80005ac <lfs_min>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ac0:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002ac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fa72 	bl	8000fae <lfs_tag_isvalid>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <lfs_dir_fetchmatch+0x73c>
            return besttag;
 8002ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad2:	e022      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002ad4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fad4 	bl	8001084 <lfs_tag_id>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	8a9b      	ldrh	r3, [r3, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d202      	bcs.n	8002aee <lfs_dir_fetchmatch+0x756>
            return LFS_ERR_NOENT;
 8002ae8:	f06f 0301 	mvn.w	r3, #1
 8002aec:	e015      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
        } else {
            return 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e013      	b.n	8002b1a <lfs_dir_fetchmatch+0x782>
    for (int i = 0; i < 2; i++) {
 8002af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	f77f ad00 	ble.w	80024fa <lfs_dir_fetchmatch+0x162>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4909      	ldr	r1, [pc, #36]	; (8002b28 <lfs_dir_fetchmatch+0x790>)
 8002b04:	9101      	str	r1, [sp, #4]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	f240 5235 	movw	r2, #1333	; 0x535
 8002b0e:	4907      	ldr	r1, [pc, #28]	; (8002b2c <lfs_dir_fetchmatch+0x794>)
 8002b10:	4807      	ldr	r0, [pc, #28]	; (8002b30 <lfs_dir_fetchmatch+0x798>)
 8002b12:	f00d ff83 	bl	8010a1c <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002b16:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3784      	adds	r7, #132	; 0x84
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b22:	bf00      	nop
 8002b24:	7ffffc00 	.word	0x7ffffc00
 8002b28:	0801176c 	.word	0x0801176c
 8002b2c:	08011678 	.word	0x08011678
 8002b30:	08011778 	.word	0x08011778

08002b34 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002b40:	2300      	movs	r3, #0
 8002b42:	9303      	str	r3, [sp, #12]
 8002b44:	2300      	movs	r3, #0
 8002b46:	9302      	str	r3, [sp, #8]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff fc1c 	bl	8002398 <lfs_dir_fetchmatch>
 8002b60:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <lfs_dir_getgstate+0x5c>)
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <lfs_dir_getgstate+0x60>)
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7fe fed5 	bl	8001934 <lfs_dir_get>
 8002b8a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	da05      	bge.n	8002b9e <lfs_dir_getgstate+0x32>
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f113 0f02 	cmn.w	r3, #2
 8002b98:	d001      	beq.n	8002b9e <lfs_dir_getgstate+0x32>
        return res;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	e00f      	b.n	8002bbe <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f113 0f02 	cmn.w	r3, #2
 8002ba4:	d00a      	beq.n	8002bbc <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002ba6:	f107 0310 	add.w	r3, r7, #16
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fb46 	bl	800123c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe fa95 	bl	80010e6 <lfs_gstate_xor>
    }

    return 0;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	7ff0000c 	.word	0x7ff0000c
 8002bcc:	7ff00000 	.word	0x7ff00000

08002bd0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b08f      	sub	sp, #60	; 0x3c
 8002bd4:	af04      	add	r7, sp, #16
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	689c      	ldr	r4, [r3, #8]
 8002bee:	68b8      	ldr	r0, [r7, #8]
 8002bf0:	f7fe fa58 	bl	80010a4 <lfs_tag_size>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7fd fcd7 	bl	80005ac <lfs_min>
 8002bfe:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002c00:	6a3c      	ldr	r4, [r7, #32]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	6852      	ldr	r2, [r2, #4]
 8002c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0c:	6849      	ldr	r1, [r1, #4]
 8002c0e:	69b8      	ldr	r0, [r7, #24]
 8002c10:	9003      	str	r0, [sp, #12]
 8002c12:	9102      	str	r1, [sp, #8]
 8002c14:	9201      	str	r2, [sp, #4]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	6a38      	ldr	r0, [r7, #32]
 8002c20:	f7fd fee4 	bl	80009ec <lfs_bd_cmp>
 8002c24:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <lfs_dir_find_match+0x60>
        return res;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	e014      	b.n	8002c5a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	689c      	ldr	r4, [r3, #8]
 8002c34:	68b8      	ldr	r0, [r7, #8]
 8002c36:	f7fe fa35 	bl	80010a4 <lfs_tag_size>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	429c      	cmp	r4, r3
 8002c3e:	d00b      	beq.n	8002c58 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	689c      	ldr	r4, [r3, #8]
 8002c44:	68b8      	ldr	r0, [r7, #8]
 8002c46:	f7fe fa2d 	bl	80010a4 <lfs_tag_size>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	429c      	cmp	r4, r3
 8002c4e:	d201      	bcs.n	8002c54 <lfs_dir_find_match+0x84>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e002      	b.n	8002c5a <lfs_dir_find_match+0x8a>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e000      	b.n	8002c5a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	372c      	adds	r7, #44	; 0x2c
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}
	...

08002c64 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b093      	sub	sp, #76	; 0x4c
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002c84:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002c86:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <lfs_dir_find+0x1dc>)
 8002c88:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1a      	ldr	r2, [r3, #32]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002c9a:	496a      	ldr	r1, [pc, #424]	; (8002e44 <lfs_dir_find+0x1e0>)
 8002c9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c9e:	f00d ff03 	bl	8010aa8 <strspn>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca6:	4413      	add	r3, r2
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002caa:	4966      	ldr	r1, [pc, #408]	; (8002e44 <lfs_dir_find+0x1e0>)
 8002cac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cae:	f00d feea 	bl	8010a86 <strcspn>
 8002cb2:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <lfs_dir_find+0x62>
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	4b62      	ldr	r3, [pc, #392]	; (8002e48 <lfs_dir_find+0x1e4>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d00a      	beq.n	8002cdc <lfs_dir_find+0x78>
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d10c      	bne.n	8002ce6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002ccc:	2202      	movs	r2, #2
 8002cce:	495f      	ldr	r1, [pc, #380]	; (8002e4c <lfs_dir_find+0x1e8>)
 8002cd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cd2:	f00d faad 	bl	8010230 <memcmp>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d104      	bne.n	8002ce6 <lfs_dir_find+0x82>
            name += namelen;
 8002cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	4413      	add	r3, r2
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8002ce4:	e7d9      	b.n	8002c9a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	4413      	add	r3, r2
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002cf2:	4954      	ldr	r1, [pc, #336]	; (8002e44 <lfs_dir_find+0x1e0>)
 8002cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cf6:	f00d fed7 	bl	8010aa8 <strspn>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	4413      	add	r3, r2
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8002d02:	4950      	ldr	r1, [pc, #320]	; (8002e44 <lfs_dir_find+0x1e0>)
 8002d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d06:	f00d febe 	bl	8010a86 <strcspn>
 8002d0a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01d      	beq.n	8002d4e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d112      	bne.n	8002d3e <lfs_dir_find+0xda>
 8002d18:	2202      	movs	r2, #2
 8002d1a:	494c      	ldr	r1, [pc, #304]	; (8002e4c <lfs_dir_find+0x1e8>)
 8002d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d1e:	f00d fa87 	bl	8010230 <memcmp>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <lfs_dir_find+0xda>
                depth -= 1;
 8002d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8002d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	4413      	add	r3, r2
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8002d3c:	e7ad      	b.n	8002c9a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	3301      	adds	r3, #1
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8002d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	4413      	add	r3, r2
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8002d4c:	e7d1      	b.n	8002cf2 <lfs_dir_find+0x8e>
                break;
 8002d4e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8002d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <lfs_dir_find+0xf8>
            return tag;
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	e06c      	b.n	8002e36 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d60:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f963 	bl	8001030 <lfs_tag_type3>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d002      	beq.n	8002d76 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8002d70:	f06f 0313 	mvn.w	r3, #19
 8002d74:	e05f      	b.n	8002e36 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe f983 	bl	8001084 <lfs_tag_id>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d01c      	beq.n	8002dc4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe f979 	bl	8001084 <lfs_tag_id>
 8002d92:	4603      	mov	r3, r0
 8002d94:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d9a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002da2:	9200      	str	r2, [sp, #0]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <lfs_dir_find+0x1ec>)
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7fe fdc3 	bl	8001934 <lfs_dir_get>
 8002dae:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da01      	bge.n	8002dba <lfs_dir_find+0x156>
                return res;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	e03d      	b.n	8002e36 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f8c1 	bl	8000f46 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8002dca:	212f      	movs	r1, #47	; 0x2f
 8002dcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dce:	f00d fe4d 	bl	8010a6c <strchr>
 8002dd2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <lfs_dir_find+0x178>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	e000      	b.n	8002dde <lfs_dir_find+0x17a>
 8002ddc:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	613a      	str	r2, [r7, #16]
 8002de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de4:	617a      	str	r2, [r7, #20]
 8002de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002dea:	f107 0210 	add.w	r2, r7, #16
 8002dee:	9203      	str	r2, [sp, #12]
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <lfs_dir_find+0x1f0>)
 8002df2:	9202      	str	r2, [sp, #8]
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8002dfe:	4622      	mov	r2, r4
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff fac8 	bl	8002398 <lfs_dir_fetchmatch>
 8002e08:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da01      	bge.n	8002e14 <lfs_dir_find+0x1b0>
                return tag;
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	e010      	b.n	8002e36 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8002e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	4413      	add	r3, r2
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8002e22:	e73a      	b.n	8002c9a <lfs_dir_find+0x36>
            if (!dir->split) {
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	7ddb      	ldrb	r3, [r3, #23]
 8002e28:	f083 0301 	eor.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0c8      	beq.n	8002dc4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8002e32:	f06f 0301 	mvn.w	r3, #1
    }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	373c      	adds	r7, #60	; 0x3c
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	002ffc00 	.word	0x002ffc00
 8002e44:	080117b8 	.word	0x080117b8
 8002e48:	080117bc 	.word	0x080117bc
 8002e4c:	080117c0 	.word	0x080117c0
 8002e50:	700ffc00 	.word	0x700ffc00
 8002e54:	08002bd1 	.word	0x08002bd1

08002e58 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b08b      	sub	sp, #44	; 0x2c
 8002e5c:	af04      	add	r7, sp, #16
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f103 0010 	add.w	r0, r3, #16
 8002e6c:	68fc      	ldr	r4, [r7, #12]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	6852      	ldr	r2, [r2, #4]
 8002e76:	6839      	ldr	r1, [r7, #0]
 8002e78:	9103      	str	r1, [sp, #12]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	9102      	str	r1, [sp, #8]
 8002e7e:	9201      	str	r2, [sp, #4]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	4622      	mov	r2, r4
 8002e86:	4601      	mov	r1, r0
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7fd fef7 	bl	8000c7c <lfs_bd_prog>
 8002e8e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <lfs_dir_commitprog+0x42>
        return err;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	e010      	b.n	8002ebc <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f004 f9cc 	bl	8007240 <lfs_crc>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	441a      	add	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	605a      	str	r2, [r3, #4]
    return 0;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd90      	pop	{r4, r7, pc}

08002ec4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b08f      	sub	sp, #60	; 0x3c
 8002ec8:	af04      	add	r7, sp, #16
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe f8f3 	bl	80010be <lfs_tag_dsize>
 8002ed8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	441a      	add	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d902      	bls.n	8002ef0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8002eea:	f06f 031b 	mvn.w	r3, #27
 8002eee:	e065      	b.n	8002fbc <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4053      	eors	r3, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fbe8 	bl	80006d2 <lfs_tobe32>
 8002f02:	4603      	mov	r3, r0
 8002f04:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8002f06:	f107 0214 	add.w	r2, r7, #20
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7ff ffa2 	bl	8002e58 <lfs_dir_commitprog>
 8002f14:	61f8      	str	r0, [r7, #28]
    if (err) {
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <lfs_dir_commitattr+0x5c>
        return err;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	e04d      	b.n	8002fbc <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db0c      	blt.n	8002f40 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	3b04      	subs	r3, #4
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff ff92 	bl	8002e58 <lfs_dir_commitprog>
 8002f34:	61f8      	str	r0, [r7, #28]
        if (err) {
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d039      	beq.n	8002fb0 <lfs_dir_commitattr+0xec>
            return err;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	e03d      	b.n	8002fbc <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	e02d      	b.n	8002fa6 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8002f4a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8002f52:	1f1c      	subs	r4, r3, #4
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5e:	440a      	add	r2, r1
 8002f60:	2101      	movs	r1, #1
 8002f62:	9103      	str	r1, [sp, #12]
 8002f64:	f107 0113 	add.w	r1, r7, #19
 8002f68:	9102      	str	r1, [sp, #8]
 8002f6a:	9201      	str	r2, [sp, #4]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	4623      	mov	r3, r4
 8002f70:	4602      	mov	r2, r0
 8002f72:	2100      	movs	r1, #0
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7fd fbf5 	bl	8000764 <lfs_bd_read>
 8002f7a:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <lfs_dir_commitattr+0xc2>
                return err;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	e01a      	b.n	8002fbc <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8002f86:	f107 0213 	add.w	r2, r7, #19
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff ff62 	bl	8002e58 <lfs_dir_commitprog>
 8002f94:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <lfs_dir_commitattr+0xdc>
                return err;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	e00d      	b.n	8002fbc <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	3b04      	subs	r3, #4
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d3cc      	bcc.n	8002f4a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	609a      	str	r2, [r3, #8]
    return 0;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	372c      	adds	r7, #44	; 0x2c
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}

08002fc4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b097      	sub	sp, #92	; 0x5c
 8002fc8:	af04      	add	r7, sp, #16
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8002fd2:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f7fd fae4 	bl	80005ac <lfs_min>
 8002fe4:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f7fd fb01 	bl	80005f6 <lfs_alignup>
 8002ff4:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8002ffe:	e0fe      	b.n	80031fe <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	3b04      	subs	r3, #4
 800300a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd facc 	bl	80005ac <lfs_min>
 8003014:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4413      	add	r3, r2
        lfs_off_t noff = (
 800301c:	3304      	adds	r3, #4
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8003020:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	429a      	cmp	r2, r3
 8003026:	d206      	bcs.n	8003036 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	3b14      	subs	r3, #20
 800302c:	4619      	mov	r1, r3
 800302e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003030:	f7fd fabc 	bl	80005ac <lfs_min>
 8003034:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = -1;
 8003036:	23ff      	movs	r3, #255	; 0xff
 8003038:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800303a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	429a      	cmp	r2, r3
 8003040:	d35f      	bcc.n	8003102 <lfs_dir_commitcrc+0x13e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003052:	429a      	cmp	r2, r3
 8003054:	d855      	bhi.n	8003102 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8003056:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800305c:	6998      	ldr	r0, [r3, #24]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2201      	movs	r2, #1
 8003064:	9203      	str	r2, [sp, #12]
 8003066:	f107 021b 	add.w	r2, r7, #27
 800306a:	9202      	str	r2, [sp, #8]
 800306c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800306e:	9201      	str	r2, [sp, #4]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	4603      	mov	r3, r0
 8003074:	460a      	mov	r2, r1
 8003076:	2100      	movs	r1, #0
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7fd fb73 	bl	8000764 <lfs_bd_read>
 800307e:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <lfs_dir_commitcrc+0xce>
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800308c:	d001      	beq.n	8003092 <lfs_dir_commitcrc+0xce>
                return err;
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	e101      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003096:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800309e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 80030a0:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 80030a6:	699c      	ldr	r4, [r3, #24]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	f107 0108 	add.w	r1, r7, #8
 80030b2:	3104      	adds	r1, #4
 80030b4:	9103      	str	r1, [sp, #12]
 80030b6:	9202      	str	r2, [sp, #8]
 80030b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ba:	9201      	str	r2, [sp, #4]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	4623      	mov	r3, r4
 80030c0:	4602      	mov	r2, r0
 80030c2:	2100      	movs	r1, #0
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fd fce2 	bl	8000a8e <lfs_bd_crc>
 80030ca:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <lfs_dir_commitcrc+0x11a>
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80030d8:	d001      	beq.n	80030de <lfs_dir_commitcrc+0x11a>
                    return err;
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	e0db      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 80030de:	f107 0308 	add.w	r3, r7, #8
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe f902 	bl	80012ec <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80030e8:	f107 0308 	add.w	r3, r7, #8
 80030ec:	4a6c      	ldr	r2, [pc, #432]	; (80032a0 <lfs_dir_commitcrc+0x2dc>)
 80030ee:	6839      	ldr	r1, [r7, #0]
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff fee7 	bl	8002ec4 <lfs_dir_commitattr>
 80030f6:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <lfs_dir_commitcrc+0x13e>
                    return err;
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	e0c9      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8003102:	7efb      	ldrb	r3, [r7, #27]
 8003104:	43db      	mvns	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	09db      	lsrs	r3, r3, #7
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	051a      	lsls	r2, r3, #20
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003118:	1acb      	subs	r3, r1, r3
 800311a:	3b04      	subs	r3, #4
 800311c:	4313      	orrs	r3, r2
 800311e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8003122:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	4053      	eors	r3, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd face 	bl	80006d2 <lfs_tobe32>
 8003136:	4603      	mov	r3, r0
 8003138:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f107 0110 	add.w	r1, r7, #16
 8003142:	2204      	movs	r2, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f004 f87b 	bl	8007240 <lfs_crc>
 800314a:	4602      	mov	r2, r0
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd faa4 	bl	80006a2 <lfs_tole32>
 800315a:	4603      	mov	r3, r0
 800315c:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f103 0010 	add.w	r0, r3, #16
 8003164:	687c      	ldr	r4, [r7, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	6852      	ldr	r2, [r2, #4]
 800316e:	2108      	movs	r1, #8
 8003170:	9103      	str	r1, [sp, #12]
 8003172:	f107 0110 	add.w	r1, r7, #16
 8003176:	9102      	str	r1, [sp, #8]
 8003178:	9201      	str	r2, [sp, #4]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	4622      	mov	r2, r4
 8003180:	4601      	mov	r1, r0
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fd7a 	bl	8000c7c <lfs_bd_prog>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <lfs_dir_commitcrc+0x1d0>
            return err;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	e080      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ac:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 80031ae:	7efb      	ldrb	r3, [r7, #27]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	405a      	eors	r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c6:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80031c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d208      	bcs.n	80031e2 <lfs_dir_commitcrc+0x21e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	4413      	add	r3, r2
 80031dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031de:	429a      	cmp	r2, r3
 80031e0:	d30d      	bcc.n	80031fe <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f103 0110 	add.w	r1, r3, #16
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	2300      	movs	r3, #0
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fd fd11 	bl	8000c14 <lfs_bd_sync>
 80031f2:	6238      	str	r0, [r7, #32]
            if (err) {
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <lfs_dir_commitcrc+0x23a>
                return err;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	e04b      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003204:	429a      	cmp	r2, r3
 8003206:	f63f aefb 	bhi.w	8003000 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003214:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321a:	1d1c      	adds	r4, r3, #4
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003224:	1a8a      	subs	r2, r1, r2
 8003226:	f107 011c 	add.w	r1, r7, #28
 800322a:	9103      	str	r1, [sp, #12]
 800322c:	9202      	str	r2, [sp, #8]
 800322e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003230:	9201      	str	r2, [sp, #4]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4623      	mov	r3, r4
 8003236:	4602      	mov	r2, r0
 8003238:	2100      	movs	r1, #0
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fc27 	bl	8000a8e <lfs_bd_crc>
 8003240:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <lfs_dir_commitcrc+0x288>
        return err;
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	e024      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003250:	429a      	cmp	r2, r3
 8003252:	d002      	beq.n	800325a <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8003254:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003258:	e01d      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f107 021c 	add.w	r2, r7, #28
 8003264:	9203      	str	r2, [sp, #12]
 8003266:	2204      	movs	r2, #4
 8003268:	9202      	str	r2, [sp, #8]
 800326a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800326c:	9201      	str	r2, [sp, #4]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2304      	movs	r3, #4
 8003272:	460a      	mov	r2, r1
 8003274:	2100      	movs	r1, #0
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fc09 	bl	8000a8e <lfs_bd_crc>
 800327c:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <lfs_dir_commitcrc+0x2c4>
        return err;
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	e006      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800328e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003292:	e000      	b.n	8003296 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	374c      	adds	r7, #76	; 0x4c
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	bf00      	nop
 80032a0:	5ffffc08 	.word	0x5ffffc08

080032a4 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af04      	add	r7, sp, #16
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e016      	b.n	80032e2 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	bfb8      	it	lt
 80032c0:	425b      	neglt	r3, r3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe f998 	bl	8001600 <lfs_alloc>
 80032d0:	60f8      	str	r0, [r7, #12]
        if (err) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <lfs_dir_alloc+0x38>
            return err;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	e058      	b.n	800338e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3301      	adds	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	dde5      	ble.n	80032b4 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80032f8:	2004      	movs	r0, #4
 80032fa:	9003      	str	r0, [sp, #12]
 80032fc:	9202      	str	r2, [sp, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	9201      	str	r2, [sp, #4]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	2304      	movs	r3, #4
 8003306:	460a      	mov	r2, r1
 8003308:	2100      	movs	r1, #0
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fa2a 	bl	8000764 <lfs_bd_read>
 8003310:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f9b8 	bl	800068c <lfs_fromle32>
 800331c:	4602      	mov	r2, r0
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <lfs_dir_alloc+0x90>
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800332e:	d001      	beq.n	8003334 <lfs_dir_alloc+0x90>
        return err;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	e02c      	b.n	800338e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	dd0e      	ble.n	800335c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	3301      	adds	r3, #1
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7fd f950 	bl	80005f6 <lfs_alignup>
 8003356:	4602      	mov	r2, r0
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2204      	movs	r2, #4
 8003360:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003368:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003376:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800337e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2200      	movs	r2, #0
 800338a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003396:	b580      	push	{r7, lr}
 8003398:	b092      	sub	sp, #72	; 0x48
 800339a:	af04      	add	r7, sp, #16
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	4619      	mov	r1, r3
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff ff7a 	bl	80032a4 <lfs_dir_alloc>
 80033b0:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <lfs_dir_split+0x26>
        return err;
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	e03c      	b.n	8003436 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	7ddb      	ldrb	r3, [r3, #23]
 80033c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80033d0:	f107 0110 	add.w	r1, r7, #16
 80033d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033d8:	9302      	str	r3, [sp, #8]
 80033da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f879 	bl	80034e0 <lfs_dir_compact>
 80033ee:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	da01      	bge.n	80033fa <lfs_dir_split+0x64>
        return res;
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	e01d      	b.n	8003436 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2201      	movs	r2, #1
 800340a:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3320      	adds	r3, #32
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f7fd fd3f 	bl	8000e98 <lfs_pair_cmp>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <lfs_dir_split+0x9e>
 8003420:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3738      	adds	r7, #56	; 0x38
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800344e:	68b8      	ldr	r0, [r7, #8]
 8003450:	f7fd fe35 	bl	80010be <lfs_tag_dsize>
 8003454:	4602      	mov	r2, r0
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	441a      	add	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	601a      	str	r2, [r3, #0]
    return 0;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	f7ff fd1d 	bl	8002ec4 <lfs_dir_commitattr>
 800348a:	4603      	mov	r3, r0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	dd11      	ble.n	80034cc <lfs_dir_needsrelocation+0x38>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	3301      	adds	r3, #1
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034b4:	3201      	adds	r2, #1
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80034be:	fb01 f202 	mul.w	r2, r1, r2
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <lfs_dir_needsrelocation+0x38>
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <lfs_dir_needsrelocation+0x3a>
 80034cc:	2300      	movs	r3, #0
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	b2db      	uxtb	r3, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b0a4      	sub	sp, #144	; 0x90
 80034e4:	af0a      	add	r7, sp, #40	; 0x28
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff ffcc 	bl	8003494 <lfs_dir_needsrelocation>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800350c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00e      	beq.n	8003532 <lfs_dir_compact+0x52>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	657a      	str	r2, [r7, #84]	; 0x54
 800351a:	2201      	movs	r2, #1
 800351c:	65ba      	str	r2, [r7, #88]	; 0x58
 800351e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd fcb7 	bl	8000e98 <lfs_pair_cmp>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f040 8155 	bne.w	80037dc <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003538:	2300      	movs	r3, #0
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
 800353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
 8003542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
 8003548:	2300      	movs	r3, #0
 800354a:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <lfs_dir_compact+0x80>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355c:	3b08      	subs	r3, #8
 800355e:	e003      	b.n	8003568 <lfs_dir_compact+0x88>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4619      	mov	r1, r3
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7fd fc2f 	bl	8000dd4 <lfs_bd_erase>
 8003576:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d006      	beq.n	800358c <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800357e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003580:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003584:	f000 812c 	beq.w	80037e0 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358a:	e187      	b.n	800389c <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd f886 	bl	80006a2 <lfs_tole32>
 8003596:	4602      	mov	r2, r0
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80035a2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80035a6:	2304      	movs	r3, #4
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff fc55 	bl	8002e58 <lfs_dir_commitprog>
 80035ae:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd f869 	bl	800068c <lfs_fromle32>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]
            if (err) {
 80035c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80035c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80035cc:	f000 810a 	beq.w	80037e4 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80035d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d2:	e163      	b.n	800389c <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80035d4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80035d8:	425b      	negs	r3, r3
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	637a      	str	r2, [r7, #52]	; 0x34
 80035e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035e6:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80035e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035ec:	9208      	str	r2, [sp, #32]
 80035ee:	4aad      	ldr	r2, [pc, #692]	; (80038a4 <lfs_dir_compact+0x3c4>)
 80035f0:	9207      	str	r2, [sp, #28]
 80035f2:	9306      	str	r3, [sp, #24]
 80035f4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80035f8:	9305      	str	r3, [sp, #20]
 80035fa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80035fe:	9304      	str	r3, [sp, #16]
 8003600:	2300      	movs	r3, #0
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	4ba8      	ldr	r3, [pc, #672]	; (80038a8 <lfs_dir_compact+0x3c8>)
 8003606:	9302      	str	r3, [sp, #8]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003614:	2200      	movs	r2, #0
 8003616:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7fe fadd 	bl	8001bd8 <lfs_dir_traverse>
 800361e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003628:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800362c:	f000 80dc 	beq.w	80037e8 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003632:	e133      	b.n	800389c <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3318      	adds	r3, #24
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd fc12 	bl	8000e62 <lfs_pair_isnull>
 800363e:	4603      	mov	r3, r0
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d022      	beq.n	8003690 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	3318      	adds	r3, #24
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fc93 	bl	8000f7a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	7ddb      	ldrb	r3, [r3, #23]
 8003658:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800365c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800365e:	4a93      	ldr	r2, [pc, #588]	; (80038ac <lfs_dir_compact+0x3cc>)
 8003660:	431a      	orrs	r2, r3
                        dir->tail);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003666:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff fc2a 	bl	8002ec4 <lfs_dir_commitattr>
 8003670:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3318      	adds	r3, #24
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fc65 	bl	8000f46 <lfs_pair_fromle32>
                if (err) {
 800367c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003684:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003688:	f000 80b0 	beq.w	80037ec <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800368c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368e:	e105      	b.n	800389c <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800369c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036a0:	f083 0301 	eor.w	r3, r3, #1
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d011      	beq.n	80036ce <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80036b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fd15 	bl	80010e6 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80036c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd fd0c 	bl	80010e6 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80036d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd fd03 	bl	80010e6 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036e6:	f023 0303 	bic.w	r3, r3, #3
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80036ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f0:	461a      	mov	r2, r3
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff fa39 	bl	8002b6c <lfs_dir_getgstate>
 80036fa:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80036fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <lfs_dir_compact+0x226>
                return err;
 8003702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003704:	e0ca      	b.n	800389c <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd fd10 	bl	8001130 <lfs_gstate_iszero>
 8003710:	4603      	mov	r3, r0
 8003712:	f083 0301 	eor.w	r3, r3, #1
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d016      	beq.n	800374a <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800371c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd fdab 	bl	800127c <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800372a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800372e:	4a60      	ldr	r2, [pc, #384]	; (80038b0 <lfs_dir_compact+0x3d0>)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fbc7 	bl	8002ec4 <lfs_dir_commitattr>
 8003736:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800373e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003740:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003744:	d054      	beq.n	80037f0 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003748:	e0a8      	b.n	800389c <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800374a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800374e:	4619      	mov	r1, r3
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff fc37 	bl	8002fc4 <lfs_dir_commitcrc>
 8003756:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800375e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003760:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003764:	d046      	beq.n	80037f4 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003768:	e098      	b.n	800389c <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800376a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003770:	6992      	ldr	r2, [r2, #24]
 8003772:	fbb3 f1f2 	udiv	r1, r3, r2
 8003776:	fb01 f202 	mul.w	r2, r1, r2
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d006      	beq.n	800378e <lfs_dir_compact+0x2ae>
 8003780:	4b4c      	ldr	r3, [pc, #304]	; (80038b4 <lfs_dir_compact+0x3d4>)
 8003782:	4a4d      	ldr	r2, [pc, #308]	; (80038b8 <lfs_dir_compact+0x3d8>)
 8003784:	f240 71e2 	movw	r1, #2018	; 0x7e2
 8003788:	484c      	ldr	r0, [pc, #304]	; (80038bc <lfs_dir_compact+0x3dc>)
 800378a:	f00c fce7 	bl	801015c <__assert_func>
            lfs_pair_swap(dir->pair);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fd fb51 	bl	8000e38 <lfs_pair_swap>
            dir->count = end - begin;
 8003796:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800379a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80037a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80037ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3348      	adds	r3, #72	; 0x48
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80037be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80037c2:	f083 0301 	eor.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d064      	beq.n	8003896 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	333c      	adds	r3, #60	; 0x3c
 80037d2:	3230      	adds	r2, #48	; 0x30
 80037d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80037d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80037da:	e05c      	b.n	8003896 <lfs_dir_compact+0x3b6>
        goto relocate;
 80037dc:	bf00      	nop
 80037de:	e00a      	b.n	80037f6 <lfs_dir_compact+0x316>
                    goto relocate;
 80037e0:	bf00      	nop
 80037e2:	e008      	b.n	80037f6 <lfs_dir_compact+0x316>
                    goto relocate;
 80037e4:	bf00      	nop
 80037e6:	e006      	b.n	80037f6 <lfs_dir_compact+0x316>
                    goto relocate;
 80037e8:	bf00      	nop
 80037ea:	e004      	b.n	80037f6 <lfs_dir_compact+0x316>
                        goto relocate;
 80037ec:	bf00      	nop
 80037ee:	e002      	b.n	80037f6 <lfs_dir_compact+0x316>
                        goto relocate;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <lfs_dir_compact+0x316>
                    goto relocate;
 80037f4:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3310      	adds	r3, #16
 8003800:	4619      	mov	r1, r3
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f7fc ff88 	bl	8000718 <lfs_cache_drop>
        if (!tired) {
 8003808:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800380c:	f083 0301 	eor.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <lfs_dir_compact+0x3e0>)
 800381c:	9200      	str	r2, [sp, #0]
 800381e:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8003822:	4926      	ldr	r1, [pc, #152]	; (80038bc <lfs_dir_compact+0x3dc>)
 8003824:	4827      	ldr	r0, [pc, #156]	; (80038c4 <lfs_dir_compact+0x3e4>)
 8003826:	f00d f8f9 	bl	8010a1c <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2200      	movs	r2, #0
 800382e:	617a      	str	r2, [r7, #20]
 8003830:	2201      	movs	r2, #1
 8003832:	61ba      	str	r2, [r7, #24]
 8003834:	f107 0214 	add.w	r2, r7, #20
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fb2c 	bl	8000e98 <lfs_pair_cmp>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10c      	bne.n	8003860 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <lfs_dir_compact+0x3e0>)
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	f240 72f9 	movw	r2, #2041	; 0x7f9
 8003852:	491a      	ldr	r1, [pc, #104]	; (80038bc <lfs_dir_compact+0x3dc>)
 8003854:	481c      	ldr	r0, [pc, #112]	; (80038c8 <lfs_dir_compact+0x3e8>)
 8003856:	f00d f8e1 	bl	8010a1c <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800385a:	f06f 031b 	mvn.w	r3, #27
 800385e:	e01d      	b.n	800389c <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7fd feca 	bl	8001600 <lfs_alloc>
 800386c:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800386e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <lfs_dir_compact+0x3ae>
 8003874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003876:	f113 0f1c 	cmn.w	r3, #28
 800387a:	d106      	bne.n	800388a <lfs_dir_compact+0x3aa>
 800387c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <lfs_dir_compact+0x3ae>
            return err;
 800388a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800388c:	e006      	b.n	800389c <lfs_dir_compact+0x3bc>
        }

        tired = false;
 800388e:	2300      	movs	r3, #0
 8003890:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003894:	e64d      	b.n	8003532 <lfs_dir_compact+0x52>
        break;
 8003896:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003898:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800389c:	4618      	mov	r0, r3
 800389e:	3768      	adds	r7, #104	; 0x68
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	0800346b 	.word	0x0800346b
 80038a8:	400ffc00 	.word	0x400ffc00
 80038ac:	000ffc08 	.word	0x000ffc08
 80038b0:	7ffffc0c 	.word	0x7ffffc0c
 80038b4:	080117c4 	.word	0x080117c4
 80038b8:	08012270 	.word	0x08012270
 80038bc:	08011678 	.word	0x08011678
 80038c0:	0801176c 	.word	0x0801176c
 80038c4:	080117ec 	.word	0x080117ec
 80038c8:	08011810 	.word	0x08011810

080038cc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b097      	sub	sp, #92	; 0x5c
 80038d0:	af0a      	add	r7, sp, #40	; 0x28
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80038da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80038e0:	e058      	b.n	8003994 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ec:	b292      	uxth	r2, r2
 80038ee:	4252      	negs	r2, r2
 80038f0:	b292      	uxth	r2, r2
 80038f2:	b212      	sxth	r2, r2
 80038f4:	f107 0118 	add.w	r1, r7, #24
 80038f8:	9108      	str	r1, [sp, #32]
 80038fa:	4979      	ldr	r1, [pc, #484]	; (8003ae0 <lfs_dir_splittingcompact+0x214>)
 80038fc:	9107      	str	r1, [sp, #28]
 80038fe:	9206      	str	r2, [sp, #24]
 8003900:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003904:	9205      	str	r2, [sp, #20]
 8003906:	9304      	str	r3, [sp, #16]
 8003908:	2300      	movs	r3, #0
 800390a:	9303      	str	r3, [sp, #12]
 800390c:	4b75      	ldr	r3, [pc, #468]	; (8003ae4 <lfs_dir_splittingcompact+0x218>)
 800390e:	9302      	str	r3, [sp, #8]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800391c:	2200      	movs	r2, #0
 800391e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7fe f959 	bl	8001bd8 <lfs_dir_traverse>
 8003926:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <lfs_dir_splittingcompact+0x66>
                return err;
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	e0d1      	b.n	8003ad6 <lfs_dir_splittingcompact+0x20a>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8003932:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2bfe      	cmp	r3, #254	; 0xfe
 800393c:	d822      	bhi.n	8003984 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003942:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003944:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	e003      	b.n	8003964 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003960:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003962:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 8003968:	6992      	ldr	r2, [r2, #24]
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fe42 	bl	80005f6 <lfs_alignup>
 8003972:	4603      	mov	r3, r0
 8003974:	4619      	mov	r1, r3
 8003976:	4620      	mov	r0, r4
 8003978:	f7fc fe18 	bl	80005ac <lfs_min>
 800397c:	4602      	mov	r2, r0
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	429a      	cmp	r2, r3
 8003982:	d20e      	bcs.n	80039a2 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003984:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	085b      	lsrs	r3, r3, #1
 800398e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003990:	4413      	add	r3, r2
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003994:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	d8a0      	bhi.n	80038e2 <lfs_dir_splittingcompact+0x16>
 80039a0:	e000      	b.n	80039a4 <lfs_dir_splittingcompact+0xd8>
                break;
 80039a2:	bf00      	nop
        }

        if (split == begin) {
 80039a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80039a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d02d      	beq.n	8003a0a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80039b6:	9202      	str	r2, [sp, #8]
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff fce6 	bl	8003396 <lfs_dir_split>
 80039ca:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <lfs_dir_splittingcompact+0x112>
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	f113 0f1c 	cmn.w	r3, #28
 80039d8:	d001      	beq.n	80039de <lfs_dir_splittingcompact+0x112>
            return err;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	e07b      	b.n	8003ad6 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	493e      	ldr	r1, [pc, #248]	; (8003ae8 <lfs_dir_splittingcompact+0x21c>)
 80039ee:	9101      	str	r1, [sp, #4]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4613      	mov	r3, r2
 80039f4:	f640 024c 	movw	r2, #2124	; 0x84c
 80039f8:	493c      	ldr	r1, [pc, #240]	; (8003aec <lfs_dir_splittingcompact+0x220>)
 80039fa:	483d      	ldr	r0, [pc, #244]	; (8003af0 <lfs_dir_splittingcompact+0x224>)
 80039fc:	f00d f80e 	bl	8010a1c <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003a00:	e004      	b.n	8003a0c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003a08:	e767      	b.n	80038da <lfs_dir_splittingcompact+0xe>
            break;
 8003a0a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f7ff fd40 	bl	8003494 <lfs_dir_needsrelocation>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d04e      	beq.n	8003ab8 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	613a      	str	r2, [r7, #16]
 8003a20:	2201      	movs	r2, #1
 8003a22:	617a      	str	r2, [r7, #20]
 8003a24:	f107 0210 	add.w	r2, r7, #16
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd fa34 	bl	8000e98 <lfs_pair_cmp>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d140      	bne.n	8003ab8 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f003 fad2 	bl	8006fe0 <lfs_fs_rawsize>
 8003a3c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da01      	bge.n	8003a48 <lfs_dir_splittingcompact+0x17c>
            return size;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	e046      	b.n	8003ad6 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	085a      	lsrs	r2, r3, #1
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d930      	bls.n	8003ab8 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	4a23      	ldr	r2, [pc, #140]	; (8003ae8 <lfs_dir_splittingcompact+0x21c>)
 8003a5c:	9200      	str	r2, [sp, #0]
 8003a5e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8003a62:	4922      	ldr	r1, [pc, #136]	; (8003aec <lfs_dir_splittingcompact+0x220>)
 8003a64:	4823      	ldr	r0, [pc, #140]	; (8003af4 <lfs_dir_splittingcompact+0x228>)
 8003a66:	f00c ffd9 	bl	8010a1c <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003a6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a6e:	9302      	str	r3, [sp, #8]
 8003a70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	68b9      	ldr	r1, [r7, #8]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7ff fc88 	bl	8003396 <lfs_dir_split>
 8003a86:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <lfs_dir_splittingcompact+0x1ce>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f113 0f1c 	cmn.w	r3, #28
 8003a94:	d001      	beq.n	8003a9a <lfs_dir_splittingcompact+0x1ce>
                return err;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	e01d      	b.n	8003ad6 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <lfs_dir_splittingcompact+0x21c>)
 8003aa2:	f640 026a 	movw	r2, #2154	; 0x86a
 8003aa6:	4911      	ldr	r1, [pc, #68]	; (8003aec <lfs_dir_splittingcompact+0x220>)
 8003aa8:	4813      	ldr	r0, [pc, #76]	; (8003af8 <lfs_dir_splittingcompact+0x22c>)
 8003aaa:	f00c ffb7 	bl	8010a1c <iprintf>
 8003aae:	e003      	b.n	8003ab8 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8003ab0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ab4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003ab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003abc:	9302      	str	r3, [sp, #8]
 8003abe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f7ff fd06 	bl	80034e0 <lfs_dir_compact>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3734      	adds	r7, #52	; 0x34
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd90      	pop	{r4, r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	0800343f 	.word	0x0800343f
 8003ae4:	400ffc00 	.word	0x400ffc00
 8003ae8:	0801176c 	.word	0x0801176c
 8003aec:	08011678 	.word	0x08011678
 8003af0:	08011848 	.word	0x08011848
 8003af4:	08011878 	.word	0x08011878
 8003af8:	080118a8 	.word	0x080118a8

08003afc <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003afc:	b5b0      	push	{r4, r5, r7, lr}
 8003afe:	b0a6      	sub	sp, #152	; 0x98
 8003b00:	af0a      	add	r7, sp, #40	; 0x28
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003b14:	2300      	movs	r3, #0
 8003b16:	667b      	str	r3, [r7, #100]	; 0x64
 8003b18:	e06d      	b.n	8003bf6 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd fa83 	bl	8001030 <lfs_tag_type3>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f240 4301 	movw	r3, #1025	; 0x401
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d106      	bne.n	8003b44 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	8a9b      	ldrh	r3, [r3, #20]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	829a      	strh	r2, [r3, #20]
 8003b42:	e055      	b.n	8003bf0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fa6e 	bl	8001030 <lfs_tag_type3>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d114      	bne.n	8003b8a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	8a9b      	ldrh	r3, [r3, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <lfs_dir_relocatingcommit+0x7a>
 8003b68:	4ba4      	ldr	r3, [pc, #656]	; (8003dfc <lfs_dir_relocatingcommit+0x300>)
 8003b6a:	4aa5      	ldr	r2, [pc, #660]	; (8003e00 <lfs_dir_relocatingcommit+0x304>)
 8003b6c:	f640 0182 	movw	r1, #2178	; 0x882
 8003b70:	48a4      	ldr	r0, [pc, #656]	; (8003e04 <lfs_dir_relocatingcommit+0x308>)
 8003b72:	f00c faf3 	bl	801015c <__assert_func>
            dir->count -= 1;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	8a9b      	ldrh	r3, [r3, #20]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003b88:	e032      	b.n	8003bf0 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fd fa2b 	bl	8000ff0 <lfs_tag_type1>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ba0:	d126      	bne.n	8003bf0 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4413      	add	r3, r2
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	4413      	add	r3, r2
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	4413      	add	r3, r2
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fa3f 	bl	8001050 <lfs_tag_chunk>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf14      	ite	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	2300      	moveq	r3, #0
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3318      	adds	r3, #24
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd f9ab 	bl	8000f46 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8003bf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	db8c      	blt.n	8003b1a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003c00:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02b      	beq.n	8003c60 <lfs_dir_relocatingcommit+0x164>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	8a9b      	ldrh	r3, [r3, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d127      	bne.n	8003c60 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <lfs_dir_relocatingcommit+0x12a>
 8003c18:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <lfs_dir_relocatingcommit+0x30c>)
 8003c1a:	4a79      	ldr	r2, [pc, #484]	; (8003e00 <lfs_dir_relocatingcommit+0x304>)
 8003c1c:	f640 018f 	movw	r1, #2191	; 0x88f
 8003c20:	4878      	ldr	r0, [pc, #480]	; (8003e04 <lfs_dir_relocatingcommit+0x308>)
 8003c22:	f00c fa9b 	bl	801015c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f002 fd30 	bl	8006694 <lfs_fs_pred>
 8003c34:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <lfs_dir_relocatingcommit+0x14c>
 8003c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c3e:	f113 0f02 	cmn.w	r3, #2
 8003c42:	d001      	beq.n	8003c48 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8003c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c46:	e203      	b.n	8004050 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8003c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c4a:	f113 0f02 	cmn.w	r3, #2
 8003c4e:	d007      	beq.n	8003c60 <lfs_dir_relocatingcommit+0x164>
 8003c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c54:	7ddb      	ldrb	r3, [r3, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8003c5e:	e121      	b.n	8003ea4 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	7d9b      	ldrb	r3, [r3, #22]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80fb 	beq.w	8003e60 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <lfs_dir_relocatingcommit+0x1a0>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c98:	3b08      	subs	r3, #8
 8003c9a:	e003      	b.n	8003ca4 <lfs_dir_relocatingcommit+0x1a8>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd f965 	bl	8000f7a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8003cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cc6:	9308      	str	r3, [sp, #32]
 8003cc8:	4b50      	ldr	r3, [pc, #320]	; (8003e0c <lfs_dir_relocatingcommit+0x310>)
 8003cca:	9307      	str	r3, [sp, #28]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9306      	str	r3, [sp, #24]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9305      	str	r3, [sp, #20]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9304      	str	r3, [sp, #16]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9303      	str	r3, [sp, #12]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9302      	str	r3, [sp, #8]
 8003ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	460b      	mov	r3, r1
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7fd ff72 	bl	8001bd8 <lfs_dir_traverse>
 8003cf4:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd f923 	bl	8000f46 <lfs_pair_fromle32>
        if (err) {
 8003d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d08:	f113 0f1c 	cmn.w	r3, #28
 8003d0c:	f000 80aa 	beq.w	8003e64 <lfs_dir_relocatingcommit+0x368>
 8003d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d12:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003d16:	f000 80a5 	beq.w	8003e64 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8003d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1c:	e198      	b.n	8004050 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8003d1e:	f107 031c 	add.w	r3, r7, #28
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd f9d5 	bl	80010e6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003d42:	f107 031c 	add.w	r3, r7, #28
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd f9cc 	bl	80010e6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003d54:	f107 031c 	add.w	r3, r7, #28
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd f9c3 	bl	80010e6 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8003d6c:	f107 031c 	add.w	r3, r7, #28
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fd f9dd 	bl	8001130 <lfs_gstate_iszero>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f083 0301 	eor.w	r3, r3, #1
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d027      	beq.n	8003dd2 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	461a      	mov	r2, r3
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7fe feee 	bl	8002b6c <lfs_dir_getgstate>
 8003d90:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8003d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8003d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9a:	e159      	b.n	8004050 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8003d9c:	f107 031c 	add.w	r3, r7, #28
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fd fa6b 	bl	800127c <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003dae:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <lfs_dir_relocatingcommit+0x314>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff f887 	bl	8002ec4 <lfs_dir_commitattr>
 8003db6:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8003db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc0:	f113 0f1c 	cmn.w	r3, #28
 8003dc4:	d050      	beq.n	8003e68 <lfs_dir_relocatingcommit+0x36c>
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003dcc:	d04c      	beq.n	8003e68 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8003dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd0:	e13e      	b.n	8004050 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8003dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff f8f3 	bl	8002fc4 <lfs_dir_commitcrc>
 8003dde:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8003de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de8:	f113 0f1c 	cmn.w	r3, #28
 8003dec:	d03e      	beq.n	8003e6c <lfs_dir_relocatingcommit+0x370>
 8003dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003df4:	d03a      	beq.n	8003e6c <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8003df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df8:	e12a      	b.n	8004050 <lfs_dir_relocatingcommit+0x554>
 8003dfa:	bf00      	nop
 8003dfc:	080118d4 	.word	0x080118d4
 8003e00:	08012280 	.word	0x08012280
 8003e04:	08011678 	.word	0x08011678
 8003e08:	080118e4 	.word	0x080118e4
 8003e0c:	0800346b 	.word	0x0800346b
 8003e10:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e1a:	6992      	ldr	r2, [r2, #24]
 8003e1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e20:	fb01 f202 	mul.w	r2, r1, r2
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <lfs_dir_relocatingcommit+0x33c>
 8003e2a:	4b8b      	ldr	r3, [pc, #556]	; (8004058 <lfs_dir_relocatingcommit+0x55c>)
 8003e2c:	4a8b      	ldr	r2, [pc, #556]	; (800405c <lfs_dir_relocatingcommit+0x560>)
 8003e2e:	f640 01d9 	movw	r1, #2265	; 0x8d9
 8003e32:	488b      	ldr	r0, [pc, #556]	; (8004060 <lfs_dir_relocatingcommit+0x564>)
 8003e34:	f00c f992 	bl	801015c <__assert_func>
        dir->off = commit.off;
 8003e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8003e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	333c      	adds	r3, #60	; 0x3c
 8003e4a:	3230      	adds	r2, #48	; 0x30
 8003e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3348      	adds	r3, #72	; 0x48
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	e021      	b.n	8003ea4 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8003e60:	bf00      	nop
 8003e62:	e004      	b.n	8003e6e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003e64:	bf00      	nop
 8003e66:	e002      	b.n	8003e6e <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8003e68:	bf00      	nop
 8003e6a:	e000      	b.n	8003e6e <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003e6c:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3310      	adds	r3, #16
 8003e72:	4619      	mov	r1, r3
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7fc fc4f 	bl	8000718 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	8a9b      	ldrh	r3, [r3, #20]
 8003e7e:	9302      	str	r3, [sp, #8]
 8003e80:	2300      	movs	r3, #0
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fd1b 	bl	80038cc <lfs_dir_splittingcompact>
 8003e96:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da01      	bge.n	8003ea2 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8003e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea0:	e0d6      	b.n	8004050 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8003ea2:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb6:	e0c6      	b.n	8004046 <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8003eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eba:	3308      	adds	r3, #8
 8003ebc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fc ffe8 	bl	8000e98 <lfs_pair_cmp>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 80b8 	bne.w	8004040 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8003ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	f103 0408 	add.w	r4, r3, #8
 8003ed8:	4615      	mov	r5, r2
 8003eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ede:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ee2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8003ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee8:	3308      	adds	r3, #8
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	f000 809d 	beq.w	800402c <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef6:	e07b      	b.n	8003ff0 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	4413      	add	r3, r2
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd f894 	bl	8001030 <lfs_tag_type3>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d115      	bne.n	8003f40 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8003f14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f16:	889c      	ldrh	r4, [r3, #4]
 8003f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd f8ae 	bl	8001084 <lfs_tag_id>
 8003f28:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003f2a:	429c      	cmp	r4, r3
 8003f2c:	d108      	bne.n	8003f40 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8003f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f34:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8003f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	e054      	b.n	8003fea <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	4413      	add	r3, r2
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd f870 	bl	8001030 <lfs_tag_type3>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d11c      	bne.n	8003f96 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8003f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5e:	889c      	ldrh	r4, [r3, #4]
 8003f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd f88a 	bl	8001084 <lfs_tag_id>
 8003f70:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003f72:	429c      	cmp	r4, r3
 8003f74:	d90f      	bls.n	8003f96 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8003f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f78:	889b      	ldrh	r3, [r3, #4]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f80:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f84:	799b      	ldrb	r3, [r3, #6]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d12f      	bne.n	8003fea <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8003f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	1e5a      	subs	r2, r3, #1
 8003f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8003f94:	e029      	b.n	8003fea <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fd f845 	bl	8001030 <lfs_tag_type3>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f240 4301 	movw	r3, #1025	; 0x401
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d11b      	bne.n	8003fea <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8003fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb4:	889c      	ldrh	r4, [r3, #4]
 8003fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd f85f 	bl	8001084 <lfs_tag_id>
 8003fc6:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	d30e      	bcc.n	8003fea <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8003fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fce:	889b      	ldrh	r3, [r3, #4]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd6:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fda:	799b      	ldrb	r3, [r3, #6]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d104      	bne.n	8003fea <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8003fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe8:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8003fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fec:	3301      	adds	r3, #1
 8003fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	f6ff af7e 	blt.w	8003ef8 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8003ffc:	e016      	b.n	800402c <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8003ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004000:	889a      	ldrh	r2, [r3, #4]
 8004002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004004:	8b9b      	ldrh	r3, [r3, #28]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	b29a      	uxth	r2, r3
 800400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800400e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004010:	f103 0108 	add.w	r1, r3, #8
 8004014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004016:	3320      	adds	r3, #32
 8004018:	461a      	mov	r2, r3
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7fe fd8a 	bl	8002b34 <lfs_dir_fetch>
 8004020:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8004022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <lfs_dir_relocatingcommit+0x530>
                    return err;
 8004028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402a:	e011      	b.n	8004050 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 800402c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402e:	889a      	ldrh	r2, [r3, #4]
 8004030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004032:	8b9b      	ldrh	r3, [r3, #28]
 8004034:	429a      	cmp	r2, r3
 8004036:	d303      	bcc.n	8004040 <lfs_dir_relocatingcommit+0x544>
 8004038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800403a:	7fdb      	ldrb	r3, [r3, #31]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1de      	bne.n	8003ffe <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	663b      	str	r3, [r7, #96]	; 0x60
 8004046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004048:	2b00      	cmp	r3, #0
 800404a:	f47f af35 	bne.w	8003eb8 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004050:	4618      	mov	r0, r3
 8004052:	3770      	adds	r7, #112	; 0x70
 8004054:	46bd      	mov	sp, r7
 8004056:	bdb0      	pop	{r4, r5, r7, pc}
 8004058:	080117c4 	.word	0x080117c4
 800405c:	08012280 	.word	0x08012280
 8004060:	08011678 	.word	0x08011678

08004064 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004064:	b5b0      	push	{r4, r5, r7, lr}
 8004066:	b0bc      	sub	sp, #240	; 0xf0
 8004068:	af04      	add	r7, sp, #16
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800407a:	e045      	b.n	8004108 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800407c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004080:	3308      	adds	r3, #8
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	429a      	cmp	r2, r3
 8004086:	d03a      	beq.n	80040fe <lfs_dir_orphaningcommit+0x9a>
 8004088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408c:	3308      	adds	r3, #8
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc ff00 	bl	8000e98 <lfs_pair_cmp>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d12f      	bne.n	80040fe <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800409e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a2:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d12a      	bne.n	80040fe <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80040a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d023      	beq.n	80040fe <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d91b      	bls.n	80040fe <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80040c6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fff0 	bl	80050b0 <lfs_file_outline>
 80040d0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80040d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 80040dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040e0:	e2ad      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80040e2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f001 f804 	bl	80050f4 <lfs_file_flush>
 80040ec:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80040f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <lfs_dir_orphaningcommit+0x9a>
                return err;
 80040f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040fc:	e29f      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80040fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1b5      	bne.n	800407c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004126:	461d      	mov	r5, r3
 8004128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800412a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800412c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800413a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7ff fcd8 	bl	8003afc <lfs_dir_relocatingcommit>
 800414c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004154:	2b00      	cmp	r3, #0
 8004156:	da02      	bge.n	800415e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800415c:	e26f      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc fe96 	bl	8000e98 <lfs_pair_cmp>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	461d      	mov	r5, r3
 8004176:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800417a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800417e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004182:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800418a:	2b02      	cmp	r3, #2
 800418c:	d14a      	bne.n	8004224 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3348      	adds	r3, #72	; 0x48
 8004192:	461a      	mov	r2, r3
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f7fe fce8 	bl	8002b6c <lfs_dir_getgstate>
 800419c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80041a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <lfs_dir_orphaningcommit+0x14a>
            return err;
 80041a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041ac:	e247      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80041ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80041b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	3318      	adds	r3, #24
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc fedb 	bl	8000f7a <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	7ddb      	ldrb	r3, [r3, #23]
 80041c8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80041cc:	051a      	lsls	r2, r3, #20
 80041ce:	4bc2      	ldr	r3, [pc, #776]	; (80044d8 <lfs_dir_orphaningcommit+0x474>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	667b      	str	r3, [r7, #100]	; 0x64
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	3318      	adds	r3, #24
 80041d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80041da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041de:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80041e2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80041e6:	2000      	movs	r0, #0
 80041e8:	9001      	str	r0, [sp, #4]
 80041ea:	2001      	movs	r0, #1
 80041ec:	9000      	str	r0, [sp, #0]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff fc84 	bl	8003afc <lfs_dir_relocatingcommit>
 80041f4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc fea2 	bl	8000f46 <lfs_pair_fromle32>
        if (state < 0) {
 8004202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004206:	2b00      	cmp	r3, #0
 8004208:	da02      	bge.n	8004210 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800420a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800420e:	e216      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8004210:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004214:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800421c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004224:	2300      	movs	r3, #0
 8004226:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 800422a:	e1fc      	b.n	8004626 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800422c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004234:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004238:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800423c:	4ca7      	ldr	r4, [pc, #668]	; (80044dc <lfs_dir_orphaningcommit+0x478>)
 800423e:	9403      	str	r4, [sp, #12]
 8004240:	9102      	str	r1, [sp, #8]
 8004242:	9201      	str	r2, [sp, #4]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4603      	mov	r3, r0
 8004248:	f640 1263 	movw	r2, #2403	; 0x963
 800424c:	49a4      	ldr	r1, [pc, #656]	; (80044e0 <lfs_dir_orphaningcommit+0x47c>)
 800424e:	48a5      	ldr	r0, [pc, #660]	; (80044e4 <lfs_dir_orphaningcommit+0x480>)
 8004250:	f00c fbe4 	bl	8010a1c <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f103 0220 	add.w	r2, r3, #32
 8004260:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004264:	4611      	mov	r1, r2
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc fe16 	bl	8000e98 <lfs_pair_cmp>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d107      	bne.n	8004282 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004272:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800427a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800428a:	e037      	b.n	80042fc <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800428c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004290:	f103 0208 	add.w	r2, r3, #8
 8004294:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc fdfc 	bl	8000e98 <lfs_pair_cmp>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80042a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042ae:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80042b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042b8:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80042ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042be:	799b      	ldrb	r3, [r3, #6]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d116      	bne.n	80042f2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80042c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042c8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80042cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042d0:	4611      	mov	r1, r2
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc fde0 	bl	8000e98 <lfs_pair_cmp>
 80042d8:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80042de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80042e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80042f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1c3      	bne.n	800428c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004304:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004308:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800430c:	4619      	mov	r1, r3
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f002 fa72 	bl	80067f8 <lfs_fs_parent>
 8004314:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8004318:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800431c:	2b00      	cmp	r3, #0
 800431e:	da07      	bge.n	8004330 <lfs_dir_orphaningcommit+0x2cc>
 8004320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004324:	f113 0f02 	cmn.w	r3, #2
 8004328:	d002      	beq.n	8004330 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800432a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800432e:	e186      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8004330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004334:	f113 0f02 	cmn.w	r3, #2
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8004342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004346:	f113 0f02 	cmn.w	r3, #2
 800434a:	f000 809e 	beq.w	800448a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800434e:	2101      	movs	r1, #1
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f002 fae9 	bl	8006928 <lfs_fs_preporphans>
 8004356:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 800435a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <lfs_dir_orphaningcommit+0x304>
                return err;
 8004362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004366:	e16a      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004368:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800436c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3330      	adds	r3, #48	; 0x30
 8004374:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004378:	4611      	mov	r1, r2
 800437a:	4618      	mov	r0, r3
 800437c:	f7fc ff3e 	bl	80011fc <lfs_gstate_hasmovehere>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02d      	beq.n	80043e2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc fe7a 	bl	8001084 <lfs_tag_id>
 8004390:	4603      	mov	r3, r0
 8004392:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8004396:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800439a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800439e:	484f      	ldr	r0, [pc, #316]	; (80044dc <lfs_dir_orphaningcommit+0x478>)
 80043a0:	9002      	str	r0, [sp, #8]
 80043a2:	9201      	str	r2, [sp, #4]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	460b      	mov	r3, r1
 80043a8:	f44f 6219 	mov.w	r2, #2448	; 0x990
 80043ac:	494c      	ldr	r1, [pc, #304]	; (80044e0 <lfs_dir_orphaningcommit+0x47c>)
 80043ae:	484e      	ldr	r0, [pc, #312]	; (80044e8 <lfs_dir_orphaningcommit+0x484>)
 80043b0:	f00c fb34 	bl	8010a1c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80043b4:	2200      	movs	r2, #0
 80043b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f002 fb04 	bl	80069c8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80043c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fc fe5d 	bl	8001084 <lfs_tag_id>
 80043ca:	4603      	mov	r3, r0
 80043cc:	461a      	mov	r2, r3
 80043ce:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d205      	bcs.n	80043e2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80043d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80043de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80043e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e4:	657b      	str	r3, [r7, #84]	; 0x54
 80043e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e8:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80043ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc fdc3 	bl	8000f7a <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80043f4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80043f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <lfs_dir_orphaningcommit+0x3ac>
 8004400:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004404:	029b      	lsls	r3, r3, #10
 8004406:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800440a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800440e:	e000      	b.n	8004412 <lfs_dir_orphaningcommit+0x3ae>
 8004410:	2300      	movs	r3, #0
 8004412:	647b      	str	r3, [r7, #68]	; 0x44
 8004414:	2300      	movs	r3, #0
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48
 8004418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800441c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800441e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004422:	653b      	str	r3, [r7, #80]	; 0x50
 8004424:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004428:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800442c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004430:	2000      	movs	r0, #0
 8004432:	9001      	str	r0, [sp, #4]
 8004434:	2002      	movs	r0, #2
 8004436:	9000      	str	r0, [sp, #0]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff fb5f 	bl	8003afc <lfs_dir_relocatingcommit>
 800443e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004442:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fd7d 	bl	8000f46 <lfs_pair_fromle32>
            if (state < 0) {
 800444c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004450:	2b00      	cmp	r3, #0
 8004452:	da02      	bge.n	800445a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004458:	e0f1      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800445a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800445e:	2b01      	cmp	r3, #1
 8004460:	d113      	bne.n	800448a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8004462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800446a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800446e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004472:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800447a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800447e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004488:	e0cd      	b.n	8004626 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800448a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800448e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004492:	4619      	mov	r1, r3
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f002 f8fd 	bl	8006694 <lfs_fs_pred>
 800449a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800449e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <lfs_dir_orphaningcommit+0x452>
 80044a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044aa:	f113 0f02 	cmn.w	r3, #2
 80044ae:	d002      	beq.n	80044b6 <lfs_dir_orphaningcommit+0x452>
            return err;
 80044b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044b4:	e0c3      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80044b6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01a      	beq.n	80044f4 <lfs_dir_orphaningcommit+0x490>
 80044be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044c2:	f113 0f02 	cmn.w	r3, #2
 80044c6:	d115      	bne.n	80044f4 <lfs_dir_orphaningcommit+0x490>
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <lfs_dir_orphaningcommit+0x488>)
 80044ca:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <lfs_dir_orphaningcommit+0x48c>)
 80044cc:	f640 11b3 	movw	r1, #2483	; 0x9b3
 80044d0:	4803      	ldr	r0, [pc, #12]	; (80044e0 <lfs_dir_orphaningcommit+0x47c>)
 80044d2:	f00b fe43 	bl	801015c <__assert_func>
 80044d6:	bf00      	nop
 80044d8:	000ffc08 	.word	0x000ffc08
 80044dc:	0801176c 	.word	0x0801176c
 80044e0:	08011678 	.word	0x08011678
 80044e4:	080118ec 	.word	0x080118ec
 80044e8:	08011928 	.word	0x08011928
 80044ec:	0801196c 	.word	0x0801196c
 80044f0:	0801229c 	.word	0x0801229c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80044f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044f8:	f113 0f02 	cmn.w	r3, #2
 80044fc:	f000 8093 	beq.w	8004626 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3330      	adds	r3, #48	; 0x30
 8004504:	4618      	mov	r0, r3
 8004506:	f7fc fe30 	bl	800116a <lfs_gstate_hasorphans>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d011      	beq.n	8004534 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004510:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004514:	425b      	negs	r3, r3
 8004516:	b2db      	uxtb	r3, r3
 8004518:	b25b      	sxtb	r3, r3
 800451a:	4619      	mov	r1, r3
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f002 fa03 	bl	8006928 <lfs_fs_preporphans>
 8004522:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8004526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800452e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004532:	e084      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004534:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004538:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3330      	adds	r3, #48	; 0x30
 8004540:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc fe58 	bl	80011fc <lfs_gstate_hasmovehere>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01c      	beq.n	800458c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4618      	mov	r0, r3
 8004558:	f7fc fd94 	bl	8001084 <lfs_tag_id>
 800455c:	4603      	mov	r3, r0
 800455e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8004562:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004566:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800456a:	4837      	ldr	r0, [pc, #220]	; (8004648 <lfs_dir_orphaningcommit+0x5e4>)
 800456c:	9002      	str	r0, [sp, #8]
 800456e:	9201      	str	r2, [sp, #4]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	460b      	mov	r3, r1
 8004574:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004578:	4934      	ldr	r1, [pc, #208]	; (800464c <lfs_dir_orphaningcommit+0x5e8>)
 800457a:	4835      	ldr	r0, [pc, #212]	; (8004650 <lfs_dir_orphaningcommit+0x5ec>)
 800457c:	f00c fa4e 	bl	8010a1c <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004580:	2200      	movs	r2, #0
 8004582:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f002 fa1e 	bl	80069c8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800458c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8004592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004598:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800459c:	4618      	mov	r0, r3
 800459e:	f7fc fcec 	bl	8000f7a <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80045a2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80045a6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <lfs_dir_orphaningcommit+0x55a>
 80045ae:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80045b2:	029b      	lsls	r3, r3, #10
 80045b4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80045b8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80045bc:	e000      	b.n	80045c0 <lfs_dir_orphaningcommit+0x55c>
 80045be:	2300      	movs	r3, #0
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	2300      	movs	r3, #0
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80045ca:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80045ce:	051a      	lsls	r2, r3, #20
 80045d0:	4b20      	ldr	r3, [pc, #128]	; (8004654 <lfs_dir_orphaningcommit+0x5f0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045da:	633b      	str	r3, [r7, #48]	; 0x30
 80045dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80045e4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80045e8:	2000      	movs	r0, #0
 80045ea:	9001      	str	r0, [sp, #4]
 80045ec:	2002      	movs	r0, #2
 80045ee:	9000      	str	r0, [sp, #0]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff fa83 	bl	8003afc <lfs_dir_relocatingcommit>
 80045f6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80045fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fc fca1 	bl	8000f46 <lfs_pair_fromle32>
            if (state < 0) {
 8004604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004608:	2b00      	cmp	r3, #0
 800460a:	da02      	bge.n	8004612 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 800460c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004610:	e015      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8004612:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004616:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800461a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800461c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800461e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800462a:	2b01      	cmp	r3, #1
 800462c:	f43f adfe 	beq.w	800422c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004630:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <lfs_dir_orphaningcommit+0x5d8>
 8004638:	2303      	movs	r3, #3
 800463a:	e000      	b.n	800463e <lfs_dir_orphaningcommit+0x5da>
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	37e0      	adds	r7, #224	; 0xe0
 8004642:	46bd      	mov	sp, r7
 8004644:	bdb0      	pop	{r4, r5, r7, pc}
 8004646:	bf00      	nop
 8004648:	0801176c 	.word	0x0801176c
 800464c:	08011678 	.word	0x08011678
 8004650:	08011928 	.word	0x08011928
 8004654:	000ffc08 	.word	0x000ffc08

08004658 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f7ff fcf9 	bl	8004064 <lfs_dir_orphaningcommit>
 8004672:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	da01      	bge.n	800467e <lfs_dir_commit+0x26>
        return orphans;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	e00d      	b.n	800469a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004684:	2100      	movs	r1, #0
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f002 fac2 	bl	8006c10 <lfs_fs_deorphan>
 800468c:	6138      	str	r0, [r7, #16]
        if (err) {
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <lfs_dir_commit+0x40>
            return err;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	e000      	b.n	800469a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80046a2:	b590      	push	{r4, r7, lr}
 80046a4:	b087      	sub	sp, #28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	3b08      	subs	r3, #8
 80046ba:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <lfs_ctz_index+0x2e>
        return 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e01c      	b.n	800470a <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb ffbf 	bl	8000658 <lfs_popc>
 80046da:	4603      	mov	r3, r0
 80046dc:	3302      	adds	r3, #2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	1ad4      	subs	r4, r2, r3
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7fb ffad 	bl	8000658 <lfs_popc>
 80046fe:	4603      	mov	r3, r0
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	1ae2      	subs	r2, r4, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	601a      	str	r2, [r3, #0]
    return i;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}

08004712 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004712:	b590      	push	{r4, r7, lr}
 8004714:	b08f      	sub	sp, #60	; 0x3c
 8004716:	af04      	add	r7, sp, #16
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800472c:	601a      	str	r2, [r3, #0]
        *off = 0;
 800472e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
        return 0;
 8004734:	2300      	movs	r3, #0
 8004736:	e053      	b.n	80047e0 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	3b01      	subs	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	f107 0314 	add.w	r3, r7, #20
 8004742:	4619      	mov	r1, r3
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff ffac 	bl	80046a2 <lfs_ctz_index>
 800474a:	4603      	mov	r3, r0
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800474e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004752:	4619      	mov	r1, r3
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff ffa4 	bl	80046a2 <lfs_ctz_index>
 800475a:	4603      	mov	r3, r0
 800475c:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800475e:	e034      	b.n	80047ca <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	3301      	adds	r3, #1
 8004768:	4618      	mov	r0, r3
 800476a:	f7fb ff56 	bl	800061a <lfs_npw2>
 800476e:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004770:	1e5c      	subs	r4, r3, #1
 8004772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004774:	f7fb ff61 	bl	800063a <lfs_ctz>
 8004778:	4603      	mov	r3, r0
 800477a:	4619      	mov	r1, r3
 800477c:	4620      	mov	r0, r4
 800477e:	f7fb ff15 	bl	80005ac <lfs_min>
 8004782:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	0092      	lsls	r2, r2, #2
 800478a:	2104      	movs	r1, #4
 800478c:	9103      	str	r1, [sp, #12]
 800478e:	4639      	mov	r1, r7
 8004790:	9102      	str	r1, [sp, #8]
 8004792:	9201      	str	r2, [sp, #4]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2304      	movs	r3, #4
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7fb ffe1 	bl	8000764 <lfs_bd_read>
 80047a2:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fb ff70 	bl	800068c <lfs_fromle32>
 80047ac:	4603      	mov	r3, r0
 80047ae:	603b      	str	r3, [r7, #0]
        if (err) {
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <lfs_ctz_find+0xa8>
            return err;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	e012      	b.n	80047e0 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80047ba:	2201      	movs	r2, #1
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 80047ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d8c6      	bhi.n	8004760 <lfs_ctz_find+0x4e>
    }

    *block = head;
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d6:	601a      	str	r2, [r3, #0]
    *off = pos;
 80047d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047dc:	601a      	str	r2, [r3, #0]
    return 0;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	372c      	adds	r7, #44	; 0x2c
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd90      	pop	{r4, r7, pc}

080047e8 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b092      	sub	sp, #72	; 0x48
 80047ec:	af04      	add	r7, sp, #16
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80047f6:	f107 0320 	add.w	r3, r7, #32
 80047fa:	4619      	mov	r1, r3
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7fc feff 	bl	8001600 <lfs_alloc>
 8004802:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <lfs_ctz_extend+0x26>
            return err;
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	e0e9      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	4619      	mov	r1, r3
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7fc fade 	bl	8000dd4 <lfs_bd_erase>
 8004818:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d006      	beq.n	800482e <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004826:	f000 80cb 	beq.w	80049c0 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	e0d9      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800482e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d107      	bne.n	8004844 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004838:	601a      	str	r2, [r3, #0]
                *off = 0;
 800483a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
                return 0;
 8004840:	2300      	movs	r3, #0
 8004842:	e0ce      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004846:	3b01      	subs	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800484a:	f107 031c 	add.w	r3, r7, #28
 800484e:	4619      	mov	r1, r3
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff ff26 	bl	80046a2 <lfs_ctz_index>
 8004856:	4603      	mov	r3, r0
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	3301      	adds	r3, #1
 800485e:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	429a      	cmp	r2, r3
 800486a:	d044      	beq.n	80048f6 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800486c:	2300      	movs	r3, #0
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
 8004870:	e035      	b.n	80048de <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	2301      	movs	r3, #1
 800487a:	9303      	str	r3, [sp, #12]
 800487c:	f107 0317 	add.w	r3, r7, #23
 8004880:	9302      	str	r3, [sp, #8]
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	2100      	movs	r1, #0
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7fb ff67 	bl	8000764 <lfs_bd_read>
 8004896:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <lfs_ctz_extend+0xba>
                        return err;
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	e09f      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2201      	movs	r2, #1
 80048a6:	9203      	str	r2, [sp, #12]
 80048a8:	f107 0217 	add.w	r2, r7, #23
 80048ac:	9202      	str	r2, [sp, #8]
 80048ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b0:	9201      	str	r2, [sp, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2301      	movs	r3, #1
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7fc f9de 	bl	8000c7c <lfs_bd_prog>
 80048c0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80048ce:	d101      	bne.n	80048d4 <lfs_ctz_extend+0xec>
                            goto relocate;
 80048d0:	bf00      	nop
                    goto relocate;
 80048d2:	e075      	b.n	80049c0 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 80048d6:	e084      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80048d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048da:	3301      	adds	r3, #1
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d3c5      	bcc.n	8004872 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80048e6:	6a3a      	ldr	r2, [r7, #32]
 80048e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ea:	601a      	str	r2, [r3, #0]
                *off = noff;
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	601a      	str	r2, [r3, #0]
                return 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e075      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	3301      	adds	r3, #1
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80048fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048fe:	f7fb fe9c 	bl	800063a <lfs_ctz>
 8004902:	4603      	mov	r3, r0
 8004904:	3301      	adds	r3, #1
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800490c:	2300      	movs	r3, #0
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
 8004910:	e049      	b.n	80049a6 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4618      	mov	r0, r3
 8004916:	f7fb fec4 	bl	80006a2 <lfs_tole32>
 800491a:	4603      	mov	r3, r0
 800491c:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004922:	0092      	lsls	r2, r2, #2
 8004924:	2104      	movs	r1, #4
 8004926:	9103      	str	r1, [sp, #12]
 8004928:	f107 0118 	add.w	r1, r7, #24
 800492c:	9102      	str	r1, [sp, #8]
 800492e:	9201      	str	r2, [sp, #4]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2301      	movs	r3, #1
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7fc f99f 	bl	8000c7c <lfs_bd_prog>
 800493e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fea2 	bl	800068c <lfs_fromle32>
 8004948:	4603      	mov	r3, r0
 800494a:	61bb      	str	r3, [r7, #24]
                if (err) {
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004958:	d034      	beq.n	80049c4 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	e041      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	3b01      	subs	r3, #1
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	429a      	cmp	r2, r3
 8004966:	d01b      	beq.n	80049a0 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496c:	0092      	lsls	r2, r2, #2
 800496e:	2104      	movs	r1, #4
 8004970:	9103      	str	r1, [sp, #12]
 8004972:	f107 0118 	add.w	r1, r7, #24
 8004976:	9102      	str	r1, [sp, #8]
 8004978:	9201      	str	r2, [sp, #4]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	2304      	movs	r3, #4
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	2100      	movs	r1, #0
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7fb feee 	bl	8000764 <lfs_bd_read>
 8004988:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4618      	mov	r0, r3
 800498e:	f7fb fe7d 	bl	800068c <lfs_fromle32>
 8004992:	4603      	mov	r3, r0
 8004994:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <lfs_ctz_extend+0x1b8>
                        return err;
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	e020      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	3301      	adds	r3, #1
 80049a4:	633b      	str	r3, [r7, #48]	; 0x30
 80049a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3b1      	bcc.n	8004912 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b2:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	009a      	lsls	r2, r3, #2
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	601a      	str	r2, [r3, #0]
            return 0;
 80049bc:	2300      	movs	r3, #0
 80049be:	e010      	b.n	80049e2 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <lfs_ctz_extend+0x1de>
                        goto relocate;
 80049c4:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	4a08      	ldr	r2, [pc, #32]	; (80049ec <lfs_ctz_extend+0x204>)
 80049ca:	9200      	str	r2, [sp, #0]
 80049cc:	f640 327d 	movw	r2, #2941	; 0xb7d
 80049d0:	4907      	ldr	r1, [pc, #28]	; (80049f0 <lfs_ctz_extend+0x208>)
 80049d2:	4808      	ldr	r0, [pc, #32]	; (80049f4 <lfs_ctz_extend+0x20c>)
 80049d4:	f00c f822 	bl	8010a1c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7fb fe9c 	bl	8000718 <lfs_cache_drop>
    while (true) {
 80049e0:	e709      	b.n	80047f6 <lfs_ctz_extend+0xe>
    }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3738      	adds	r7, #56	; 0x38
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	0801176c 	.word	0x0801176c
 80049f0:	08011678 	.word	0x08011678
 80049f4:	080117ec 	.word	0x080117ec

080049f8 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b090      	sub	sp, #64	; 0x40
 80049fc:	af04      	add	r7, sp, #16
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <lfs_ctz_traverse+0x18>
        return 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e06b      	b.n	8004ae8 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a12:	3b01      	subs	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	f107 031c 	add.w	r3, r7, #28
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff fe40 	bl	80046a2 <lfs_ctz_index>
 8004a22:	4603      	mov	r3, r0
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a2c:	4798      	blx	r3
 8004a2e:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <lfs_ctz_traverse+0x42>
            return err;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	e056      	b.n	8004ae8 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <lfs_ctz_traverse+0x4c>
            return 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e051      	b.n	8004ae8 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	f1c3 0302 	rsb	r3, r3, #2
 8004a4e:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004a50:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004a52:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004a54:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004a56:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004a58:	9303      	str	r3, [sp, #12]
 8004a5a:	f107 0314 	add.w	r3, r7, #20
 8004a5e:	9302      	str	r3, [sp, #8]
 8004a60:	2300      	movs	r3, #0
 8004a62:	9301      	str	r3, [sp, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7fb fe78 	bl	8000764 <lfs_bd_read>
 8004a74:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fb fe07 	bl	800068c <lfs_fromle32>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fb fe01 	bl	800068c <lfs_fromle32>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <lfs_ctz_traverse+0xa0>
            return err;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	e027      	b.n	8004ae8 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a9c:	e012      	b.n	8004ac4 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	3330      	adds	r3, #48	; 0x30
 8004aa4:	443b      	add	r3, r7
 8004aa6:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	4611      	mov	r1, r2
 8004aae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ab0:	4798      	blx	r3
 8004ab2:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <lfs_ctz_traverse+0xc6>
                return err;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	e014      	b.n	8004ae8 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aca:	429a      	cmp	r2, r3
 8004acc:	dbe7      	blt.n	8004a9e <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	3330      	adds	r3, #48	; 0x30
 8004ad6:	443b      	add	r3, r7
 8004ad8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004adc:	603b      	str	r3, [r7, #0]
        index -= count;
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004ae6:	e79e      	b.n	8004a26 <lfs_ctz_traverse+0x2e>
    }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3730      	adds	r7, #48	; 0x30
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b09a      	sub	sp, #104	; 0x68
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f002 fa31 	bl	8006f70 <lfs_fs_forceconsistency>
 8004b0e:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8004b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <lfs_file_rawopencfg+0x2a>
            return err;
 8004b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b18:	e1b0      	b.n	8004e7c <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b1e:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2200      	movs	r2, #0
 8004b36:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f103 0108 	add.w	r1, r3, #8
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3304      	adds	r3, #4
 8004b42:	1d3a      	adds	r2, r7, #4
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7fe f88d 	bl	8002c64 <lfs_dir_find>
 8004b4a:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8004b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da0c      	bge.n	8004b6c <lfs_file_rawopencfg+0x7c>
 8004b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b54:	f113 0f02 	cmn.w	r3, #2
 8004b58:	d105      	bne.n	8004b66 <lfs_file_rawopencfg+0x76>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	889b      	ldrh	r3, [r3, #4]
 8004b5e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d102      	bne.n	8004b6c <lfs_file_rawopencfg+0x7c>
        err = tag;
 8004b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b68:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004b6a:	e17c      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7fc fcb0 	bl	80014da <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b7c:	f113 0f02 	cmn.w	r3, #2
 8004b80:	d14e      	bne.n	8004c20 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d103      	bne.n	8004b94 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8004b8c:	f06f 0301 	mvn.w	r3, #1
 8004b90:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004b92:	e168      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fb fb4c 	bl	8000234 <strlen>
 8004b9c:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d903      	bls.n	8004bb0 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004ba8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004bac:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004bae:	e15a      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f103 0108 	add.w	r1, r3, #8
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	889b      	ldrh	r3, [r3, #4]
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	889b      	ldrh	r3, [r3, #4]
 8004bce:	029a      	lsls	r2, r3, #10
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	889b      	ldrh	r3, [r3, #4]
 8004be2:	029b      	lsls	r3, r3, #10
 8004be4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bee:	2300      	movs	r3, #0
 8004bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bf2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fd2d 	bl	8004658 <lfs_dir_commit>
 8004bfe:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8004c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c02:	f113 0f1c 	cmn.w	r3, #28
 8004c06:	d001      	beq.n	8004c0c <lfs_file_rawopencfg+0x11c>
 8004c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0a:	e001      	b.n	8004c10 <lfs_file_rawopencfg+0x120>
 8004c0c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004c10:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8004c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 8125 	bne.w	8004e64 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8004c1a:	4b9a      	ldr	r3, [pc, #616]	; (8004e84 <lfs_file_rawopencfg+0x394>)
 8004c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c1e:	e044      	b.n	8004caa <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8004c2a:	f06f 0310 	mvn.w	r3, #16
 8004c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004c30:	e119      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8004c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fc f9fb 	bl	8001030 <lfs_tag_type3>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d003      	beq.n	8004c48 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8004c40:	f06f 0314 	mvn.w	r3, #20
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004c46:	e10e      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00e      	beq.n	8004c70 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	889b      	ldrh	r3, [r3, #4]
 8004c56:	029b      	lsls	r3, r3, #10
 8004c58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c60:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c6e:	e01c      	b.n	8004caa <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	889b      	ldrh	r3, [r3, #4]
 8004c7a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c80:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004c88:	9200      	str	r2, [sp, #0]
 8004c8a:	4a7f      	ldr	r2, [pc, #508]	; (8004e88 <lfs_file_rawopencfg+0x398>)
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7fc fe51 	bl	8001934 <lfs_dir_get>
 8004c92:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8004c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	da02      	bge.n	8004ca0 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8004c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004c9e:	e0e2      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3328      	adds	r3, #40	; 0x28
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fc fb39 	bl	800131c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004caa:	2300      	movs	r3, #0
 8004cac:	657b      	str	r3, [r7, #84]	; 0x54
 8004cae:	e063      	b.n	8004d78 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d03c      	beq.n	8004d36 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004cda:	051a      	lsls	r2, r3, #20
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	889b      	ldrh	r3, [r3, #4]
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	ea42 0103 	orr.w	r1, r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	6858      	ldr	r0, [r3, #4]
 8004cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4403      	add	r3, r0
 8004cf8:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004cfa:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d02:	6859      	ldr	r1, [r3, #4]
 8004d04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	4a5d      	ldr	r2, [pc, #372]	; (8004e8c <lfs_file_rawopencfg+0x39c>)
 8004d18:	4621      	mov	r1, r4
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7fc fe0a 	bl	8001934 <lfs_dir_get>
 8004d20:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8004d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da06      	bge.n	8004d36 <lfs_file_rawopencfg+0x246>
 8004d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2a:	f113 0f02 	cmn.w	r3, #2
 8004d2e:	d002      	beq.n	8004d36 <lfs_file_rawopencfg+0x246>
                err = res;
 8004d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d32:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004d34:	e097      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d903      	bls.n	8004d66 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8004d5e:	f06f 031b 	mvn.w	r3, #27
 8004d62:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004d64:	e07f      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d74:	3301      	adds	r3, #1
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d395      	bcc.n	8004cb0 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d98:	e010      	b.n	8004dbc <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fb fca2 	bl	80006ea <lfs_malloc>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d103      	bne.n	8004dbc <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8004db4:	f06f 030b 	mvn.w	r3, #11
 8004db8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004dba:	e054      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	3340      	adds	r3, #64	; 0x40
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7fb fcb7 	bl	8000736 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8004dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fc f930 	bl	8001030 <lfs_tag_type3>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f240 2301 	movw	r3, #513	; 0x201
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d141      	bne.n	8004e60 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f06f 0201 	mvn.w	r2, #1
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8004de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fc f95c 	bl	80010a4 <lfs_tag_size>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	889b      	ldrh	r3, [r3, #4]
 8004e28:	029c      	lsls	r4, r3, #10
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb fbba 	bl	80005ac <lfs_min>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004e3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	4a0f      	ldr	r2, [pc, #60]	; (8004e88 <lfs_file_rawopencfg+0x398>)
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7fc fd71 	bl	8001934 <lfs_dir_get>
 8004e52:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8004e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da02      	bge.n	8004e60 <lfs_file_rawopencfg+0x370>
                err = res;
 8004e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004e5e:	e002      	b.n	8004e66 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e00b      	b.n	8004e7c <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 8004e64:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f823 	bl	8004ec0 <lfs_file_rawclose>
    return err;
 8004e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3760      	adds	r7, #96	; 0x60
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdb0      	pop	{r4, r5, r7, pc}
 8004e84:	20100000 	.word	0x20100000
 8004e88:	700ffc00 	.word	0x700ffc00
 8004e8c:	7ffffc00 	.word	0x7ffffc00

08004e90 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <lfs_file_rawopen+0x2c>)
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff fe21 	bl	8004af0 <lfs_file_rawopencfg>
 8004eae:	6178      	str	r0, [r7, #20]
    return err;
 8004eb0:	697b      	ldr	r3, [r7, #20]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	080122b4 	.word	0x080122b4

08004ec0 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f9e5 	bl	800529c <lfs_file_rawsync>
 8004ed2:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fc fadd 	bl	8001496 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d104      	bne.n	8004ef0 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fb fc09 	bl	8000702 <lfs_free>
    }

    return err;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b08d      	sub	sp, #52	; 0x34
 8004f00:	af06      	add	r7, sp, #24
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004f06:	f107 030c 	add.w	r3, r7, #12
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fc fb77 	bl	8001600 <lfs_alloc>
 8004f12:	6138      	str	r0, [r7, #16]
        if (err) {
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <lfs_file_relocate+0x22>
            return err;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	e0bb      	b.n	8005096 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fb ff56 	bl	8000dd4 <lfs_bd_erase>
 8004f28:	6138      	str	r0, [r7, #16]
        if (err) {
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004f36:	f000 809b 	beq.w	8005070 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	e0ab      	b.n	8005096 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e069      	b.n	8005018 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d027      	beq.n	8004fa0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f103 0008 	add.w	r0, r3, #8
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	889b      	ldrh	r3, [r3, #4]
 8004f68:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8004f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f72:	2101      	movs	r1, #1
 8004f74:	9105      	str	r1, [sp, #20]
 8004f76:	f107 010b 	add.w	r1, r7, #11
 8004f7a:	9104      	str	r1, [sp, #16]
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	9103      	str	r1, [sp, #12]
 8004f80:	9302      	str	r3, [sp, #8]
 8004f82:	4b47      	ldr	r3, [pc, #284]	; (80050a0 <lfs_file_relocate+0x1a4>)
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	9200      	str	r2, [sp, #0]
 8004f88:	4623      	mov	r3, r4
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4601      	mov	r1, r0
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc fceb 	bl	800196a <lfs_dir_getread>
 8004f94:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01e      	beq.n	8004fda <lfs_file_relocate+0xde>
                    return err;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	e07a      	b.n	8005096 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8004fa6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad4      	subs	r4, r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	9203      	str	r2, [sp, #12]
 8004fb8:	f107 020b 	add.w	r2, r7, #11
 8004fbc:	9202      	str	r2, [sp, #8]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	9201      	str	r2, [sp, #4]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	4623      	mov	r3, r4
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fb fbcb 	bl	8000764 <lfs_bd_read>
 8004fce:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <lfs_file_relocate+0xde>
                    return err;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	e05d      	b.n	8005096 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f103 0110 	add.w	r1, r3, #16
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	9203      	str	r2, [sp, #12]
 8004fe8:	f107 020b 	add.w	r2, r7, #11
 8004fec:	9202      	str	r2, [sp, #8]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	9201      	str	r2, [sp, #4]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7fb fe3f 	bl	8000c7c <lfs_bd_prog>
 8004ffe:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800500c:	d032      	beq.n	8005074 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	e041      	b.n	8005096 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3301      	adds	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	429a      	cmp	r2, r3
 8005020:	d390      	bcc.n	8004f44 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69d9      	ldr	r1, [r3, #28]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	461a      	mov	r2, r3
 8005032:	f00b f90d 	bl	8010250 <memcpy>
        file->cache.block = lfs->pcache.block;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3310      	adds	r3, #16
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fb fb6e 	bl	8000736 <lfs_cache_zero>

        file->block = nblock;
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800506c:	2300      	movs	r3, #0
 800506e:	e012      	b.n	8005096 <lfs_file_relocate+0x19a>
                goto relocate;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005074:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <lfs_file_relocate+0x1a8>)
 800507a:	9200      	str	r2, [sp, #0]
 800507c:	f640 42b3 	movw	r2, #3251	; 0xcb3
 8005080:	4909      	ldr	r1, [pc, #36]	; (80050a8 <lfs_file_relocate+0x1ac>)
 8005082:	480a      	ldr	r0, [pc, #40]	; (80050ac <lfs_file_relocate+0x1b0>)
 8005084:	f00b fcca 	bl	8010a1c <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3310      	adds	r3, #16
 800508c:	4619      	mov	r1, r3
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fb fb42 	bl	8000718 <lfs_cache_drop>
    while (true) {
 8005094:	e737      	b.n	8004f06 <lfs_file_relocate+0xa>
    }
}
 8005096:	4618      	mov	r0, r3
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	bd90      	pop	{r4, r7, pc}
 800509e:	bf00      	nop
 80050a0:	fff7fc00 	.word	0xfff7fc00
 80050a4:	0801176c 	.word	0x0801176c
 80050a8:	08011678 	.word	0x08011678
 80050ac:	080117ec 	.word	0x080117ec

080050b0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fa7c 	bl	80015c0 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff ff16 	bl	8004efc <lfs_file_relocate>
 80050d0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <lfs_file_outline+0x2c>
        return err;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	e006      	b.n	80050ea <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80050f4:	b590      	push	{r4, r7, lr}
 80050f6:	b09f      	sub	sp, #124	; 0x7c
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d011      	beq.n	800512e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d105      	bne.n	8005122 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	3340      	adds	r3, #64	; 0x40
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fb fafb 	bl	8000718 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80a4 	beq.w	8005284 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d176      	bne.n	800523c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800514e:	f107 030c 	add.w	r3, r7, #12
 8005152:	2254      	movs	r2, #84	; 0x54
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f00b f887 	bl	801026a <memset>
                .ctz.head = file->ctz.head,
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8005166:	63bb      	str	r3, [r7, #56]	; 0x38
 8005168:	2301      	movs	r3, #1
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005170:	643b      	str	r3, [r7, #64]	; 0x40
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800517a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fb fac8 	bl	8000718 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005188:	e02b      	b.n	80051e2 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800518a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800518e:	f107 010c 	add.w	r1, r7, #12
 8005192:	2301      	movs	r3, #1
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f90d 	bl	80053b4 <lfs_file_flushedread>
 800519a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800519c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519e:	2b00      	cmp	r3, #0
 80051a0:	da01      	bge.n	80051a6 <lfs_file_flush+0xb2>
                    return res;
 80051a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a4:	e06f      	b.n	8005286 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80051a6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80051aa:	2301      	movs	r3, #1
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa08 	bl	80055c4 <lfs_file_flushedwrite>
 80051b4:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80051b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	da01      	bge.n	80051c0 <lfs_file_flush+0xcc>
                    return res;
 80051bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051be:	e062      	b.n	8005286 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c8:	d00b      	beq.n	80051e2 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80051ca:	f107 030c 	add.w	r3, r7, #12
 80051ce:	3340      	adds	r3, #64	; 0x40
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fb faa0 	bl	8000718 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7fb fa9b 	bl	8000718 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d3cd      	bcc.n	800518a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	2301      	movs	r3, #1
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7fb fc8f 	bl	8000b1c <lfs_bd_flush>
 80051fe:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005202:	2b00      	cmp	r3, #0
 8005204:	d026      	beq.n	8005254 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8005206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005208:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800520c:	d001      	beq.n	8005212 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800520e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005210:	e039      	b.n	8005286 <lfs_file_flush+0x192>
                        goto relocate;
 8005212:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	4a1d      	ldr	r2, [pc, #116]	; (8005290 <lfs_file_flush+0x19c>)
 800521a:	9200      	str	r2, [sp, #0]
 800521c:	f640 5202 	movw	r2, #3330	; 0xd02
 8005220:	491c      	ldr	r1, [pc, #112]	; (8005294 <lfs_file_flush+0x1a0>)
 8005222:	481d      	ldr	r0, [pc, #116]	; (8005298 <lfs_file_flush+0x1a4>)
 8005224:	f00b fbfa 	bl	8010a1c <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fe66 	bl	8004efc <lfs_file_relocate>
 8005230:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0da      	beq.n	80051ee <lfs_file_flush+0xfa>
                    return err;
 8005238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800523a:	e024      	b.n	8005286 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	4619      	mov	r1, r3
 8005246:	4610      	mov	r0, r2
 8005248:	f7fb f9a0 	bl	800058c <lfs_max>
 800524c:	4602      	mov	r2, r0
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	635a      	str	r2, [r3, #52]	; 0x34
 8005252:	e000      	b.n	8005256 <lfs_file_flush+0x162>
                break;
 8005254:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005282:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3774      	adds	r7, #116	; 0x74
 800528a:	46bd      	mov	sp, r7
 800528c:	bd90      	pop	{r4, r7, pc}
 800528e:	bf00      	nop
 8005290:	0801176c 	.word	0x0801176c
 8005294:	08011678 	.word	0x08011678
 8005298:	080117ec 	.word	0x080117ec

0800529c <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800529c:	b580      	push	{r7, lr}
 800529e:	b090      	sub	sp, #64	; 0x40
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e07a      	b.n	80053ac <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff1b 	bl	80050f4 <lfs_file_flush>
 80052be:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	e06a      	b.n	80053ac <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d063      	beq.n	80053aa <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb fdbb 	bl	8000e62 <lfs_pair_isnull>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f083 0301 	eor.w	r3, r3, #1
 80052f2:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d058      	beq.n	80053aa <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d009      	beq.n	8005318 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005304:	f240 2301 	movw	r3, #513	; 0x201
 8005308:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	e014      	b.n	8005342 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005318:	f240 2302 	movw	r3, #514	; 0x202
 800531c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005324:	3228      	adds	r2, #40	; 0x28
 8005326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800532a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800532e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005332:	4618      	mov	r0, r3
 8005334:	f7fc f80a 	bl	800134c <lfs_ctz_tole32>
            buffer = &ctz;
 8005338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800533e:	2308      	movs	r3, #8
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f103 0108 	add.w	r1, r3, #8
 8005348:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800534a:	051a      	lsls	r2, r3, #20
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	889b      	ldrh	r3, [r3, #4]
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	431a      	orrs	r2, r3
 8005354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	889b      	ldrh	r3, [r3, #4]
 8005362:	029a      	lsls	r2, r3, #10
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4313      	orrs	r3, r2
 800536c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
 800537a:	f107 0218 	add.w	r2, r7, #24
 800537e:	2302      	movs	r3, #2
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff f969 	bl	8004658 <lfs_dir_commit>
 8005386:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	e006      	b.n	80053ac <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3740      	adds	r7, #64	; 0x40
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80053b4:	b5b0      	push	{r4, r5, r7, lr}
 80053b6:	b090      	sub	sp, #64	; 0x40
 80053b8:	af06      	add	r7, sp, #24
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d301      	bcc.n	80053da <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e0b7      	b.n	800554a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	4619      	mov	r1, r3
 80053e6:	6838      	ldr	r0, [r7, #0]
 80053e8:	f7fb f8e0 	bl	80005ac <lfs_min>
 80053ec:	6038      	str	r0, [r7, #0]
    nsize = size;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80053f2:	e0a5      	b.n	8005540 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d006      	beq.n	800540e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005408:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d130      	bne.n	8005470 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d11c      	bne.n	8005454 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	3138      	adds	r1, #56	; 0x38
 8005430:	68b8      	ldr	r0, [r7, #8]
 8005432:	303c      	adds	r0, #60	; 0x3c
 8005434:	9003      	str	r0, [sp, #12]
 8005436:	9102      	str	r1, [sp, #8]
 8005438:	9201      	str	r2, [sp, #4]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	462b      	mov	r3, r5
 800543e:	4622      	mov	r2, r4
 8005440:	2100      	movs	r1, #0
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff f965 	bl	8004712 <lfs_ctz_find>
 8005448:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d009      	beq.n	8005464 <lfs_file_flushedread+0xb0>
                    return err;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	e07a      	b.n	800554a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f06f 0201 	mvn.w	r2, #1
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005474:	69da      	ldr	r2, [r3, #28]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	4619      	mov	r1, r3
 800547e:	6a38      	ldr	r0, [r7, #32]
 8005480:	f7fb f894 	bl	80005ac <lfs_min>
 8005484:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d026      	beq.n	80054e0 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f103 0408 	add.w	r4, r3, #8
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80054a2:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	889b      	ldrh	r3, [r3, #4]
 80054a8:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80054aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80054b6:	69b8      	ldr	r0, [r7, #24]
 80054b8:	9005      	str	r0, [sp, #20]
 80054ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054bc:	9004      	str	r0, [sp, #16]
 80054be:	9103      	str	r1, [sp, #12]
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	4b24      	ldr	r3, [pc, #144]	; (8005554 <lfs_file_flushedread+0x1a0>)
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	9200      	str	r2, [sp, #0]
 80054c8:	462b      	mov	r3, r5
 80054ca:	2200      	movs	r2, #0
 80054cc:	4621      	mov	r1, r4
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7fc fa4b 	bl	800196a <lfs_dir_getread>
 80054d4:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01d      	beq.n	8005518 <lfs_file_flushedread+0x164>
                return err;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	e034      	b.n	800554a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80054ea:	69dc      	ldr	r4, [r3, #28]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80054f4:	69b9      	ldr	r1, [r7, #24]
 80054f6:	9103      	str	r1, [sp, #12]
 80054f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054fa:	9102      	str	r1, [sp, #8]
 80054fc:	9201      	str	r2, [sp, #4]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	4623      	mov	r3, r4
 8005502:	4602      	mov	r2, r0
 8005504:	2100      	movs	r1, #0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7fb f92c 	bl	8000764 <lfs_bd_read>
 800550c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <lfs_file_flushedread+0x164>
                return err;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	e018      	b.n	800554a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	441a      	add	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	441a      	add	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	4413      	add	r3, r2
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f47f af56 	bne.w	80053f4 <lfs_file_flushedread+0x40>
    }

    return size;
 8005548:	683b      	ldr	r3, [r7, #0]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3728      	adds	r7, #40	; 0x28
 800554e:	46bd      	mov	sp, r7
 8005550:	bdb0      	pop	{r4, r5, r7, pc}
 8005552:	bf00      	nop
 8005554:	fff7fc00 	.word	0xfff7fc00

08005558 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <lfs_file_rawread+0x28>
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <lfs_file_rawread+0x60>)
 8005574:	4a11      	ldr	r2, [pc, #68]	; (80055bc <lfs_file_rawread+0x64>)
 8005576:	f640 518d 	movw	r1, #3469	; 0xd8d
 800557a:	4811      	ldr	r0, [pc, #68]	; (80055c0 <lfs_file_rawread+0x68>)
 800557c:	f00a fdee 	bl	801015c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d009      	beq.n	80055a0 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff fdb0 	bl	80050f4 <lfs_file_flush>
 8005594:	6178      	str	r0, [r7, #20]
        if (err) {
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <lfs_file_rawread+0x48>
            return err;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	e006      	b.n	80055ae <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff ff04 	bl	80053b4 <lfs_file_flushedread>
 80055ac:	4603      	mov	r3, r0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	08011994 	.word	0x08011994
 80055bc:	080122c0 	.word	0x080122c0
 80055c0:	08011678 	.word	0x08011678

080055c4 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80055c4:	b5b0      	push	{r4, r5, r7, lr}
 80055c6:	b090      	sub	sp, #64	; 0x40
 80055c8:	af04      	add	r7, sp, #16
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 810e 	beq.w	8005804 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	441a      	add	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f7fa ffc8 	bl	800058c <lfs_max>
 80055fc:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8005602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800560a:	2b00      	cmp	r3, #0
 800560c:	d004      	beq.n	8005618 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8005614:	08db      	lsrs	r3, r3, #3
 8005616:	e003      	b.n	8005620 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800561c:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f7fa ffc2 	bl	80005ac <lfs_min>
 8005628:	4603      	mov	r3, r0
 800562a:	4619      	mov	r1, r3
 800562c:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8005630:	f7fa ffbc 	bl	80005ac <lfs_min>
 8005634:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8005636:	429c      	cmp	r4, r3
 8005638:	f240 80e4 	bls.w	8005804 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff fd36 	bl	80050b0 <lfs_file_outline>
 8005644:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80db 	beq.w	8005804 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	e0d7      	b.n	800580e <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d006      	beq.n	8005678 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005672:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d16d      	bne.n	8005754 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d159      	bne.n	8005738 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d12f      	bne.n	80056f0 <lfs_file_flushedwrite+0x12c>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	2b00      	cmp	r3, #0
 8005696:	d02b      	beq.n	80056f0 <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80056aa:	3a01      	subs	r2, #1
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80056b0:	2000      	movs	r0, #0
 80056b2:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80056b4:	f107 0010 	add.w	r0, r7, #16
 80056b8:	9003      	str	r0, [sp, #12]
 80056ba:	9102      	str	r1, [sp, #8]
 80056bc:	9201      	str	r2, [sp, #4]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	462b      	mov	r3, r5
 80056c2:	4622      	mov	r2, r4
 80056c4:	2100      	movs	r1, #0
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff f823 	bl	8004712 <lfs_ctz_find>
 80056cc:	6238      	str	r0, [r7, #32]
                    if (err) {
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	e094      	b.n	800580e <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	3340      	adds	r3, #64	; 0x40
 80056e8:	4619      	mov	r1, r3
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7fb f823 	bl	8000736 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f7fb ff65 	bl	80015c0 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80056fc:	68fc      	ldr	r4, [r7, #12]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	3238      	adds	r2, #56	; 0x38
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	313c      	adds	r1, #60	; 0x3c
 800570e:	9102      	str	r1, [sp, #8]
 8005710:	9201      	str	r2, [sp, #4]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	462b      	mov	r3, r5
 8005716:	4622      	mov	r2, r4
 8005718:	4601      	mov	r1, r0
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff f864 	bl	80047e8 <lfs_ctz_extend>
 8005720:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00f      	beq.n	8005748 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	e06a      	b.n	800580e <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f06f 0201 	mvn.w	r2, #1
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	4619      	mov	r1, r3
 8005762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005764:	f7fa ff22 	bl	80005ac <lfs_min>
 8005768:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005770:	68fc      	ldr	r4, [r7, #12]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800577a:	69b9      	ldr	r1, [r7, #24]
 800577c:	9103      	str	r1, [sp, #12]
 800577e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005780:	9102      	str	r1, [sp, #8]
 8005782:	9201      	str	r2, [sp, #4]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2301      	movs	r3, #1
 8005788:	4622      	mov	r2, r4
 800578a:	4601      	mov	r1, r0
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7fb fa75 	bl	8000c7c <lfs_bd_prog>
 8005792:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01c      	beq.n	80057d4 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80057a0:	d007      	beq.n	80057b2 <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	e02d      	b.n	800580e <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 80057b2:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff fba0 	bl	8004efc <lfs_file_relocate>
 80057bc:	6178      	str	r0, [r7, #20]
            if (err) {
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0d2      	beq.n	800576a <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	e01c      	b.n	800580e <lfs_file_flushedwrite+0x24a>
            break;
 80057d4:	bf00      	nop
            }
        }

        file->pos += diff;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	441a      	add	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	441a      	add	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80057ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	4413      	add	r3, r2
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 80057f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7fb fede 	bl	80015c0 <lfs_alloc_ack>
    while (nsize > 0) {
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	f47f af29 	bne.w	800565e <lfs_file_flushedwrite+0x9a>
    }

    return size;
 800580c:	683b      	ldr	r3, [r7, #0]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3730      	adds	r7, #48	; 0x30
 8005812:	46bd      	mov	sp, r7
 8005814:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005818 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <lfs_file_rawwrite+0x28>
 8005832:	4b38      	ldr	r3, [pc, #224]	; (8005914 <lfs_file_rawwrite+0xfc>)
 8005834:	4a38      	ldr	r2, [pc, #224]	; (8005918 <lfs_file_rawwrite+0x100>)
 8005836:	f640 51f8 	movw	r1, #3576	; 0xdf8
 800583a:	4838      	ldr	r0, [pc, #224]	; (800591c <lfs_file_rawwrite+0x104>)
 800583c:	f00a fc8e 	bl	801015c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff fc50 	bl	80050f4 <lfs_file_flush>
 8005854:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <lfs_file_rawwrite+0x48>
            return err;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	e055      	b.n	800590c <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005868:	2b00      	cmp	r3, #0
 800586a:	d009      	beq.n	8005880 <lfs_file_rawwrite+0x68>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d203      	bcs.n	8005880 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	441a      	add	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	429a      	cmp	r2, r3
 800588e:	d902      	bls.n	8005896 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005890:	f06f 031a 	mvn.w	r3, #26
 8005894:	e03a      	b.n	800590c <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d121      	bne.n	80058e6 <lfs_file_rawwrite+0xce>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d91b      	bls.n	80058e6 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 80058bc:	e00e      	b.n	80058dc <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]
 80058c2:	f107 0217 	add.w	r2, r7, #23
 80058c6:	2301      	movs	r3, #1
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff fe7a 	bl	80055c4 <lfs_file_flushedwrite>
 80058d0:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	da01      	bge.n	80058dc <lfs_file_rawwrite+0xc4>
                return res;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	e017      	b.n	800590c <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d8eb      	bhi.n	80058be <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff fe69 	bl	80055c4 <lfs_file_flushedwrite>
 80058f2:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	da01      	bge.n	80058fe <lfs_file_rawwrite+0xe6>
        return nsize;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	e006      	b.n	800590c <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 800590a:	69bb      	ldr	r3, [r7, #24]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3728      	adds	r7, #40	; 0x28
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	080119c4 	.word	0x080119c4
 8005918:	080122d4 	.word	0x080122d4
 800591c:	08011678 	.word	0x08011678

08005920 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b08c      	sub	sp, #48	; 0x30
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <lfs_file_rawseek+0x20>
        npos = off;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593e:	e025      	b.n	800598c <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10f      	bne.n	8005966 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	461a      	mov	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4413      	add	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	da02      	bge.n	800595a <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8005954:	f06f 0315 	mvn.w	r3, #21
 8005958:	e067      	b.n	8005a2a <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005964:	e012      	b.n	800598c <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d10f      	bne.n	800598c <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f875 	bl	8005a5e <lfs_file_rawsize>
 8005974:	4602      	mov	r2, r0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4413      	add	r3, r2
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	2b00      	cmp	r3, #0
 8005980:	da02      	bge.n	8005988 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8005982:	f06f 0315 	mvn.w	r3, #21
 8005986:	e050      	b.n	8005a2a <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005992:	429a      	cmp	r2, r3
 8005994:	d902      	bls.n	800599c <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8005996:	f06f 0315 	mvn.w	r3, #21
 800599a:	e046      	b.n	8005a2a <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d101      	bne.n	80059aa <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	e03f      	b.n	8005a2a <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d12b      	bne.n	8005a0e <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	f107 0318 	add.w	r3, r7, #24
 80059c0:	4619      	mov	r1, r3
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7fe fe6d 	bl	80046a2 <lfs_ctz_index>
 80059c8:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	4619      	mov	r1, r3
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7fe fe64 	bl	80046a2 <lfs_ctz_index>
 80059da:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80059dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d114      	bne.n	8005a0e <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d80f      	bhi.n	8005a0e <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f6:	441a      	add	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d907      	bls.n	8005a0e <lfs_file_rawseek+0xee>
            file->pos = npos;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a02:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8005a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0c:	e00d      	b.n	8005a2a <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff fb6f 	bl	80050f4 <lfs_file_flush>
 8005a16:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <lfs_file_rawseek+0x102>
        return err;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	e003      	b.n	8005a2a <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a26:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3730      	adds	r7, #48	; 0x30
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <lfs_file_rawrewind>:
static lfs_soff_t lfs_file_rawtell(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rawrewind(lfs_t *lfs, lfs_file_t *file) {
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_SET);
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff ff6c 	bl	8005920 <lfs_file_rawseek>
 8005a48:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da01      	bge.n	8005a54 <lfs_file_rawrewind+0x22>
        return (int)res;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	e000      	b.n	8005a56 <lfs_file_rawrewind+0x24>
    }

    return 0;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <lfs_file_rawsize>:

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f7fa fd84 	bl	800058c <lfs_max>
 8005a84:	4603      	mov	r3, r0
 8005a86:	e001      	b.n	8005a8c <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08c      	sub	sp, #48	; 0x30
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <lfs_init+0x2c>
 8005ab2:	4b98      	ldr	r3, [pc, #608]	; (8005d14 <lfs_init+0x280>)
 8005ab4:	4a98      	ldr	r2, [pc, #608]	; (8005d18 <lfs_init+0x284>)
 8005ab6:	f241 0115 	movw	r1, #4117	; 0x1015
 8005aba:	4898      	ldr	r0, [pc, #608]	; (8005d1c <lfs_init+0x288>)
 8005abc:	f00a fb4e 	bl	801015c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <lfs_init+0x44>
 8005aca:	4b95      	ldr	r3, [pc, #596]	; (8005d20 <lfs_init+0x28c>)
 8005acc:	4a92      	ldr	r2, [pc, #584]	; (8005d18 <lfs_init+0x284>)
 8005ace:	f241 0116 	movw	r1, #4118	; 0x1016
 8005ad2:	4892      	ldr	r0, [pc, #584]	; (8005d1c <lfs_init+0x288>)
 8005ad4:	f00a fb42 	bl	801015c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <lfs_init+0x5c>
 8005ae2:	4b90      	ldr	r3, [pc, #576]	; (8005d24 <lfs_init+0x290>)
 8005ae4:	4a8c      	ldr	r2, [pc, #560]	; (8005d18 <lfs_init+0x284>)
 8005ae6:	f241 0117 	movw	r1, #4119	; 0x1017
 8005aea:	488c      	ldr	r0, [pc, #560]	; (8005d1c <lfs_init+0x288>)
 8005aec:	f00a fb36 	bl	801015c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005afa:	6952      	ldr	r2, [r2, #20]
 8005afc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b00:	fb01 f202 	mul.w	r2, r1, r2
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d006      	beq.n	8005b18 <lfs_init+0x84>
 8005b0a:	4b87      	ldr	r3, [pc, #540]	; (8005d28 <lfs_init+0x294>)
 8005b0c:	4a82      	ldr	r2, [pc, #520]	; (8005d18 <lfs_init+0x284>)
 8005b0e:	f241 011b 	movw	r1, #4123	; 0x101b
 8005b12:	4882      	ldr	r0, [pc, #520]	; (8005d1c <lfs_init+0x288>)
 8005b14:	f00a fb22 	bl	801015c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b22:	6992      	ldr	r2, [r2, #24]
 8005b24:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b28:	fb01 f202 	mul.w	r2, r1, r2
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d006      	beq.n	8005b40 <lfs_init+0xac>
 8005b32:	4b7e      	ldr	r3, [pc, #504]	; (8005d2c <lfs_init+0x298>)
 8005b34:	4a78      	ldr	r2, [pc, #480]	; (8005d18 <lfs_init+0x284>)
 8005b36:	f241 011c 	movw	r1, #4124	; 0x101c
 8005b3a:	4878      	ldr	r0, [pc, #480]	; (8005d1c <lfs_init+0x288>)
 8005b3c:	f00a fb0e 	bl	801015c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b4a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b50:	fb01 f202 	mul.w	r2, r1, r2
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <lfs_init+0xd4>
 8005b5a:	4b75      	ldr	r3, [pc, #468]	; (8005d30 <lfs_init+0x29c>)
 8005b5c:	4a6e      	ldr	r2, [pc, #440]	; (8005d18 <lfs_init+0x284>)
 8005b5e:	f241 011d 	movw	r1, #4125	; 0x101d
 8005b62:	486e      	ldr	r0, [pc, #440]	; (8005d1c <lfs_init+0x288>)
 8005b64:	f00a fafa 	bl	801015c <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b70:	d806      	bhi.n	8005b80 <lfs_init+0xec>
 8005b72:	4b70      	ldr	r3, [pc, #448]	; (8005d34 <lfs_init+0x2a0>)
 8005b74:	4a68      	ldr	r2, [pc, #416]	; (8005d18 <lfs_init+0x284>)
 8005b76:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8005b7a:	4868      	ldr	r0, [pc, #416]	; (8005d1c <lfs_init+0x288>)
 8005b7c:	f00a faee 	bl	801015c <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	3b08      	subs	r3, #8
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fa fd42 	bl	800061a <lfs_npw2>
 8005b96:	4603      	mov	r3, r0
 8005b98:	009a      	lsls	r2, r3, #2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d906      	bls.n	8005bb2 <lfs_init+0x11e>
 8005ba4:	4b64      	ldr	r3, [pc, #400]	; (8005d38 <lfs_init+0x2a4>)
 8005ba6:	4a5c      	ldr	r2, [pc, #368]	; (8005d18 <lfs_init+0x284>)
 8005ba8:	f241 0123 	movw	r1, #4131	; 0x1023
 8005bac:	485b      	ldr	r0, [pc, #364]	; (8005d1c <lfs_init+0x288>)
 8005bae:	f00a fad5 	bl	801015c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <lfs_init+0x136>
 8005bbc:	4b5f      	ldr	r3, [pc, #380]	; (8005d3c <lfs_init+0x2a8>)
 8005bbe:	4a56      	ldr	r2, [pc, #344]	; (8005d18 <lfs_init+0x284>)
 8005bc0:	f241 012c 	movw	r1, #4140	; 0x102c
 8005bc4:	4855      	ldr	r0, [pc, #340]	; (8005d1c <lfs_init+0x288>)
 8005bc6:	f00a fac9 	bl	801015c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <lfs_init+0x14c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	e010      	b.n	8005c02 <lfs_init+0x16e>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fa fd7f 	bl	80006ea <lfs_malloc>
 8005bec:	4602      	mov	r2, r0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <lfs_init+0x16e>
            err = LFS_ERR_NOMEM;
 8005bfa:	f06f 030b 	mvn.w	r3, #11
 8005bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005c00:	e0ff      	b.n	8005e02 <lfs_init+0x36e>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <lfs_init+0x184>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	61da      	str	r2, [r3, #28]
 8005c16:	e010      	b.n	8005c3a <lfs_init+0x1a6>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fa fd63 	bl	80006ea <lfs_malloc>
 8005c24:	4602      	mov	r2, r0
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <lfs_init+0x1a6>
            err = LFS_ERR_NOMEM;
 8005c32:	f06f 030b 	mvn.w	r3, #11
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005c38:	e0e3      	b.n	8005e02 <lfs_init+0x36e>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fa fd79 	bl	8000736 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	3310      	adds	r3, #16
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fa fd73 	bl	8000736 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <lfs_init+0x1d4>
 8005c5a:	4b39      	ldr	r3, [pc, #228]	; (8005d40 <lfs_init+0x2ac>)
 8005c5c:	4a2e      	ldr	r2, [pc, #184]	; (8005d18 <lfs_init+0x284>)
 8005c5e:	f241 014a 	movw	r1, #4170	; 0x104a
 8005c62:	482e      	ldr	r0, [pc, #184]	; (8005d1c <lfs_init+0x288>)
 8005c64:	f00a fa7a 	bl	801015c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <lfs_init+0x1f0>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d006      	beq.n	8005c92 <lfs_init+0x1fe>
 8005c84:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <lfs_init+0x2b0>)
 8005c86:	4a24      	ldr	r2, [pc, #144]	; (8005d18 <lfs_init+0x284>)
 8005c88:	f241 014b 	movw	r1, #4171	; 0x104b
 8005c8c:	4823      	ldr	r0, [pc, #140]	; (8005d1c <lfs_init+0x288>)
 8005c8e:	f00a fa65 	bl	801015c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <lfs_init+0x214>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	665a      	str	r2, [r3, #100]	; 0x64
 8005ca6:	e010      	b.n	8005cca <lfs_init+0x236>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fa fd1b 	bl	80006ea <lfs_malloc>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <lfs_init+0x236>
            err = LFS_ERR_NOMEM;
 8005cc2:	f06f 030b 	mvn.w	r3, #11
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005cc8:	e09b      	b.n	8005e02 <lfs_init+0x36e>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	2bff      	cmp	r3, #255	; 0xff
 8005cd2:	d906      	bls.n	8005ce2 <lfs_init+0x24e>
 8005cd4:	4b1c      	ldr	r3, [pc, #112]	; (8005d48 <lfs_init+0x2b4>)
 8005cd6:	4a10      	ldr	r2, [pc, #64]	; (8005d18 <lfs_init+0x284>)
 8005cd8:	f241 0158 	movw	r1, #4184	; 0x1058
 8005cdc:	480f      	ldr	r0, [pc, #60]	; (8005d1c <lfs_init+0x288>)
 8005cde:	f00a fa3d 	bl	801015c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <lfs_init+0x266>
        lfs->name_max = LFS_NAME_MAX;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	22ff      	movs	r2, #255	; 0xff
 8005cf8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	da25      	bge.n	8005d50 <lfs_init+0x2bc>
 8005d04:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <lfs_init+0x2b8>)
 8005d06:	4a04      	ldr	r2, [pc, #16]	; (8005d18 <lfs_init+0x284>)
 8005d08:	f241 015e 	movw	r1, #4190	; 0x105e
 8005d0c:	4803      	ldr	r0, [pc, #12]	; (8005d1c <lfs_init+0x288>)
 8005d0e:	f00a fa25 	bl	801015c <__assert_func>
 8005d12:	bf00      	nop
 8005d14:	080119f4 	.word	0x080119f4
 8005d18:	080122e8 	.word	0x080122e8
 8005d1c:	08011678 	.word	0x08011678
 8005d20:	08011a10 	.word	0x08011a10
 8005d24:	08011a2c 	.word	0x08011a2c
 8005d28:	08011a48 	.word	0x08011a48
 8005d2c:	08011a78 	.word	0x08011a78
 8005d30:	08011aa8 	.word	0x08011aa8
 8005d34:	08011adc 	.word	0x08011adc
 8005d38:	08011af8 	.word	0x08011af8
 8005d3c:	08011b44 	.word	0x08011b44
 8005d40:	08011b60 	.word	0x08011b60
 8005d44:	08011b80 	.word	0x08011b80
 8005d48:	08011bd4 	.word	0x08011bd4
 8005d4c:	08011bf0 	.word	0x08011bf0
    lfs->file_max = lfs->cfg->file_max;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <lfs_init+0x2d6>
        lfs->file_max = LFS_FILE_MAX;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005d68:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d70:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d906      	bls.n	8005d86 <lfs_init+0x2f2>
 8005d78:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <lfs_init+0x380>)
 8005d7a:	4a27      	ldr	r2, [pc, #156]	; (8005e18 <lfs_init+0x384>)
 8005d7c:	f241 0164 	movw	r1, #4196	; 0x1064
 8005d80:	4826      	ldr	r0, [pc, #152]	; (8005e1c <lfs_init+0x388>)
 8005d82:	f00a f9eb 	bl	801015c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d103      	bne.n	8005da0 <lfs_init+0x30c>
        lfs->attr_max = LFS_ATTR_MAX;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005d9e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d906      	bls.n	8005dbe <lfs_init+0x32a>
 8005db0:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <lfs_init+0x38c>)
 8005db2:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <lfs_init+0x384>)
 8005db4:	f241 016a 	movw	r1, #4202	; 0x106a
 8005db8:	4818      	ldr	r0, [pc, #96]	; (8005e1c <lfs_init+0x388>)
 8005dba:	f00a f9cf 	bl	801015c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dc4:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dcc:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	333c      	adds	r3, #60	; 0x3c
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3330      	adds	r3, #48	; 0x30
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	605a      	str	r2, [r3, #4]
 8005df0:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3348      	adds	r3, #72	; 0x48
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	605a      	str	r2, [r3, #4]
 8005dfc:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e003      	b.n	8005e0a <lfs_init+0x376>

cleanup:
    lfs_deinit(lfs);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f80e 	bl	8005e24 <lfs_deinit>
    return err;
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3730      	adds	r7, #48	; 0x30
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	08011c14 	.word	0x08011c14
 8005e18:	080122e8 	.word	0x080122e8
 8005e1c:	08011678 	.word	0x08011678
 8005e20:	08011c30 	.word	0x08011c30

08005e24 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fa fc61 	bl	8000702 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d104      	bne.n	8005e54 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fa fc57 	bl	8000702 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fa fc4d 	bl	8000702 <lfs_free>
    }

    return 0;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b0a0      	sub	sp, #128	; 0x80
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
    int err = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fe05 	bl	8005a94 <lfs_init>
 8005e8a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005e8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <lfs_rawformat+0x22>
            return err;
 8005e92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e94:	e084      	b.n	8005fa0 <lfs_rawformat+0x12c>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	f00a f9e1 	bl	801026a <memset>
        lfs->free.off = 0;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f7fa fb74 	bl	80005ac <lfs_min>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fb fb75 	bl	80015c0 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8005ed6:	f107 030c 	add.w	r3, r7, #12
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fd f9e1 	bl	80032a4 <lfs_dir_alloc>
 8005ee2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005ee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d151      	bne.n	8005f8e <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fb fb08 	bl	8001500 <lfs_fs_disk_version>
 8005ef0:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8005ef2:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ef8:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8005efa:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f00:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8005f02:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8005f08:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8005f0e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8005f14:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8005f16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fb fa66 	bl	80013ec <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <lfs_rawformat+0x134>)
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f24:	2300      	movs	r3, #0
 8005f26:	653b      	str	r3, [r7, #80]	; 0x50
 8005f28:	4b20      	ldr	r3, [pc, #128]	; (8005fac <lfs_rawformat+0x138>)
 8005f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f2c:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <lfs_rawformat+0x13c>)
 8005f2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f30:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <lfs_rawformat+0x140>)
 8005f32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f38:	663b      	str	r3, [r7, #96]	; 0x60
 8005f3a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005f3e:	f107 010c 	add.w	r1, r7, #12
 8005f42:	2303      	movs	r3, #3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fe fb87 	bl	8004658 <lfs_dir_commit>
 8005f4a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8005f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d11f      	bne.n	8005f92 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8005f52:	2300      	movs	r3, #0
 8005f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8005f58:	f107 010c 	add.w	r1, r7, #12
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2200      	movs	r2, #0
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fe fb79 	bl	8004658 <lfs_dir_commit>
 8005f66:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d113      	bne.n	8005f96 <lfs_rawformat+0x122>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8005f6e:	2300      	movs	r3, #0
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f72:	2301      	movs	r3, #1
 8005f74:	633b      	str	r3, [r7, #48]	; 0x30
 8005f76:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005f7a:	f107 030c 	add.w	r3, r7, #12
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fc fdd7 	bl	8002b34 <lfs_dir_fetch>
 8005f86:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	e004      	b.n	8005f98 <lfs_rawformat+0x124>
            goto cleanup;
 8005f8e:	bf00      	nop
 8005f90:	e002      	b.n	8005f98 <lfs_rawformat+0x124>
            goto cleanup;
 8005f92:	bf00      	nop
 8005f94:	e000      	b.n	8005f98 <lfs_rawformat+0x124>
            goto cleanup;
 8005f96:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff ff43 	bl	8005e24 <lfs_deinit>
    return err;
 8005f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3780      	adds	r7, #128	; 0x80
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40100000 	.word	0x40100000
 8005fac:	0ff00008 	.word	0x0ff00008
 8005fb0:	08011c60 	.word	0x08011c60
 8005fb4:	20100018 	.word	0x20100018

08005fb8 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8005fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fba:	b09f      	sub	sp, #124	; 0x7c
 8005fbc:	af04      	add	r7, sp, #16
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff fd65 	bl	8005a94 <lfs_init>
 8005fca:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8005fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <lfs_rawmount+0x1e>
        return err;
 8005fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd4:	e1f5      	b.n	80063c2 <lfs_rawmount+0x40a>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8005fd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fda:	2220      	movs	r2, #32
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f00a f943 	bl	801026a <memset>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8005fe8:	4aa3      	ldr	r2, [pc, #652]	; (8006278 <lfs_rawmount+0x2c0>)
 8005fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ff2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8005ffe:	e17f      	b.n	8006300 <lfs_rawmount+0x348>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006000:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006004:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006008:	3318      	adds	r3, #24
 800600a:	4611      	mov	r1, r2
 800600c:	4618      	mov	r0, r3
 800600e:	f7fa ff6d 	bl	8000eec <lfs_pair_issync>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <lfs_rawmount+0x76>
            LFS_WARN("Cycle detected in tail list");
 8006018:	4b98      	ldr	r3, [pc, #608]	; (800627c <lfs_rawmount+0x2c4>)
 800601a:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 800601e:	4998      	ldr	r1, [pc, #608]	; (8006280 <lfs_rawmount+0x2c8>)
 8006020:	4898      	ldr	r0, [pc, #608]	; (8006284 <lfs_rawmount+0x2cc>)
 8006022:	f00a fcfb 	bl	8010a1c <iprintf>
            err = LFS_ERR_CORRUPT;
 8006026:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800602a:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 800602c:	e1c5      	b.n	80063ba <lfs_rawmount+0x402>
        }
        if (tortoise_i == tortoise_period) {
 800602e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006032:	429a      	cmp	r2, r3
 8006034:	d108      	bne.n	8006048 <lfs_rawmount+0x90>
            tortoise[0] = dir.tail[0];
 8006036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 800603a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603c:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 8006042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 8006048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800604a:	3301      	adds	r3, #1
 800604c:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	4b8d      	ldr	r3, [pc, #564]	; (8006288 <lfs_rawmount+0x2d0>)
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
 8006056:	2308      	movs	r3, #8
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800605a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800605e:	f103 0218 	add.w	r2, r3, #24
 8006062:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006066:	f107 0320 	add.w	r3, r7, #32
 800606a:	9303      	str	r3, [sp, #12]
 800606c:	4b87      	ldr	r3, [pc, #540]	; (800628c <lfs_rawmount+0x2d4>)
 800606e:	9302      	str	r3, [sp, #8]
 8006070:	2300      	movs	r3, #0
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	4b86      	ldr	r3, [pc, #536]	; (8006290 <lfs_rawmount+0x2d8>)
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	4b86      	ldr	r3, [pc, #536]	; (8006294 <lfs_rawmount+0x2dc>)
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fc f98c 	bl	8002398 <lfs_dir_fetchmatch>
 8006080:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006084:	2b00      	cmp	r3, #0
 8006086:	da02      	bge.n	800608e <lfs_rawmount+0xd6>
            err = tag;
 8006088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800608a:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 800608c:	e195      	b.n	80063ba <lfs_rawmount+0x402>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800608e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8128 	beq.w	80062e6 <lfs_rawmount+0x32e>
 8006096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006098:	4618      	mov	r0, r3
 800609a:	f7fa ff96 	bl	8000fca <lfs_tag_isdelete>
 800609e:	4603      	mov	r3, r0
 80060a0:	f083 0301 	eor.w	r3, r3, #1
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 811d 	beq.w	80062e6 <lfs_rawmount+0x32e>
            // update root
            lfs->root[0] = dir.pair[0];
 80060ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80060b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80060b8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80060bc:	f107 0308 	add.w	r3, r7, #8
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	4b75      	ldr	r3, [pc, #468]	; (8006298 <lfs_rawmount+0x2e0>)
 80060c4:	4a73      	ldr	r2, [pc, #460]	; (8006294 <lfs_rawmount+0x2dc>)
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fb fc34 	bl	8001934 <lfs_dir_get>
 80060cc:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80060ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da02      	bge.n	80060da <lfs_rawmount+0x122>
                err = tag;
 80060d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060d6:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80060d8:	e16f      	b.n	80063ba <lfs_rawmount+0x402>
            }
            lfs_superblock_fromle32(&superblock);
 80060da:	f107 0308 	add.w	r3, r7, #8
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fb f94c 	bl	800137c <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	0c1b      	lsrs	r3, r3, #16
 80060e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fb fa12 	bl	800151c <lfs_fs_disk_version_major>
 80060f8:	4603      	mov	r3, r0
 80060fa:	461a      	mov	r2, r3
 80060fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <lfs_rawmount+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7fb fa17 	bl	8001538 <lfs_fs_disk_version_minor>
 800610a:	4603      	mov	r3, r0
 800610c:	461a      	mov	r2, r3
 800610e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006112:	4293      	cmp	r3, r2
 8006114:	d91d      	bls.n	8006152 <lfs_rawmount+0x19a>
                LFS_ERROR("Invalid version "
 8006116:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 800611a:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fb f9fc 	bl	800151c <lfs_fs_disk_version_major>
 8006124:	4603      	mov	r3, r0
 8006126:	461e      	mov	r6, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fb fa05 	bl	8001538 <lfs_fs_disk_version_minor>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	4b52      	ldr	r3, [pc, #328]	; (800627c <lfs_rawmount+0x2c4>)
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	9202      	str	r2, [sp, #8]
 8006138:	9601      	str	r6, [sp, #4]
 800613a:	9400      	str	r4, [sp, #0]
 800613c:	462b      	mov	r3, r5
 800613e:	f241 120e 	movw	r2, #4366	; 0x110e
 8006142:	494f      	ldr	r1, [pc, #316]	; (8006280 <lfs_rawmount+0x2c8>)
 8006144:	4855      	ldr	r0, [pc, #340]	; (800629c <lfs_rawmount+0x2e4>)
 8006146:	f00a fc69 	bl	8010a1c <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 800614a:	f06f 0315 	mvn.w	r3, #21
 800614e:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006150:	e0c8      	b.n	80062e4 <lfs_rawmount+0x32c>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fb f9f0 	bl	8001538 <lfs_fs_disk_version_minor>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006160:	4293      	cmp	r3, r2
 8006162:	d21d      	bcs.n	80061a0 <lfs_rawmount+0x1e8>
                LFS_DEBUG("Found older minor version "
 8006164:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8006168:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fb f9d5 	bl	800151c <lfs_fs_disk_version_major>
 8006172:	4603      	mov	r3, r0
 8006174:	461e      	mov	r6, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fb f9de 	bl	8001538 <lfs_fs_disk_version_minor>
 800617c:	4603      	mov	r3, r0
 800617e:	461a      	mov	r2, r3
 8006180:	4b3e      	ldr	r3, [pc, #248]	; (800627c <lfs_rawmount+0x2c4>)
 8006182:	9303      	str	r3, [sp, #12]
 8006184:	9202      	str	r2, [sp, #8]
 8006186:	9601      	str	r6, [sp, #4]
 8006188:	9400      	str	r4, [sp, #0]
 800618a:	462b      	mov	r3, r5
 800618c:	f241 121c 	movw	r2, #4380	; 0x111c
 8006190:	493b      	ldr	r1, [pc, #236]	; (8006280 <lfs_rawmount+0x2c8>)
 8006192:	4843      	ldr	r0, [pc, #268]	; (80062a0 <lfs_rawmount+0x2e8>)
 8006194:	f00a fc42 	bl	8010a1c <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8006198:	2101      	movs	r1, #1
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fbae 	bl	80068fc <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d018      	beq.n	80061d8 <lfs_rawmount+0x220>
                if (superblock.name_max > lfs->name_max) {
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d910      	bls.n	80061d2 <lfs_rawmount+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b6:	4931      	ldr	r1, [pc, #196]	; (800627c <lfs_rawmount+0x2c4>)
 80061b8:	9101      	str	r1, [sp, #4]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	f241 122a 	movw	r2, #4394	; 0x112a
 80061c2:	492f      	ldr	r1, [pc, #188]	; (8006280 <lfs_rawmount+0x2c8>)
 80061c4:	4837      	ldr	r0, [pc, #220]	; (80062a4 <lfs_rawmount+0x2ec>)
 80061c6:	f00a fc29 	bl	8010a1c <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 80061ca:	f06f 0315 	mvn.w	r3, #21
 80061ce:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80061d0:	e088      	b.n	80062e4 <lfs_rawmount+0x32c>
                }

                lfs->name_max = superblock.name_max;
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d018      	beq.n	8006210 <lfs_rawmount+0x258>
                if (superblock.file_max > lfs->file_max) {
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d910      	bls.n	800620a <lfs_rawmount+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	4923      	ldr	r1, [pc, #140]	; (800627c <lfs_rawmount+0x2c4>)
 80061f0:	9101      	str	r1, [sp, #4]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	f241 1235 	movw	r2, #4405	; 0x1135
 80061fa:	4921      	ldr	r1, [pc, #132]	; (8006280 <lfs_rawmount+0x2c8>)
 80061fc:	482a      	ldr	r0, [pc, #168]	; (80062a8 <lfs_rawmount+0x2f0>)
 80061fe:	f00a fc0d 	bl	8010a1c <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006202:	f06f 0315 	mvn.w	r3, #21
 8006206:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006208:	e06c      	b.n	80062e4 <lfs_rawmount+0x32c>
                }

                lfs->file_max = superblock.file_max;
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <lfs_rawmount+0x290>
                if (superblock.attr_max > lfs->attr_max) {
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621c:	429a      	cmp	r2, r3
 800621e:	d910      	bls.n	8006242 <lfs_rawmount+0x28a>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006226:	4915      	ldr	r1, [pc, #84]	; (800627c <lfs_rawmount+0x2c4>)
 8006228:	9101      	str	r1, [sp, #4]
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	f44f 528a 	mov.w	r2, #4416	; 0x1140
 8006232:	4913      	ldr	r1, [pc, #76]	; (8006280 <lfs_rawmount+0x2c8>)
 8006234:	481d      	ldr	r0, [pc, #116]	; (80062ac <lfs_rawmount+0x2f4>)
 8006236:	f00a fbf1 	bl	8010a1c <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800623a:	f06f 0315 	mvn.w	r3, #21
 800623e:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006240:	e050      	b.n	80062e4 <lfs_rawmount+0x32c>
                }

                lfs->attr_max = superblock.attr_max;
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	429a      	cmp	r2, r3
 8006252:	d02f      	beq.n	80062b4 <lfs_rawmount+0x2fc>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	4907      	ldr	r1, [pc, #28]	; (800627c <lfs_rawmount+0x2c4>)
 800625e:	9101      	str	r1, [sp, #4]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	4613      	mov	r3, r2
 8006264:	f241 124a 	movw	r2, #4426	; 0x114a
 8006268:	4905      	ldr	r1, [pc, #20]	; (8006280 <lfs_rawmount+0x2c8>)
 800626a:	4811      	ldr	r0, [pc, #68]	; (80062b0 <lfs_rawmount+0x2f8>)
 800626c:	f00a fbd6 	bl	8010a1c <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006270:	f06f 0315 	mvn.w	r3, #21
 8006274:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006276:	e035      	b.n	80062e4 <lfs_rawmount+0x32c>
 8006278:	080117b0 	.word	0x080117b0
 800627c:	0801176c 	.word	0x0801176c
 8006280:	08011678 	.word	0x08011678
 8006284:	08011c6c 	.word	0x08011c6c
 8006288:	08011c60 	.word	0x08011c60
 800628c:	08002bd1 	.word	0x08002bd1
 8006290:	0ff00008 	.word	0x0ff00008
 8006294:	7ffffc00 	.word	0x7ffffc00
 8006298:	20100018 	.word	0x20100018
 800629c:	08011c98 	.word	0x08011c98
 80062a0:	08011cd0 	.word	0x08011cd0
 80062a4:	08011d10 	.word	0x08011d10
 80062a8:	08011d44 	.word	0x08011d44
 80062ac:	08011d78 	.word	0x08011d78
 80062b0:	08011dac 	.word	0x08011dac
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d012      	beq.n	80062e6 <lfs_rawmount+0x32e>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4940      	ldr	r1, [pc, #256]	; (80063cc <lfs_rawmount+0x414>)
 80062ca:	9101      	str	r1, [sp, #4]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	4613      	mov	r3, r2
 80062d0:	f241 1251 	movw	r2, #4433	; 0x1151
 80062d4:	493e      	ldr	r1, [pc, #248]	; (80063d0 <lfs_rawmount+0x418>)
 80062d6:	483f      	ldr	r0, [pc, #252]	; (80063d4 <lfs_rawmount+0x41c>)
 80062d8:	f00a fba0 	bl	8010a1c <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80062dc:	f06f 0315 	mvn.w	r3, #21
 80062e0:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80062e2:	bf00      	nop
            goto cleanup;
 80062e4:	e069      	b.n	80063ba <lfs_rawmount+0x402>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc fc3a 	bl	8002b6c <lfs_dir_getgstate>
 80062f8:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 80062fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d15b      	bne.n	80063b8 <lfs_rawmount+0x400>
    while (!lfs_pair_isnull(dir.tail)) {
 8006300:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006304:	3318      	adds	r3, #24
 8006306:	4618      	mov	r0, r3
 8006308:	f7fa fdab 	bl	8000e62 <lfs_pair_isnull>
 800630c:	4603      	mov	r3, r0
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	f47f ae73 	bne.w	8006000 <lfs_rawmount+0x48>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3320      	adds	r3, #32
 800631e:	4618      	mov	r0, r3
 8006320:	f7fa fd9f 	bl	8000e62 <lfs_pair_isnull>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <lfs_rawmount+0x37a>
        err = LFS_ERR_INVAL;
 800632a:	f06f 0315 	mvn.w	r3, #21
 800632e:	667b      	str	r3, [r7, #100]	; 0x64
        goto cleanup;
 8006330:	e043      	b.n	80063ba <lfs_rawmount+0x402>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3330      	adds	r3, #48	; 0x30
 8006336:	4618      	mov	r0, r3
 8006338:	f7fa fefa 	bl	8001130 <lfs_gstate_iszero>
 800633c:	4603      	mov	r3, r0
 800633e:	f083 0301 	eor.w	r3, r3, #1
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d010      	beq.n	800636a <lfs_rawmount+0x3b2>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006354:	481d      	ldr	r0, [pc, #116]	; (80063cc <lfs_rawmount+0x414>)
 8006356:	9002      	str	r0, [sp, #8]
 8006358:	9201      	str	r2, [sp, #4]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	460b      	mov	r3, r1
 800635e:	f241 1267 	movw	r2, #4455	; 0x1167
 8006362:	491b      	ldr	r1, [pc, #108]	; (80063d0 <lfs_rawmount+0x418>)
 8006364:	481c      	ldr	r0, [pc, #112]	; (80063d8 <lfs_rawmount+0x420>)
 8006366:	f00a fb59 	bl	8010a1c <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	4618      	mov	r0, r3
 8006370:	f7fa fe1d 	bl	8000fae <lfs_tag_isvalid>
 8006374:	4603      	mov	r3, r0
 8006376:	f083 0301 	eor.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	441a      	add	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	333c      	adds	r3, #60	; 0x3c
 800638e:	3230      	adds	r2, #48	; 0x30
 8006390:	ca07      	ldmia	r2, {r0, r1, r2}
 8006392:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800639e:	6a12      	ldr	r2, [r2, #32]
 80063a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063a4:	fb01 f202 	mul.w	r2, r1, r2
 80063a8:	1a9a      	subs	r2, r3, r2
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fb f915 	bl	80015de <lfs_alloc_drop>

    return 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e004      	b.n	80063c2 <lfs_rawmount+0x40a>
            goto cleanup;
 80063b8:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f80e 	bl	80063dc <lfs_rawunmount>
    return err;
 80063c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	376c      	adds	r7, #108	; 0x6c
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ca:	bf00      	nop
 80063cc:	0801176c 	.word	0x0801176c
 80063d0:	08011678 	.word	0x08011678
 80063d4:	08011de0 	.word	0x08011de0
 80063d8:	08011e10 	.word	0x08011e10

080063dc <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff fd1d 	bl	8005e24 <lfs_deinit>
 80063ea:	4603      	mov	r3, r0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b0a1      	sub	sp, #132	; 0x84
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006406:	2220      	movs	r2, #32
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f009 ff2d 	bl	801026a <memset>
 8006410:	2301      	movs	r3, #1
 8006412:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006414:	4a9a      	ldr	r2, [pc, #616]	; (8006680 <lfs_fs_rawtraverse+0x28c>)
 8006416:	f107 031c 	add.w	r3, r7, #28
 800641a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800641e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006422:	2301      	movs	r3, #1
 8006424:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8006426:	2301      	movs	r3, #1
 8006428:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 800642a:	e0c0      	b.n	80065ae <lfs_fs_rawtraverse+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 800642c:	f107 021c 	add.w	r2, r7, #28
 8006430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006434:	3318      	adds	r3, #24
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f7fa fd57 	bl	8000eec <lfs_pair_issync>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 8006444:	4b8f      	ldr	r3, [pc, #572]	; (8006684 <lfs_fs_rawtraverse+0x290>)
 8006446:	f241 12be 	movw	r2, #4542	; 0x11be
 800644a:	498f      	ldr	r1, [pc, #572]	; (8006688 <lfs_fs_rawtraverse+0x294>)
 800644c:	488f      	ldr	r0, [pc, #572]	; (800668c <lfs_fs_rawtraverse+0x298>)
 800644e:	f00a fae5 	bl	8010a1c <iprintf>
            return LFS_ERR_CORRUPT;
 8006452:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006456:	e10f      	b.n	8006678 <lfs_fs_rawtraverse+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8006458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800645a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800645c:	429a      	cmp	r2, r3
 800645e:	d108      	bne.n	8006472 <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8006464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006466:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 800646c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8006472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006474:	3301      	adds	r3, #1
 8006476:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8006478:	2300      	movs	r3, #0
 800647a:	667b      	str	r3, [r7, #100]	; 0x64
 800647c:	e013      	b.n	80064a6 <lfs_fs_rawtraverse+0xb2>
            int err = cb(data, dir.tail[i]);
 800647e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006480:	3306      	adds	r3, #6
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	3370      	adds	r3, #112	; 0x70
 8006486:	443b      	add	r3, r7
 8006488:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4611      	mov	r1, r2
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	4798      	blx	r3
 8006494:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8006496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <lfs_fs_rawtraverse+0xac>
                return err;
 800649c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649e:	e0eb      	b.n	8006678 <lfs_fs_rawtraverse+0x284>
        for (int i = 0; i < 2; i++) {
 80064a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a2:	3301      	adds	r3, #1
 80064a4:	667b      	str	r3, [r7, #100]	; 0x64
 80064a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	dde8      	ble.n	800647e <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80064ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b0:	f103 0218 	add.w	r2, r3, #24
 80064b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b8:	4619      	mov	r1, r3
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7fc fb3a 	bl	8002b34 <lfs_dir_fetch>
 80064c0:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 80064c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <lfs_fs_rawtraverse+0xd8>
            return err;
 80064c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ca:	e0d5      	b.n	8006678 <lfs_fs_rawtraverse+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80064cc:	2300      	movs	r3, #0
 80064ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80064d2:	e067      	b.n	80065a4 <lfs_fs_rawtraverse+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80064d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80064d8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80064da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064de:	f043 0308 	orr.w	r3, r3, #8
 80064e2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80064e6:	f107 0214 	add.w	r2, r7, #20
 80064ea:	9200      	str	r2, [sp, #0]
 80064ec:	4a68      	ldr	r2, [pc, #416]	; (8006690 <lfs_fs_rawtraverse+0x29c>)
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7fb fa20 	bl	8001934 <lfs_dir_get>
 80064f4:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 80064f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da05      	bge.n	8006508 <lfs_fs_rawtraverse+0x114>
                if (tag == LFS_ERR_NOENT) {
 80064fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fe:	f113 0f02 	cmn.w	r3, #2
 8006502:	d049      	beq.n	8006598 <lfs_fs_rawtraverse+0x1a4>
                    continue;
                }
                return tag;
 8006504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006506:	e0b7      	b.n	8006678 <lfs_fs_rawtraverse+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8006508:	f107 0314 	add.w	r3, r7, #20
 800650c:	4618      	mov	r0, r3
 800650e:	f7fa ff05 	bl	800131c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006514:	4618      	mov	r0, r3
 8006516:	f7fa fd8b 	bl	8001030 <lfs_tag_type3>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	f240 2302 	movw	r3, #514	; 0x202
 8006522:	429a      	cmp	r2, r3
 8006524:	d113      	bne.n	800654e <lfs_fs_rawtraverse+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006526:	68f9      	ldr	r1, [r7, #12]
 8006528:	6978      	ldr	r0, [r7, #20]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	9202      	str	r2, [sp, #8]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	9201      	str	r2, [sp, #4]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4603      	mov	r3, r0
 8006538:	460a      	mov	r2, r1
 800653a:	2100      	movs	r1, #0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7fe fa5b 	bl	80049f8 <lfs_ctz_traverse>
 8006542:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8006544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d027      	beq.n	800659a <lfs_fs_rawtraverse+0x1a6>
                    return err;
 800654a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654c:	e094      	b.n	8006678 <lfs_fs_rawtraverse+0x284>
                }
            } else if (includeorphans &&
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d022      	beq.n	800659a <lfs_fs_rawtraverse+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8006554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006556:	4618      	mov	r0, r3
 8006558:	f7fa fd6a 	bl	8001030 <lfs_tag_type3>
 800655c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800655e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006562:	d11a      	bne.n	800659a <lfs_fs_rawtraverse+0x1a6>
                for (int i = 0; i < 2; i++) {
 8006564:	2300      	movs	r3, #0
 8006566:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006568:	e012      	b.n	8006590 <lfs_fs_rawtraverse+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 800656a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	f107 0214 	add.w	r2, r7, #20
 8006572:	4413      	add	r3, r2
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4611      	mov	r1, r2
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4798      	blx	r3
 800657e:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <lfs_fs_rawtraverse+0x196>
                        return err;
 8006586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006588:	e076      	b.n	8006678 <lfs_fs_rawtraverse+0x284>
                for (int i = 0; i < 2; i++) {
 800658a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800658c:	3301      	adds	r3, #1
 800658e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006592:	2b01      	cmp	r3, #1
 8006594:	dde9      	ble.n	800656a <lfs_fs_rawtraverse+0x176>
 8006596:	e000      	b.n	800659a <lfs_fs_rawtraverse+0x1a6>
                    continue;
 8006598:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800659a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800659e:	3301      	adds	r3, #1
 80065a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80065a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065a6:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d392      	bcc.n	80064d4 <lfs_fs_rawtraverse+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 80065ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b2:	3318      	adds	r3, #24
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fa fc54 	bl	8000e62 <lfs_pair_isnull>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f083 0301 	eor.w	r3, r3, #1
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f47f af32 	bne.w	800642c <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065ce:	e04f      	b.n	8006670 <lfs_fs_rawtraverse+0x27c>
        if (f->type != LFS_TYPE_REG) {
 80065d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065d2:	799b      	ldrb	r3, [r3, #6]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d147      	bne.n	8006668 <lfs_fs_rawtraverse+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80065d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01d      	beq.n	8006620 <lfs_fs_rawtraverse+0x22c>
 80065e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d117      	bne.n	8006620 <lfs_fs_rawtraverse+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80065f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065f2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065fa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80065fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	9202      	str	r2, [sp, #8]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	9201      	str	r2, [sp, #4]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	4623      	mov	r3, r4
 800660c:	4602      	mov	r2, r0
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f7fe f9f2 	bl	80049f8 <lfs_ctz_traverse>
 8006614:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <lfs_fs_rawtraverse+0x22c>
                return err;
 800661c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661e:	e02b      	b.n	8006678 <lfs_fs_rawtraverse+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01e      	beq.n	800666a <lfs_fs_rawtraverse+0x276>
 800662c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d118      	bne.n	800666a <lfs_fs_rawtraverse+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800663a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006642:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	9202      	str	r2, [sp, #8]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	9201      	str	r2, [sp, #4]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	4623      	mov	r3, r4
 8006654:	4602      	mov	r2, r0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7fe f9ce 	bl	80049f8 <lfs_ctz_traverse>
 800665c:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 800665e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <lfs_fs_rawtraverse+0x276>
                return err;
 8006664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006666:	e007      	b.n	8006678 <lfs_fs_rawtraverse+0x284>
            continue;
 8006668:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800666a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ac      	bne.n	80065d0 <lfs_fs_rawtraverse+0x1dc>
            }
        }
    }
#endif

    return 0;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3774      	adds	r7, #116	; 0x74
 800667c:	46bd      	mov	sp, r7
 800667e:	bd90      	pop	{r4, r7, pc}
 8006680:	080117b0 	.word	0x080117b0
 8006684:	0801176c 	.word	0x0801176c
 8006688:	08011678 	.word	0x08011678
 800668c:	08011c6c 	.word	0x08011c6c
 8006690:	700ffc00 	.word	0x700ffc00

08006694 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80066ac:	4a2d      	ldr	r2, [pc, #180]	; (8006764 <lfs_fs_pred+0xd0>)
 80066ae:	f107 0314 	add.w	r3, r7, #20
 80066b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066b6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80066ba:	2301      	movs	r3, #1
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 80066be:	2301      	movs	r3, #1
 80066c0:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 80066c2:	e03e      	b.n	8006742 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	3318      	adds	r3, #24
 80066c8:	f107 0214 	add.w	r2, r7, #20
 80066cc:	4611      	mov	r1, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fa fc0c 	bl	8000eec <lfs_pair_issync>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 80066da:	4b23      	ldr	r3, [pc, #140]	; (8006768 <lfs_fs_pred+0xd4>)
 80066dc:	f241 221c 	movw	r2, #4636	; 0x121c
 80066e0:	4922      	ldr	r1, [pc, #136]	; (800676c <lfs_fs_pred+0xd8>)
 80066e2:	4823      	ldr	r0, [pc, #140]	; (8006770 <lfs_fs_pred+0xdc>)
 80066e4:	f00a f99a 	bl	8010a1c <iprintf>
            return LFS_ERR_CORRUPT;
 80066e8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80066ec:	e036      	b.n	800675c <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 80066ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d10a      	bne.n	800670c <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	3301      	adds	r3, #1
 8006710:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3318      	adds	r3, #24
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	4618      	mov	r0, r3
 800671a:	f7fa fbbd 	bl	8000e98 <lfs_pair_cmp>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <lfs_fs_pred+0x94>
            return 0;
 8006724:	2300      	movs	r3, #0
 8006726:	e019      	b.n	800675c <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3318      	adds	r3, #24
 800672c:	461a      	mov	r2, r3
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7fc f9ff 	bl	8002b34 <lfs_dir_fetch>
 8006736:	61f8      	str	r0, [r7, #28]
        if (err) {
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <lfs_fs_pred+0xae>
            return err;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	e00c      	b.n	800675c <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3318      	adds	r3, #24
 8006746:	4618      	mov	r0, r3
 8006748:	f7fa fb8b 	bl	8000e62 <lfs_pair_isnull>
 800674c:	4603      	mov	r3, r0
 800674e:	f083 0301 	eor.w	r3, r3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1b5      	bne.n	80066c4 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006758:	f06f 0301 	mvn.w	r3, #1
}
 800675c:	4618      	mov	r0, r3
 800675e:	3728      	adds	r7, #40	; 0x28
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	080117b0 	.word	0x080117b0
 8006768:	0801176c 	.word	0x0801176c
 800676c:	08011678 	.word	0x08011678
 8006770:	08011c6c 	.word	0x08011c6c

08006774 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006774:	b5b0      	push	{r4, r5, r7, lr}
 8006776:	b08e      	sub	sp, #56	; 0x38
 8006778:	af04      	add	r7, sp, #16
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006794:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800679a:	69dd      	ldr	r5, [r3, #28]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	6852      	ldr	r2, [r2, #4]
 80067a4:	2108      	movs	r1, #8
 80067a6:	9103      	str	r1, [sp, #12]
 80067a8:	f107 0110 	add.w	r1, r7, #16
 80067ac:	9102      	str	r1, [sp, #8]
 80067ae:	9201      	str	r2, [sp, #4]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462b      	mov	r3, r5
 80067b4:	4622      	mov	r2, r4
 80067b6:	4601      	mov	r1, r0
 80067b8:	6a38      	ldr	r0, [r7, #32]
 80067ba:	f7f9 ffd3 	bl	8000764 <lfs_bd_read>
 80067be:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <lfs_fs_parent_match+0x56>
        return err;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	e012      	b.n	80067f0 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 80067ca:	f107 0310 	add.w	r3, r7, #16
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fa fbb9 	bl	8000f46 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	1d1a      	adds	r2, r3, #4
 80067d8:	f107 0310 	add.w	r3, r7, #16
 80067dc:	4611      	mov	r1, r2
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fa fb5a 	bl	8000e98 <lfs_pair_cmp>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bf14      	ite	ne
 80067ea:	2301      	movne	r3, #1
 80067ec:	2300      	moveq	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3728      	adds	r7, #40	; 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bdb0      	pop	{r4, r5, r7, pc}

080067f8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b090      	sub	sp, #64	; 0x40
 80067fc:	af04      	add	r7, sp, #16
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006810:	4a33      	ldr	r2, [pc, #204]	; (80068e0 <lfs_fs_parent+0xe8>)
 8006812:	f107 031c 	add.w	r3, r7, #28
 8006816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800681a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800681e:	2301      	movs	r3, #1
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8006822:	2301      	movs	r3, #1
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8006826:	e049      	b.n	80068bc <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3318      	adds	r3, #24
 800682c:	f107 021c 	add.w	r2, r7, #28
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f7fa fb5a 	bl	8000eec <lfs_pair_issync>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <lfs_fs_parent+0xec>)
 8006840:	f241 225d 	movw	r2, #4701	; 0x125d
 8006844:	4928      	ldr	r1, [pc, #160]	; (80068e8 <lfs_fs_parent+0xf0>)
 8006846:	4829      	ldr	r0, [pc, #164]	; (80068ec <lfs_fs_parent+0xf4>)
 8006848:	f00a f8e8 	bl	8010a1c <iprintf>
            return LFS_ERR_CORRUPT;
 800684c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006850:	e041      	b.n	80068d6 <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 8006852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	429a      	cmp	r2, r3
 8006858:	d10a      	bne.n	8006870 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	3301      	adds	r3, #1
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800688c:	f107 0310 	add.w	r3, r7, #16
 8006890:	9303      	str	r3, [sp, #12]
 8006892:	4b17      	ldr	r3, [pc, #92]	; (80068f0 <lfs_fs_parent+0xf8>)
 8006894:	9302      	str	r3, [sp, #8]
 8006896:	2300      	movs	r3, #0
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <lfs_fs_parent+0xfc>)
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4b16      	ldr	r3, [pc, #88]	; (80068f8 <lfs_fs_parent+0x100>)
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7fb fd78 	bl	8002398 <lfs_dir_fetchmatch>
 80068a8:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <lfs_fs_parent+0xc4>
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	f113 0f02 	cmn.w	r3, #2
 80068b6:	d001      	beq.n	80068bc <lfs_fs_parent+0xc4>
            return tag;
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	e00c      	b.n	80068d6 <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3318      	adds	r3, #24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7fa face 	bl	8000e62 <lfs_pair_isnull>
 80068c6:	4603      	mov	r3, r0
 80068c8:	f083 0301 	eor.w	r3, r3, #1
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1aa      	bne.n	8006828 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 80068d2:	f06f 0301 	mvn.w	r3, #1
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3730      	adds	r7, #48	; 0x30
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	080117b0 	.word	0x080117b0
 80068e4:	0801176c 	.word	0x0801176c
 80068e8:	08011678 	.word	0x08011678
 80068ec:	08011c6c 	.word	0x08011c6c
 80068f0:	08006775 	.word	0x08006775
 80068f4:	20000008 	.word	0x20000008
 80068f8:	7ff003ff 	.word	0x7ff003ff

080068fc <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	025b      	lsls	r3, r3, #9
 8006914:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	631a      	str	r2, [r3, #48]	; 0x30
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006938:	4618      	mov	r0, r3
 800693a:	f7fa fbb3 	bl	80010a4 <lfs_tag_size>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <lfs_fs_preporphans+0x32>
 8006944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006948:	2b00      	cmp	r3, #0
 800694a:	da06      	bge.n	800695a <lfs_fs_preporphans+0x32>
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <lfs_fs_preporphans+0x90>)
 800694e:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <lfs_fs_preporphans+0x94>)
 8006950:	f241 217e 	movw	r1, #4734	; 0x127e
 8006954:	481a      	ldr	r0, [pc, #104]	; (80069c0 <lfs_fs_preporphans+0x98>)
 8006956:	f009 fc01 	bl	801015c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	4618      	mov	r0, r3
 8006960:	f7fa fba0 	bl	80010a4 <lfs_tag_size>
 8006964:	4603      	mov	r3, r0
 8006966:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800696a:	d90a      	bls.n	8006982 <lfs_fs_preporphans+0x5a>
 800696c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006970:	2b00      	cmp	r3, #0
 8006972:	dd06      	ble.n	8006982 <lfs_fs_preporphans+0x5a>
 8006974:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <lfs_fs_preporphans+0x9c>)
 8006976:	4a11      	ldr	r2, [pc, #68]	; (80069bc <lfs_fs_preporphans+0x94>)
 8006978:	f241 217f 	movw	r1, #4735	; 0x127f
 800697c:	4810      	ldr	r0, [pc, #64]	; (80069c0 <lfs_fs_preporphans+0x98>)
 800697e:	f009 fbed 	bl	801015c <__assert_func>
    lfs->gstate.tag += orphans;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800698a:	441a      	add	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3330      	adds	r3, #48	; 0x30
 800699c:	4618      	mov	r0, r3
 800699e:	f7fa fbe4 	bl	800116a <lfs_gstate_hasorphans>
 80069a2:	4603      	mov	r3, r0
 80069a4:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80069a6:	ea44 0203 	orr.w	r2, r4, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd90      	pop	{r4, r7, pc}
 80069b8:	08011e48 	.word	0x08011e48
 80069bc:	080122f4 	.word	0x080122f4
 80069c0:	08011678 	.word	0x08011678
 80069c4:	08011e80 	.word	0x08011e80

080069c8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	460b      	mov	r3, r1
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <lfs_fs_prepmove+0x70>)
 80069dc:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 80069de:	897b      	ldrh	r3, [r7, #10]
 80069e0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80069e4:	428b      	cmp	r3, r1
 80069e6:	d006      	beq.n	80069f6 <lfs_fs_prepmove+0x2e>
 80069e8:	897b      	ldrh	r3, [r7, #10]
 80069ea:	029b      	lsls	r3, r3, #10
 80069ec:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80069f0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80069f4:	e000      	b.n	80069f8 <lfs_fs_prepmove+0x30>
 80069f6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80069f8:	431a      	orrs	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80069fe:	897b      	ldrh	r3, [r7, #10]
 8006a00:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d002      	beq.n	8006a0e <lfs_fs_prepmove+0x46>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	e000      	b.n	8006a10 <lfs_fs_prepmove+0x48>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006a14:	897b      	ldrh	r3, [r7, #10]
 8006a16:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <lfs_fs_prepmove+0x5e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3304      	adds	r3, #4
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	e000      	b.n	8006a28 <lfs_fs_prepmove+0x60>
 8006a26:	2300      	movs	r3, #0
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	800003ff 	.word	0x800003ff

08006a3c <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b098      	sub	sp, #96	; 0x60
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3330      	adds	r3, #48	; 0x30
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fa fbc3 	bl	80011d4 <lfs_gstate_needssuperblock>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f083 0301 	eor.w	r3, r3, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <lfs_fs_desuperblock+0x22>
        return 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e04f      	b.n	8006afe <lfs_fs_desuperblock+0xc2>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1a      	ldr	r2, [r3, #32]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	4928      	ldr	r1, [pc, #160]	; (8006b08 <lfs_fs_desuperblock+0xcc>)
 8006a68:	9101      	str	r1, [sp, #4]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	f241 2298 	movw	r2, #4760	; 0x1298
 8006a72:	4926      	ldr	r1, [pc, #152]	; (8006b0c <lfs_fs_desuperblock+0xd0>)
 8006a74:	4826      	ldr	r0, [pc, #152]	; (8006b10 <lfs_fs_desuperblock+0xd4>)
 8006a76:	f009 ffd1 	bl	8010a1c <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f103 0220 	add.w	r2, r3, #32
 8006a80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fc f854 	bl	8002b34 <lfs_dir_fetch>
 8006a8c:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8006a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <lfs_fs_desuperblock+0x5c>
        return err;
 8006a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a96:	e032      	b.n	8006afe <lfs_fs_desuperblock+0xc2>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7fa fd31 	bl	8001500 <lfs_fs_disk_version>
 8006a9e:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8006aa0:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa6:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8006aa8:	623b      	str	r3, [r7, #32]
        .block_count = lfs->cfg->block_count,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aae:	6a1b      	ldr	r3, [r3, #32]
    lfs_superblock_t superblock = {
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8006ac2:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8006ac4:	f107 031c 	add.w	r3, r7, #28
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fa fc8f 	bl	80013ec <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006ace:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <lfs_fs_desuperblock+0xd8>)
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	f107 031c 	add.w	r3, r7, #28
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	f107 0214 	add.w	r2, r7, #20
 8006adc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7fd fdb8 	bl	8004658 <lfs_dir_commit>
 8006ae8:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8006aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <lfs_fs_desuperblock+0xb8>
        return err;
 8006af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af2:	e004      	b.n	8006afe <lfs_fs_desuperblock+0xc2>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8006af4:	2100      	movs	r1, #0
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ff00 	bl	80068fc <lfs_fs_prepsuperblock>
    return 0;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3758      	adds	r7, #88	; 0x58
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	0801176c 	.word	0x0801176c
 8006b0c:	08011678 	.word	0x08011678
 8006b10:	08011eb8 	.word	0x08011eb8
 8006b14:	20100018 	.word	0x20100018

08006b18 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006b18:	b5b0      	push	{r4, r5, r7, lr}
 8006b1a:	b094      	sub	sp, #80	; 0x50
 8006b1c:	af04      	add	r7, sp, #16
 8006b1e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	333c      	adds	r3, #60	; 0x3c
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fa fb42 	bl	80011ae <lfs_gstate_hasmove>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f083 0301 	eor.w	r3, r3, #1
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <lfs_fs_demove+0x22>
        return 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e05b      	b.n	8006bf2 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fa fa9c 	bl	8001084 <lfs_tag_id>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4b2a      	ldr	r3, [pc, #168]	; (8006bfc <lfs_fs_demove+0xe4>)
 8006b52:	9302      	str	r3, [sp, #8]
 8006b54:	9201      	str	r2, [sp, #4]
 8006b56:	9400      	str	r4, [sp, #0]
 8006b58:	462b      	mov	r3, r5
 8006b5a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8006b5e:	4928      	ldr	r1, [pc, #160]	; (8006c00 <lfs_fs_demove+0xe8>)
 8006b60:	4828      	ldr	r0, [pc, #160]	; (8006c04 <lfs_fs_demove+0xec>)
 8006b62:	f009 ff5b 	bl	8010a1c <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fa fa60 	bl	8001030 <lfs_tag_type3>
 8006b70:	4603      	mov	r3, r0
 8006b72:	461a      	mov	r2, r3
 8006b74:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d006      	beq.n	8006b8a <lfs_fs_demove+0x72>
 8006b7c:	4b22      	ldr	r3, [pc, #136]	; (8006c08 <lfs_fs_demove+0xf0>)
 8006b7e:	4a23      	ldr	r2, [pc, #140]	; (8006c0c <lfs_fs_demove+0xf4>)
 8006b80:	f241 21c7 	movw	r1, #4807	; 0x12c7
 8006b84:	481e      	ldr	r0, [pc, #120]	; (8006c00 <lfs_fs_demove+0xe8>)
 8006b86:	f009 fae9 	bl	801015c <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006b90:	f107 0318 	add.w	r3, r7, #24
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fb ffcc 	bl	8002b34 <lfs_dir_fetch>
 8006b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <lfs_fs_demove+0x90>
        return err;
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	e024      	b.n	8006bf2 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fa fa69 	bl	8001084 <lfs_tag_id>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff ff03 	bl	80069c8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006bc2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006bc4:	029b      	lsls	r3, r3, #10
 8006bc6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006bca:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006bce:	613b      	str	r3, [r7, #16]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	f107 0210 	add.w	r2, r7, #16
 8006bd8:	f107 0118 	add.w	r1, r7, #24
 8006bdc:	2301      	movs	r3, #1
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fd fd3a 	bl	8004658 <lfs_dir_commit>
 8006be4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <lfs_fs_demove+0xd8>
        return err;
 8006bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bee:	e000      	b.n	8006bf2 <lfs_fs_demove+0xda>
    }

    return 0;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3740      	adds	r7, #64	; 0x40
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	0801176c 	.word	0x0801176c
 8006c00:	08011678 	.word	0x08011678
 8006c04:	08011eec 	.word	0x08011eec
 8006c08:	08011f20 	.word	0x08011f20
 8006c0c:	08012308 	.word	0x08012308

08006c10 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006c10:	b5b0      	push	{r4, r5, r7, lr}
 8006c12:	b0b2      	sub	sp, #200	; 0xc8
 8006c14:	af04      	add	r7, sp, #16
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3330      	adds	r3, #48	; 0x30
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fa faa2 	bl	800116a <lfs_gstate_hasorphans>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f083 0301 	eor.w	r3, r3, #1
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <lfs_fs_deorphan+0x26>
        return 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e187      	b.n	8006f46 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006c3c:	e170      	b.n	8006f20 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006c3e:	f107 0308 	add.w	r3, r7, #8
 8006c42:	2220      	movs	r2, #32
 8006c44:	2100      	movs	r1, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f009 fb0f 	bl	801026a <memset>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	2301      	movs	r3, #1
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006c5a:	e149      	b.n	8006ef0 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006c5c:	f107 0308 	add.w	r3, r7, #8
 8006c60:	f103 0218 	add.w	r2, r3, #24
 8006c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fb ff62 	bl	8002b34 <lfs_dir_fetch>
 8006c70:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 8006c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <lfs_fs_deorphan+0x72>
                return err;
 8006c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c80:	e161      	b.n	8006f46 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006c82:	7ffb      	ldrb	r3, [r7, #31]
 8006c84:	f083 0301 	eor.w	r3, r3, #1
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8126 	beq.w	8006edc <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006c90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c94:	f107 0308 	add.w	r3, r7, #8
 8006c98:	3318      	adds	r3, #24
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff fdab 	bl	80067f8 <lfs_fs_parent>
 8006ca2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006ca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	da07      	bge.n	8006cbe <lfs_fs_deorphan+0xae>
 8006cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cb2:	f113 0f02 	cmn.w	r3, #2
 8006cb6:	d002      	beq.n	8006cbe <lfs_fs_deorphan+0xae>
                    return tag;
 8006cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cbc:	e143      	b.n	8006f46 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8006cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 80ac 	bne.w	8006e20 <lfs_fs_deorphan+0x210>
 8006cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ccc:	f113 0f02 	cmn.w	r3, #2
 8006cd0:	f000 80a6 	beq.w	8006e20 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006cd4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cd8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006cdc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	4a9a      	ldr	r2, [pc, #616]	; (8006f50 <lfs_fs_deorphan+0x340>)
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fa fe24 	bl	8001934 <lfs_dir_get>
 8006cec:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da02      	bge.n	8006cfe <lfs_fs_deorphan+0xee>
                        return state;
 8006cf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cfc:	e0eb      	b.n	8006ed6 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8006cfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fa f91f 	bl	8000f46 <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8006d08:	f107 0308 	add.w	r3, r7, #8
 8006d0c:	f103 0218 	add.w	r2, r3, #24
 8006d10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006d14:	4611      	mov	r1, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fa f8e8 	bl	8000eec <lfs_pair_issync>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f083 0301 	eor.w	r3, r3, #1
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d07b      	beq.n	8006e20 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006d28:	6a38      	ldr	r0, [r7, #32]
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006d30:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006d34:	4c87      	ldr	r4, [pc, #540]	; (8006f54 <lfs_fs_deorphan+0x344>)
 8006d36:	9403      	str	r4, [sp, #12]
 8006d38:	9102      	str	r1, [sp, #8]
 8006d3a:	9201      	str	r2, [sp, #4]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	4603      	mov	r3, r0
 8006d40:	f241 320d 	movw	r2, #4877	; 0x130d
 8006d44:	4984      	ldr	r1, [pc, #528]	; (8006f58 <lfs_fs_deorphan+0x348>)
 8006d46:	4885      	ldr	r0, [pc, #532]	; (8006f5c <lfs_fs_deorphan+0x34c>)
 8006d48:	f009 fe68 	bl	8010a1c <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006d4c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006d50:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3330      	adds	r3, #48	; 0x30
 8006d58:	f107 0208 	add.w	r2, r7, #8
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fa fa4c 	bl	80011fc <lfs_gstate_hasmovehere>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01c      	beq.n	8006da4 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fa f988 	bl	8001084 <lfs_tag_id>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006d82:	4874      	ldr	r0, [pc, #464]	; (8006f54 <lfs_fs_deorphan+0x344>)
 8006d84:	9002      	str	r0, [sp, #8]
 8006d86:	9201      	str	r2, [sp, #4]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	f241 3218 	movw	r2, #4888	; 0x1318
 8006d90:	4971      	ldr	r1, [pc, #452]	; (8006f58 <lfs_fs_deorphan+0x348>)
 8006d92:	4873      	ldr	r0, [pc, #460]	; (8006f60 <lfs_fs_deorphan+0x350>)
 8006d94:	f009 fe42 	bl	8010a1c <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff fe12 	bl	80069c8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006da4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fa f8e6 	bl	8000f7a <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006dae:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006db2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d007      	beq.n	8006dca <lfs_fs_deorphan+0x1ba>
 8006dba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006dc4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006dc8:	e000      	b.n	8006dcc <lfs_fs_deorphan+0x1bc>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006dd6:	4b63      	ldr	r3, [pc, #396]	; (8006f64 <lfs_fs_deorphan+0x354>)
 8006dd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ddc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006de0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006de4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006de8:	f107 0108 	add.w	r1, r7, #8
 8006dec:	2302      	movs	r3, #2
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fd f938 	bl	8004064 <lfs_dir_orphaningcommit>
 8006df4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006df8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fa f8a2 	bl	8000f46 <lfs_pair_fromle32>
                        if (state < 0) {
 8006e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da02      	bge.n	8006e10 <lfs_fs_deorphan+0x200>
                            return state;
 8006e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8006e0e:	e062      	b.n	8006ed6 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006e10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d16b      	bne.n	8006ef0 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006e1e:	e067      	b.n	8006ef0 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8006e20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d159      	bne.n	8006edc <lfs_fs_deorphan+0x2cc>
 8006e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e2c:	f113 0f02 	cmn.w	r3, #2
 8006e30:	d154      	bne.n	8006edc <lfs_fs_deorphan+0x2cc>
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d051      	beq.n	8006edc <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006e38:	6a3a      	ldr	r2, [r7, #32]
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	4945      	ldr	r1, [pc, #276]	; (8006f54 <lfs_fs_deorphan+0x344>)
 8006e3e:	9101      	str	r1, [sp, #4]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	4613      	mov	r3, r2
 8006e44:	f241 3238 	movw	r2, #4920	; 0x1338
 8006e48:	4943      	ldr	r1, [pc, #268]	; (8006f58 <lfs_fs_deorphan+0x348>)
 8006e4a:	4847      	ldr	r0, [pc, #284]	; (8006f68 <lfs_fs_deorphan+0x358>)
 8006e4c:	f009 fde6 	bl	8010a1c <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fb fe85 	bl	8002b6c <lfs_dir_getgstate>
 8006e62:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 8006e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <lfs_fs_deorphan+0x264>
                        return err;
 8006e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e72:	e030      	b.n	8006ed6 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e78:	3318      	adds	r3, #24
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fa f87d 	bl	8000f7a <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006e80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e84:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006e88:	051a      	lsls	r2, r3, #20
 8006e8a:	4b38      	ldr	r3, [pc, #224]	; (8006f6c <lfs_fs_deorphan+0x35c>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	673b      	str	r3, [r7, #112]	; 0x70
 8006e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e94:	3318      	adds	r3, #24
 8006e96:	677b      	str	r3, [r7, #116]	; 0x74
 8006e98:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fd f8de 	bl	8004064 <lfs_dir_orphaningcommit>
 8006ea8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eb0:	3318      	adds	r3, #24
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fa f847 	bl	8000f46 <lfs_pair_fromle32>
                    if (state < 0) {
 8006eb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da02      	bge.n	8006ec6 <lfs_fs_deorphan+0x2b6>
                        return state;
 8006ec0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 8006ec4:	e03f      	b.n	8006f46 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d104      	bne.n	8006ed8 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006ed4:	e00c      	b.n	8006ef0 <lfs_fs_deorphan+0x2e0>
                return err;
 8006ed6:	e036      	b.n	8006f46 <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8006ed8:	bf00      	nop
 8006eda:	e009      	b.n	8006ef0 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8006edc:	f107 0408 	add.w	r4, r7, #8
 8006ee0:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8006ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	3318      	adds	r3, #24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7f9 ffb3 	bl	8000e62 <lfs_pair_isnull>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f083 0301 	eor.w	r3, r3, #1
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f47f aea9 	bne.w	8006c5c <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8006f0a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <lfs_fs_deorphan+0x306>
 8006f12:	2300      	movs	r3, #0
 8006f14:	e002      	b.n	8006f1c <lfs_fs_deorphan+0x30c>
 8006f16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	f77f ae8a 	ble.w	8006c3e <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3330      	adds	r3, #48	; 0x30
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fa f92e 	bl	8001190 <lfs_gstate_getorphans>
 8006f34:	4603      	mov	r3, r0
 8006f36:	425b      	negs	r3, r3
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	b25b      	sxtb	r3, r3
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff fcf2 	bl	8006928 <lfs_fs_preporphans>
 8006f44:	4603      	mov	r3, r0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	37b8      	adds	r7, #184	; 0xb8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	7ffffc00 	.word	0x7ffffc00
 8006f54:	0801176c 	.word	0x0801176c
 8006f58:	08011678 	.word	0x08011678
 8006f5c:	08011f54 	.word	0x08011f54
 8006f60:	08011f98 	.word	0x08011f98
 8006f64:	600ffc08 	.word	0x600ffc08
 8006f68:	08011fe0 	.word	0x08011fe0
 8006f6c:	000ffc08 	.word	0x000ffc08

08006f70 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff fd5f 	bl	8006a3c <lfs_fs_desuperblock>
 8006f7e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <lfs_fs_forceconsistency+0x1a>
        return err;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	e013      	b.n	8006fb2 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7ff fdc4 	bl	8006b18 <lfs_fs_demove>
 8006f90:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <lfs_fs_forceconsistency+0x2c>
        return err;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	e00a      	b.n	8006fb2 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fe36 	bl	8006c10 <lfs_fs_deorphan>
 8006fa4:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <lfs_fs_forceconsistency+0x40>
        return err;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	e000      	b.n	8006fb2 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]
    return 0;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8006fec:	f107 0208 	add.w	r2, r7, #8
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4907      	ldr	r1, [pc, #28]	; (8007010 <lfs_fs_rawsize+0x30>)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff f9fd 	bl	80063f4 <lfs_fs_rawtraverse>
 8006ffa:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <lfs_fs_rawsize+0x26>
        return err;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	e000      	b.n	8007008 <lfs_fs_rawsize+0x28>
    }

    return size;
 8007006:	68bb      	ldr	r3, [r7, #8]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	08006fbb 	.word	0x08006fbb

08007014 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <lfs_format+0x18>
        return err;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	e005      	b.n	8007038 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fe ff20 	bl	8005e74 <lfs_rawformat>
 8007034:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007036:	68fb      	ldr	r3, [r7, #12]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <lfs_mount+0x18>
        return err;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	e005      	b.n	8007064 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fe ffac 	bl	8005fb8 <lfs_rawmount>
 8007060:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8007062:	68fb      	ldr	r3, [r7, #12]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <lfs_unmount+0x16>
        return err;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	e004      	b.n	800708c <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_rawunmount(lfs);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff f9aa 	bl	80063dc <lfs_rawunmount>
 8007088:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800708a:	68fb      	ldr	r3, [r7, #12]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
 80070a0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]
    if (err) {
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <lfs_file_open+0x1c>
        return err;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	e01a      	b.n	80070e6 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fa f9d0 	bl	800145c <lfs_mlist_isopen>
 80070bc:	4603      	mov	r3, r0
 80070be:	f083 0301 	eor.w	r3, r3, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <lfs_file_open+0x42>
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <lfs_file_open+0x5c>)
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <lfs_file_open+0x60>)
 80070cc:	f241 61ec 	movw	r1, #5868	; 0x16ec
 80070d0:	4809      	ldr	r0, [pc, #36]	; (80070f8 <lfs_file_open+0x64>)
 80070d2:	f009 f843 	bl	801015c <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7fd fed7 	bl	8004e90 <lfs_file_rawopen>
 80070e2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80070e4:	697b      	ldr	r3, [r7, #20]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	08012010 	.word	0x08012010
 80070f4:	08012318 	.word	0x08012318
 80070f8:	08011678 	.word	0x08011678

080070fc <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
    if (err) {
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <lfs_file_close+0x18>
        return err;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	e015      	b.n	8007140 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fa f99e 	bl	800145c <lfs_mlist_isopen>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <lfs_file_close+0x38>
 8007126:	4b08      	ldr	r3, [pc, #32]	; (8007148 <lfs_file_close+0x4c>)
 8007128:	4a08      	ldr	r2, [pc, #32]	; (800714c <lfs_file_close+0x50>)
 800712a:	f241 7110 	movw	r1, #5904	; 0x1710
 800712e:	4808      	ldr	r0, [pc, #32]	; (8007150 <lfs_file_close+0x54>)
 8007130:	f009 f814 	bl	801015c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fd fec2 	bl	8004ec0 <lfs_file_rawclose>
 800713c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800713e:	68fb      	ldr	r3, [r7, #12]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	08012048 	.word	0x08012048
 800714c:	08012328 	.word	0x08012328
 8007150:	08011678 	.word	0x08011678

08007154 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]
    if (err) {
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <lfs_file_read+0x1c>
        return err;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	e017      	b.n	80071a0 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f7fa f970 	bl	800145c <lfs_mlist_isopen>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <lfs_file_read+0x3c>
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <lfs_file_read+0x54>)
 8007184:	4a09      	ldr	r2, [pc, #36]	; (80071ac <lfs_file_read+0x58>)
 8007186:	f241 7132 	movw	r1, #5938	; 0x1732
 800718a:	4809      	ldr	r0, [pc, #36]	; (80071b0 <lfs_file_read+0x5c>)
 800718c:	f008 ffe6 	bl	801015c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7fe f9de 	bl	8005558 <lfs_file_rawread>
 800719c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800719e:	693b      	ldr	r3, [r7, #16]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	08012048 	.word	0x08012048
 80071ac:	08012338 	.word	0x08012338
 80071b0:	08011678 	.word	0x08011678

080071b4 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80071c2:	2300      	movs	r3, #0
 80071c4:	617b      	str	r3, [r7, #20]
    if (err) {
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <lfs_file_write+0x1c>
        return err;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	e017      	b.n	8007200 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	68b9      	ldr	r1, [r7, #8]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fa f940 	bl	800145c <lfs_mlist_isopen>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <lfs_file_write+0x3c>
 80071e2:	4b09      	ldr	r3, [pc, #36]	; (8007208 <lfs_file_write+0x54>)
 80071e4:	4a09      	ldr	r2, [pc, #36]	; (800720c <lfs_file_write+0x58>)
 80071e6:	f241 7144 	movw	r1, #5956	; 0x1744
 80071ea:	4809      	ldr	r0, [pc, #36]	; (8007210 <lfs_file_write+0x5c>)
 80071ec:	f008 ffb6 	bl	801015c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7fe fb0e 	bl	8005818 <lfs_file_rawwrite>
 80071fc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80071fe:	693b      	ldr	r3, [r7, #16]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	08012048 	.word	0x08012048
 800720c:	08012348 	.word	0x08012348
 8007210:	08011678 	.word	0x08011678

08007214 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <lfs_file_rewind+0x18>
        return err;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	e005      	b.n	8007238 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rawrewind(lfs, file);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe fbff 	bl	8005a32 <lfs_file_rawrewind>
 8007234:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007236:	68fb      	ldr	r3, [r7, #12]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007240:	b480      	push	{r7}
 8007242:	b087      	sub	sp, #28
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e024      	b.n	80072a0 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	091a      	lsrs	r2, r3, #4
 800725a:	6939      	ldr	r1, [r7, #16]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	440b      	add	r3, r1
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	4619      	mov	r1, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	404b      	eors	r3, r1
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	4912      	ldr	r1, [pc, #72]	; (80072b8 <lfs_crc+0x78>)
 800726e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007272:	4053      	eors	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	091a      	lsrs	r2, r3, #4
 800727a:	6939      	ldr	r1, [r7, #16]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	440b      	add	r3, r1
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	b2db      	uxtb	r3, r3
 8007286:	4619      	mov	r1, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	404b      	eors	r3, r1
 800728c:	f003 030f 	and.w	r3, r3, #15
 8007290:	4909      	ldr	r1, [pc, #36]	; (80072b8 <lfs_crc+0x78>)
 8007292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007296:	4053      	eors	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	3301      	adds	r3, #1
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d3d6      	bcc.n	8007256 <lfs_crc+0x16>
    }

    return crc;
 80072a8:	68fb      	ldr	r3, [r7, #12]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	08012358 	.word	0x08012358

080072bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80072c2:	f001 fc86 	bl	8008bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80072c6:	f000 f9a5 	bl	8007614 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80072ca:	f000 fa01 	bl	80076d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80072ce:	f000 fbf7 	bl	8007ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 80072d2:	f000 fbb3 	bl	8007a3c <MX_DMA_Init>
  MX_ICACHE_Init();
 80072d6:	f000 fa65 	bl	80077a4 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80072da:	f000 fa6f 	bl	80077bc <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 80072de:	f000 fb0f 	bl	8007900 <MX_SAI1_Init>
  MX_I2C4_Init();
 80072e2:	f000 fa1f 	bl	8007724 <MX_I2C4_Init>
  MX_SPI1_Init();
 80072e6:	f000 fb6b 	bl	80079c0 <MX_SPI1_Init>
  MX_RTC_Init();
 80072ea:	f000 fab3 	bl	8007854 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80072ee:	2201      	movs	r2, #1
 80072f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80072f4:	48aa      	ldr	r0, [pc, #680]	; (80075a0 <main+0x2e4>)
 80072f6:	f002 fbdf 	bl	8009ab8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80072fa:	2201      	movs	r2, #1
 80072fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007300:	48a7      	ldr	r0, [pc, #668]	; (80075a0 <main+0x2e4>)
 8007302:	f002 fbd9 	bl	8009ab8 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8007306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800730a:	f001 fc9d 	bl	8008c48 <HAL_Delay>

  debug_print(CLS);
 800730e:	48a5      	ldr	r0, [pc, #660]	; (80075a4 <main+0x2e8>)
 8007310:	f000 fc7e 	bl	8007c10 <debug_print>
  HAL_Delay(10);
 8007314:	200a      	movs	r0, #10
 8007316:	f001 fc97 	bl	8008c48 <HAL_Delay>
  debug_print(HOME);
 800731a:	48a3      	ldr	r0, [pc, #652]	; (80075a8 <main+0x2ec>)
 800731c:	f000 fc78 	bl	8007c10 <debug_print>
  HAL_Delay(10);
 8007320:	200a      	movs	r0, #10
 8007322:	f001 fc91 	bl	8008c48 <HAL_Delay>
  debug_print("ESTAR_CORIA APP vD1.1 (STM32L552) \r\n");
 8007326:	48a1      	ldr	r0, [pc, #644]	; (80075ac <main+0x2f0>)
 8007328:	f000 fc72 	bl	8007c10 <debug_print>
  HAL_Delay(100);
 800732c:	2064      	movs	r0, #100	; 0x64
 800732e:	f001 fc8b 	bl	8008c48 <HAL_Delay>
  debug_print("Waiting for PSU Stabilization \r\n");
 8007332:	489f      	ldr	r0, [pc, #636]	; (80075b0 <main+0x2f4>)
 8007334:	f000 fc6c 	bl	8007c10 <debug_print>
  HAL_Delay(1000);
 8007338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800733c:	f001 fc84 	bl	8008c48 <HAL_Delay>

  // MAKE SURE WE CAN WRITE ALL MEMORY FIRST
  W25_WriteStatusReg(0xA0, 0b00000000);
 8007340:	2100      	movs	r1, #0
 8007342:	20a0      	movs	r0, #160	; 0xa0
 8007344:	f001 fa0e 	bl	8008764 <W25_WriteStatusReg>
  HAL_Delay(100);
 8007348:	2064      	movs	r0, #100	; 0x64
 800734a:	f001 fc7d 	bl	8008c48 <HAL_Delay>

  // mount the filesystem
  int err = lfs_mount(&lfs, &cfg);
 800734e:	4999      	ldr	r1, [pc, #612]	; (80075b4 <main+0x2f8>)
 8007350:	4899      	ldr	r0, [pc, #612]	; (80075b8 <main+0x2fc>)
 8007352:	f7ff fe75 	bl	8007040 <lfs_mount>
 8007356:	61f8      	str	r0, [r7, #28]
  if(err){
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <main+0xaa>
	  debug_print("err: %d",err);
 800735e:	69f9      	ldr	r1, [r7, #28]
 8007360:	4896      	ldr	r0, [pc, #600]	; (80075bc <main+0x300>)
 8007362:	f000 fc55 	bl	8007c10 <debug_print>
  }
  if (err) {
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d02b      	beq.n	80073c4 <main+0x108>
	  for (uint16_t i = 0; i <= 1024; i++) {
 800736c:	2300      	movs	r3, #0
 800736e:	837b      	strh	r3, [r7, #26]
 8007370:	e009      	b.n	8007386 <main+0xca>
		  W25_SectorErase(i);
 8007372:	8b7b      	ldrh	r3, [r7, #26]
 8007374:	4618      	mov	r0, r3
 8007376:	f001 fb31 	bl	80089dc <W25_SectorErase>
		  HAL_Delay(10);
 800737a:	200a      	movs	r0, #10
 800737c:	f001 fc64 	bl	8008c48 <HAL_Delay>
	  for (uint16_t i = 0; i <= 1024; i++) {
 8007380:	8b7b      	ldrh	r3, [r7, #26]
 8007382:	3301      	adds	r3, #1
 8007384:	837b      	strh	r3, [r7, #26]
 8007386:	8b7b      	ldrh	r3, [r7, #26]
 8007388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738c:	d9f1      	bls.n	8007372 <main+0xb6>
	  }
	  debug_print("\n\r Erased whole Memory -- Again -- \n\r");
 800738e:	488c      	ldr	r0, [pc, #560]	; (80075c0 <main+0x304>)
 8007390:	f000 fc3e 	bl	8007c10 <debug_print>
      err = lfs_format(&lfs, &cfg);
 8007394:	4987      	ldr	r1, [pc, #540]	; (80075b4 <main+0x2f8>)
 8007396:	4888      	ldr	r0, [pc, #544]	; (80075b8 <main+0x2fc>)
 8007398:	f7ff fe3c 	bl	8007014 <lfs_format>
 800739c:	61f8      	str	r0, [r7, #28]
      debug_print("\err: %d\n\r", err);
 800739e:	69f9      	ldr	r1, [r7, #28]
 80073a0:	4888      	ldr	r0, [pc, #544]	; (80075c4 <main+0x308>)
 80073a2:	f000 fc35 	bl	8007c10 <debug_print>
      HAL_Delay(5);
 80073a6:	2005      	movs	r0, #5
 80073a8:	f001 fc4e 	bl	8008c48 <HAL_Delay>
      err = lfs_mount(&lfs, &cfg);
 80073ac:	4981      	ldr	r1, [pc, #516]	; (80075b4 <main+0x2f8>)
 80073ae:	4882      	ldr	r0, [pc, #520]	; (80075b8 <main+0x2fc>)
 80073b0:	f7ff fe46 	bl	8007040 <lfs_mount>
 80073b4:	61f8      	str	r0, [r7, #28]
      debug_print("\err: %d\n\r", err);
 80073b6:	69f9      	ldr	r1, [r7, #28]
 80073b8:	4882      	ldr	r0, [pc, #520]	; (80075c4 <main+0x308>)
 80073ba:	f000 fc29 	bl	8007c10 <debug_print>
      HAL_Delay(5);
 80073be:	2005      	movs	r0, #5
 80073c0:	f001 fc42 	bl	8008c48 <HAL_Delay>
  }
  HAL_Delay(5);
 80073c4:	2005      	movs	r0, #5
 80073c6:	f001 fc3f 	bl	8008c48 <HAL_Delay>
  // reformat if we can't mount the filesystem
  // this should only happen on the first boot
  if (err == 0) {
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d11e      	bne.n	800740e <main+0x152>
	  // close file
	  lfs_file_close(&lfs, &file_input_data);
		*/
	  // load input data into file
	  // first open such file
	  lfs_file_open(&lfs, &file_input_60, "input_60", LFS_O_RDWR | LFS_O_CREAT);
 80073d0:	f240 1303 	movw	r3, #259	; 0x103
 80073d4:	4a7c      	ldr	r2, [pc, #496]	; (80075c8 <main+0x30c>)
 80073d6:	497d      	ldr	r1, [pc, #500]	; (80075cc <main+0x310>)
 80073d8:	4877      	ldr	r0, [pc, #476]	; (80075b8 <main+0x2fc>)
 80073da:	f7ff fe5b 	bl	8007094 <lfs_file_open>
	  // rewind file
	  lfs_file_rewind(&lfs, &file_input_60);
 80073de:	497b      	ldr	r1, [pc, #492]	; (80075cc <main+0x310>)
 80073e0:	4875      	ldr	r0, [pc, #468]	; (80075b8 <main+0x2fc>)
 80073e2:	f7ff ff17 	bl	8007214 <lfs_file_rewind>
	  // write actual data
	  lfs_file_write(&lfs, &file_input_60, &input_60, sizeof(input_60));
 80073e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073ea:	4a79      	ldr	r2, [pc, #484]	; (80075d0 <main+0x314>)
 80073ec:	4977      	ldr	r1, [pc, #476]	; (80075cc <main+0x310>)
 80073ee:	4872      	ldr	r0, [pc, #456]	; (80075b8 <main+0x2fc>)
 80073f0:	f7ff fee0 	bl	80071b4 <lfs_file_write>
	  // close file
	  lfs_file_close(&lfs, &file_input_60);
 80073f4:	4975      	ldr	r1, [pc, #468]	; (80075cc <main+0x310>)
 80073f6:	4870      	ldr	r0, [pc, #448]	; (80075b8 <main+0x2fc>)
 80073f8:	f7ff fe80 	bl	80070fc <lfs_file_close>
	  debug_print("Input loaded to memory\n\r");
 80073fc:	4875      	ldr	r0, [pc, #468]	; (80075d4 <main+0x318>)
 80073fe:	f000 fc07 	bl	8007c10 <debug_print>
	  HAL_Delay(1);
 8007402:	2001      	movs	r0, #1
 8007404:	f001 fc20 	bl	8008c48 <HAL_Delay>

	  // release any resources we were using
	  lfs_unmount(&lfs);
 8007408:	486b      	ldr	r0, [pc, #428]	; (80075b8 <main+0x2fc>)
 800740a:	f7ff fe2f 	bl	800706c <lfs_unmount>
	  //debug_print("boot_count: %d\n\r", boot_count);
	  //HAL_Delay(1);
	  //debug_print("max_count: %d\n\r", max_count);
	  //HAL_Delay(1);
  }
	GPIO_InitTypeDef GPIO_InitStructSPISS = {0};
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	605a      	str	r2, [r3, #4]
 8007416:	609a      	str	r2, [r3, #8]
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	611a      	str	r2, [r3, #16]
	GPIO_InitStructSPISS.Pin = SPI1_NCS_Pin;
 800741c:	2310      	movs	r3, #16
 800741e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructSPISS.Mode = GPIO_MODE_INPUT;
 8007420:	2300      	movs	r3, #0
 8007422:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructSPISS.Pull = GPIO_NOPULL;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructSPISS.Speed = GPIO_SPEED_FREQ_LOW;
 8007428:	2300      	movs	r3, #0
 800742a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructSPISS);
 800742c:	1d3b      	adds	r3, r7, #4
 800742e:	4619      	mov	r1, r3
 8007430:	4869      	ldr	r0, [pc, #420]	; (80075d8 <main+0x31c>)
 8007432:	f002 f8bb 	bl	80095ac <HAL_GPIO_Init>
  	HAL_SPI_DeInit(&hspi1);
 8007436:	4869      	ldr	r0, [pc, #420]	; (80075dc <main+0x320>)
 8007438:	f006 f9b3 	bl	800d7a2 <HAL_SPI_DeInit>
  	debug_print("Waiting for MAX78002\r\n");
 800743c:	4868      	ldr	r0, [pc, #416]	; (80075e0 <main+0x324>)
 800743e:	f000 fbe7 	bl	8007c10 <debug_print>
  	HAL_Delay(1);
 8007442:	2001      	movs	r0, #1
 8007444:	f001 fc00 	bl	8008c48 <HAL_Delay>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8007448:	2201      	movs	r2, #1
 800744a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800744e:	4854      	ldr	r0, [pc, #336]	; (80075a0 <main+0x2e4>)
 8007450:	f002 fb32 	bl	8009ab8 <HAL_GPIO_WritePin>

	while( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_RESET ){
 8007454:	e002      	b.n	800745c <main+0x1a0>
	  	HAL_Delay(100);
 8007456:	2064      	movs	r0, #100	; 0x64
 8007458:	f001 fbf6 	bl	8008c48 <HAL_Delay>
	while( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_RESET ){
 800745c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007460:	484f      	ldr	r0, [pc, #316]	; (80075a0 <main+0x2e4>)
 8007462:	f002 fb11 	bl	8009a88 <HAL_GPIO_ReadPin>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0f4      	beq.n	8007456 <main+0x19a>
	}
	GPIO_InitStructSPISS.Pin = SPI1_NCS_Pin;
 800746c:	2310      	movs	r3, #16
 800746e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructSPISS.Mode = GPIO_MODE_OUTPUT_PP;
 8007470:	2301      	movs	r3, #1
 8007472:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructSPISS.Pull = GPIO_NOPULL;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructSPISS.Speed = GPIO_SPEED_FREQ_LOW;
 8007478:	2300      	movs	r3, #0
 800747a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructSPISS);
 800747c:	1d3b      	adds	r3, r7, #4
 800747e:	4619      	mov	r1, r3
 8007480:	4855      	ldr	r0, [pc, #340]	; (80075d8 <main+0x31c>)
 8007482:	f002 f893 	bl	80095ac <HAL_GPIO_Init>
	MX_SPI1_Init();
 8007486:	f000 fa9b 	bl	80079c0 <MX_SPI1_Init>
	debug_print("Reading CNN results\r\n");
 800748a:	4856      	ldr	r0, [pc, #344]	; (80075e4 <main+0x328>)
 800748c:	f000 fbc0 	bl	8007c10 <debug_print>
	HAL_Delay(1);
 8007490:	2001      	movs	r0, #1
 8007492:	f001 fbd9 	bl	8008c48 <HAL_Delay>
	// remount the filesystem
	err = lfs_mount(&lfs, &cfg);
 8007496:	4947      	ldr	r1, [pc, #284]	; (80075b4 <main+0x2f8>)
 8007498:	4847      	ldr	r0, [pc, #284]	; (80075b8 <main+0x2fc>)
 800749a:	f7ff fdd1 	bl	8007040 <lfs_mount>
 800749e:	61f8      	str	r0, [r7, #28]
	if(err){
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <main+0x1f2>
		debug_print("err: %d",err);
 80074a6:	69f9      	ldr	r1, [r7, #28]
 80074a8:	4844      	ldr	r0, [pc, #272]	; (80075bc <main+0x300>)
 80074aa:	f000 fbb1 	bl	8007c10 <debug_print>
	}
	HAL_Delay(5);
 80074ae:	2005      	movs	r0, #5
 80074b0:	f001 fbca 	bl	8008c48 <HAL_Delay>

	if (err == 0) {
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d116      	bne.n	80074e8 <main+0x22c>
		lfs_file_open(&lfs, &file_out, "file_out", LFS_O_RDWR | LFS_O_CREAT);
 80074ba:	f240 1303 	movw	r3, #259	; 0x103
 80074be:	4a4a      	ldr	r2, [pc, #296]	; (80075e8 <main+0x32c>)
 80074c0:	494a      	ldr	r1, [pc, #296]	; (80075ec <main+0x330>)
 80074c2:	483d      	ldr	r0, [pc, #244]	; (80075b8 <main+0x2fc>)
 80074c4:	f7ff fde6 	bl	8007094 <lfs_file_open>
		lfs_file_read(&lfs, &file_out, &ml_softmax, sizeof(ml_softmax));
 80074c8:	23c8      	movs	r3, #200	; 0xc8
 80074ca:	4a49      	ldr	r2, [pc, #292]	; (80075f0 <main+0x334>)
 80074cc:	4947      	ldr	r1, [pc, #284]	; (80075ec <main+0x330>)
 80074ce:	483a      	ldr	r0, [pc, #232]	; (80075b8 <main+0x2fc>)
 80074d0:	f7ff fe40 	bl	8007154 <lfs_file_read>
		lfs_file_close(&lfs, &file_out);
 80074d4:	4945      	ldr	r1, [pc, #276]	; (80075ec <main+0x330>)
 80074d6:	4838      	ldr	r0, [pc, #224]	; (80075b8 <main+0x2fc>)
 80074d8:	f7ff fe10 	bl	80070fc <lfs_file_close>
		debug_print("Results read from file\r\n");
 80074dc:	4845      	ldr	r0, [pc, #276]	; (80075f4 <main+0x338>)
 80074de:	f000 fb97 	bl	8007c10 <debug_print>
		HAL_Delay(1);
 80074e2:	2001      	movs	r0, #1
 80074e4:	f001 fbb0 	bl	8008c48 <HAL_Delay>
	}
	// release any resources we were using
	lfs_unmount(&lfs);
 80074e8:	4833      	ldr	r0, [pc, #204]	; (80075b8 <main+0x2fc>)
 80074ea:	f7ff fdbf 	bl	800706c <lfs_unmount>
	debug_print("Classification results:\r\n");
 80074ee:	4842      	ldr	r0, [pc, #264]	; (80075f8 <main+0x33c>)
 80074f0:	f000 fb8e 	bl	8007c10 <debug_print>
    for (i = 0; i < CNN_NUM_OUTPUTS; i++) {
 80074f4:	4b41      	ldr	r3, [pc, #260]	; (80075fc <main+0x340>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	801a      	strh	r2, [r3, #0]
 80074fa:	e038      	b.n	800756e <main+0x2b2>
        digs = (1000 * ml_softmax[i] + 0x4000) >> 15;
 80074fc:	4b3f      	ldr	r3, [pc, #252]	; (80075fc <main+0x340>)
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	4b3b      	ldr	r3, [pc, #236]	; (80075f0 <main+0x334>)
 8007504:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007508:	461a      	mov	r2, r3
 800750a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800750e:	fb02 f303 	mul.w	r3, r2, r3
 8007512:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8007516:	13db      	asrs	r3, r3, #15
 8007518:	4a39      	ldr	r2, [pc, #228]	; (8007600 <main+0x344>)
 800751a:	6013      	str	r3, [r2, #0]
        tens = digs % 10;
 800751c:	4b38      	ldr	r3, [pc, #224]	; (8007600 <main+0x344>)
 800751e:	6819      	ldr	r1, [r3, #0]
 8007520:	4b38      	ldr	r3, [pc, #224]	; (8007604 <main+0x348>)
 8007522:	fb83 2301 	smull	r2, r3, r3, r1
 8007526:	109a      	asrs	r2, r3, #2
 8007528:	17cb      	asrs	r3, r1, #31
 800752a:	1ad2      	subs	r2, r2, r3
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	1aca      	subs	r2, r1, r3
 8007536:	4b34      	ldr	r3, [pc, #208]	; (8007608 <main+0x34c>)
 8007538:	601a      	str	r2, [r3, #0]
        digs = digs / 10;
 800753a:	4b31      	ldr	r3, [pc, #196]	; (8007600 <main+0x344>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a31      	ldr	r2, [pc, #196]	; (8007604 <main+0x348>)
 8007540:	fb82 1203 	smull	r1, r2, r2, r3
 8007544:	1092      	asrs	r2, r2, #2
 8007546:	17db      	asrs	r3, r3, #31
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	4a2d      	ldr	r2, [pc, #180]	; (8007600 <main+0x344>)
 800754c:	6013      	str	r3, [r2, #0]
        debug_print("Class %d: %d.%d%% \r\n", i, digs, tens);
 800754e:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <main+0x340>)
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	4619      	mov	r1, r3
 8007554:	4b2a      	ldr	r3, [pc, #168]	; (8007600 <main+0x344>)
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <main+0x34c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	482b      	ldr	r0, [pc, #172]	; (800760c <main+0x350>)
 800755e:	f000 fb57 	bl	8007c10 <debug_print>
    for (i = 0; i < CNN_NUM_OUTPUTS; i++) {
 8007562:	4b26      	ldr	r3, [pc, #152]	; (80075fc <main+0x340>)
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	4b24      	ldr	r3, [pc, #144]	; (80075fc <main+0x340>)
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	4b23      	ldr	r3, [pc, #140]	; (80075fc <main+0x340>)
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	2b63      	cmp	r3, #99	; 0x63
 8007574:	d9c2      	bls.n	80074fc <main+0x240>
    }
    // Turn OFF PSUs
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8007576:	2200      	movs	r2, #0
 8007578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800757c:	4808      	ldr	r0, [pc, #32]	; (80075a0 <main+0x2e4>)
 800757e:	f002 fa9b 	bl	8009ab8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8007582:	2200      	movs	r2, #0
 8007584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007588:	4805      	ldr	r0, [pc, #20]	; (80075a0 <main+0x2e4>)
 800758a:	f002 fa95 	bl	8009ab8 <HAL_GPIO_WritePin>
    debug_print("Bye Bye - MRM        \r\n");
 800758e:	4820      	ldr	r0, [pc, #128]	; (8007610 <main+0x354>)
 8007590:	f000 fb3e 	bl	8007c10 <debug_print>
    HAL_Delay(1);
 8007594:	2001      	movs	r0, #1
 8007596:	f001 fb57 	bl	8008c48 <HAL_Delay>
    HAL_PWREx_EnterSHUTDOWNMode();
 800759a:	f002 fc55 	bl	8009e48 <HAL_PWREx_EnterSHUTDOWNMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800759e:	e7fe      	b.n	800759e <main+0x2e2>
 80075a0:	42020c00 	.word	0x42020c00
 80075a4:	080120b8 	.word	0x080120b8
 80075a8:	080120c0 	.word	0x080120c0
 80075ac:	080120c4 	.word	0x080120c4
 80075b0:	080120ec 	.word	0x080120ec
 80075b4:	08012398 	.word	0x08012398
 80075b8:	200004d4 	.word	0x200004d4
 80075bc:	08012110 	.word	0x08012110
 80075c0:	08012118 	.word	0x08012118
 80075c4:	08012140 	.word	0x08012140
 80075c8:	0801214c 	.word	0x0801214c
 80075cc:	2000054c 	.word	0x2000054c
 80075d0:	080123e4 	.word	0x080123e4
 80075d4:	08012158 	.word	0x08012158
 80075d8:	42020000 	.word	0x42020000
 80075dc:	2000046c 	.word	0x2000046c
 80075e0:	08012174 	.word	0x08012174
 80075e4:	0801218c 	.word	0x0801218c
 80075e8:	080121a4 	.word	0x080121a4
 80075ec:	200005a0 	.word	0x200005a0
 80075f0:	200005f4 	.word	0x200005f4
 80075f4:	080121b0 	.word	0x080121b0
 80075f8:	080121cc 	.word	0x080121cc
 80075fc:	200004d0 	.word	0x200004d0
 8007600:	200006bc 	.word	0x200006bc
 8007604:	66666667 	.word	0x66666667
 8007608:	200006c0 	.word	0x200006c0
 800760c:	080121e8 	.word	0x080121e8
 8007610:	08012200 	.word	0x08012200

08007614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b098      	sub	sp, #96	; 0x60
 8007618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800761a:	f107 0318 	add.w	r3, r7, #24
 800761e:	2248      	movs	r2, #72	; 0x48
 8007620:	2100      	movs	r1, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f008 fe21 	bl	801026a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007628:	1d3b      	adds	r3, r7, #4
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	605a      	str	r2, [r3, #4]
 8007630:	609a      	str	r2, [r3, #8]
 8007632:	60da      	str	r2, [r3, #12]
 8007634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800763a:	f002 fba9 	bl	8009d90 <HAL_PWREx_ControlVoltageScaling>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8007644:	f000 fb1a 	bl	8007c7c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007648:	f002 fb84 	bl	8009d54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800764c:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <SystemClock_Config+0xb8>)
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	4a1e      	ldr	r2, [pc, #120]	; (80076cc <SystemClock_Config+0xb8>)
 8007654:	f023 0318 	bic.w	r3, r3, #24
 8007658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800765c:	2305      	movs	r3, #5
 800765e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007664:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007666:	2381      	movs	r3, #129	; 0x81
 8007668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800766a:	2302      	movs	r3, #2
 800766c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800766e:	2303      	movs	r3, #3
 8007670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 3;
 8007672:	2303      	movs	r3, #3
 8007674:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8007676:	230c      	movs	r3, #12
 8007678:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800767a:	2307      	movs	r3, #7
 800767c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800767e:	2302      	movs	r3, #2
 8007680:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007682:	2302      	movs	r3, #2
 8007684:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007686:	f107 0318 	add.w	r3, r7, #24
 800768a:	4618      	mov	r0, r3
 800768c:	f002 fc1a 	bl	8009ec4 <HAL_RCC_OscConfig>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8007696:	f000 faf1 	bl	8007c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800769a:	230f      	movs	r3, #15
 800769c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800769e:	2303      	movs	r3, #3
 80076a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80076a2:	2380      	movs	r3, #128	; 0x80
 80076a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	2102      	movs	r1, #2
 80076b2:	4618      	mov	r0, r3
 80076b4:	f003 f8dc 	bl	800a870 <HAL_RCC_ClockConfig>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80076be:	f000 fadd 	bl	8007c7c <Error_Handler>
  }
}
 80076c2:	bf00      	nop
 80076c4:	3760      	adds	r7, #96	; 0x60
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40021000 	.word	0x40021000

080076d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b0a6      	sub	sp, #152	; 0x98
 80076d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80076d6:	1d3b      	adds	r3, r7, #4
 80076d8:	2294      	movs	r2, #148	; 0x94
 80076da:	2100      	movs	r1, #0
 80076dc:	4618      	mov	r0, r3
 80076de:	f008 fdc4 	bl	801026a <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80076e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80076e6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80076e8:	2300      	movs	r3, #0
 80076ea:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSE;
 80076ec:	2303      	movs	r3, #3
 80076ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 6;
 80076f0:	2306      	movs	r3, #6
 80076f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 17;
 80076f4:	2311      	movs	r3, #17
 80076f6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80076f8:	2311      	movs	r3, #17
 80076fa:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80076fc:	2302      	movs	r3, #2
 80076fe:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007700:	2302      	movs	r3, #2
 8007702:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8007704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007708:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800770a:	1d3b      	adds	r3, r7, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f003 fbc5 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8007718:	f000 fab0 	bl	8007c7c <Error_Handler>
  }
}
 800771c:	bf00      	nop
 800771e:	3798      	adds	r7, #152	; 0x98
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8007728:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <MX_I2C4_Init+0x74>)
 800772a:	4a1c      	ldr	r2, [pc, #112]	; (800779c <MX_I2C4_Init+0x78>)
 800772c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 800772e:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <MX_I2C4_Init+0x74>)
 8007730:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <MX_I2C4_Init+0x7c>)
 8007732:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8007734:	4b18      	ldr	r3, [pc, #96]	; (8007798 <MX_I2C4_Init+0x74>)
 8007736:	2200      	movs	r2, #0
 8007738:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800773a:	4b17      	ldr	r3, [pc, #92]	; (8007798 <MX_I2C4_Init+0x74>)
 800773c:	2201      	movs	r2, #1
 800773e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007740:	4b15      	ldr	r3, [pc, #84]	; (8007798 <MX_I2C4_Init+0x74>)
 8007742:	2200      	movs	r2, #0
 8007744:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <MX_I2C4_Init+0x74>)
 8007748:	2200      	movs	r2, #0
 800774a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800774c:	4b12      	ldr	r3, [pc, #72]	; (8007798 <MX_I2C4_Init+0x74>)
 800774e:	2200      	movs	r2, #0
 8007750:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <MX_I2C4_Init+0x74>)
 8007754:	2200      	movs	r2, #0
 8007756:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007758:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <MX_I2C4_Init+0x74>)
 800775a:	2200      	movs	r2, #0
 800775c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800775e:	480e      	ldr	r0, [pc, #56]	; (8007798 <MX_I2C4_Init+0x74>)
 8007760:	f002 f9c2 	bl	8009ae8 <HAL_I2C_Init>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800776a:	f000 fa87 	bl	8007c7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800776e:	2100      	movs	r1, #0
 8007770:	4809      	ldr	r0, [pc, #36]	; (8007798 <MX_I2C4_Init+0x74>)
 8007772:	f002 fa48 	bl	8009c06 <HAL_I2CEx_ConfigAnalogFilter>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800777c:	f000 fa7e 	bl	8007c7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8007780:	2100      	movs	r1, #0
 8007782:	4805      	ldr	r0, [pc, #20]	; (8007798 <MX_I2C4_Init+0x74>)
 8007784:	f002 fa8a 	bl	8009c9c <HAL_I2CEx_ConfigDigitalFilter>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800778e:	f000 fa75 	bl	8007c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8007792:	bf00      	nop
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	2000008c 	.word	0x2000008c
 800779c:	40008400 	.word	0x40008400
 80077a0:	20303e5d 	.word	0x20303e5d

080077a4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80077a8:	f002 fac4 	bl	8009d34 <HAL_ICACHE_Enable>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80077b2:	f000 fa63 	bl	8007c7c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80077b6:	bf00      	nop
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80077c0:	4b22      	ldr	r3, [pc, #136]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077c2:	4a23      	ldr	r2, [pc, #140]	; (8007850 <MX_LPUART1_UART_Init+0x94>)
 80077c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80077c6:	4b21      	ldr	r3, [pc, #132]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80077cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80077ce:	4b1f      	ldr	r3, [pc, #124]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80077d4:	4b1d      	ldr	r3, [pc, #116]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80077da:	4b1c      	ldr	r3, [pc, #112]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077dc:	2200      	movs	r2, #0
 80077de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80077e0:	4b1a      	ldr	r3, [pc, #104]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077e2:	220c      	movs	r2, #12
 80077e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077e6:	4b19      	ldr	r3, [pc, #100]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80077ec:	4b17      	ldr	r3, [pc, #92]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80077f2:	4b16      	ldr	r3, [pc, #88]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80077f8:	4b14      	ldr	r3, [pc, #80]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80077fe:	4b13      	ldr	r3, [pc, #76]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 8007800:	2200      	movs	r2, #0
 8007802:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8007804:	4811      	ldr	r0, [pc, #68]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 8007806:	f007 f933 	bl	800ea70 <HAL_UART_Init>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8007810:	f000 fa34 	bl	8007c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007814:	2100      	movs	r1, #0
 8007816:	480d      	ldr	r0, [pc, #52]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 8007818:	f008 fbd5 	bl	800ffc6 <HAL_UARTEx_SetTxFifoThreshold>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007822:	f000 fa2b 	bl	8007c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007826:	2100      	movs	r1, #0
 8007828:	4808      	ldr	r0, [pc, #32]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 800782a:	f008 fc0a 	bl	8010042 <HAL_UARTEx_SetRxFifoThreshold>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007834:	f000 fa22 	bl	8007c7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8007838:	4804      	ldr	r0, [pc, #16]	; (800784c <MX_LPUART1_UART_Init+0x90>)
 800783a:	f008 fb8b 	bl	800ff54 <HAL_UARTEx_DisableFifoMode>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007844:	f000 fa1a 	bl	8007c7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8007848:	bf00      	nop
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200000e0 	.word	0x200000e0
 8007850:	40008000 	.word	0x40008000

08007854 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800785a:	463b      	mov	r3, r7
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	605a      	str	r2, [r3, #4]
 8007862:	609a      	str	r2, [r3, #8]
 8007864:	60da      	str	r2, [r3, #12]
 8007866:	611a      	str	r2, [r3, #16]
 8007868:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800786a:	4b23      	ldr	r3, [pc, #140]	; (80078f8 <MX_RTC_Init+0xa4>)
 800786c:	4a23      	ldr	r2, [pc, #140]	; (80078fc <MX_RTC_Init+0xa8>)
 800786e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007870:	4b21      	ldr	r3, [pc, #132]	; (80078f8 <MX_RTC_Init+0xa4>)
 8007872:	2200      	movs	r2, #0
 8007874:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007876:	4b20      	ldr	r3, [pc, #128]	; (80078f8 <MX_RTC_Init+0xa4>)
 8007878:	227f      	movs	r2, #127	; 0x7f
 800787a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800787c:	4b1e      	ldr	r3, [pc, #120]	; (80078f8 <MX_RTC_Init+0xa4>)
 800787e:	22ff      	movs	r2, #255	; 0xff
 8007880:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007882:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <MX_RTC_Init+0xa4>)
 8007884:	2200      	movs	r2, #0
 8007886:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007888:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <MX_RTC_Init+0xa4>)
 800788a:	2200      	movs	r2, #0
 800788c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800788e:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <MX_RTC_Init+0xa4>)
 8007890:	2200      	movs	r2, #0
 8007892:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007894:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <MX_RTC_Init+0xa4>)
 8007896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800789a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800789c:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <MX_RTC_Init+0xa4>)
 800789e:	2200      	movs	r2, #0
 80078a0:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80078a2:	4815      	ldr	r0, [pc, #84]	; (80078f8 <MX_RTC_Init+0xa4>)
 80078a4:	f005 f966 	bl	800cb74 <HAL_RTC_Init>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80078ae:	f000 f9e5 	bl	8007c7c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80078b2:	2300      	movs	r3, #0
 80078b4:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80078c2:	463b      	mov	r3, r7
 80078c4:	4619      	mov	r1, r3
 80078c6:	480c      	ldr	r0, [pc, #48]	; (80078f8 <MX_RTC_Init+0xa4>)
 80078c8:	f005 fb0c 	bl	800cee4 <HAL_RTCEx_PrivilegeModeSet>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80078d2:	f000 f9d3 	bl	8007c7c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x7810, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80078d6:	2300      	movs	r3, #0
 80078d8:	2200      	movs	r2, #0
 80078da:	f647 0110 	movw	r1, #30736	; 0x7810
 80078de:	4806      	ldr	r0, [pc, #24]	; (80078f8 <MX_RTC_Init+0xa4>)
 80078e0:	f005 fa56 	bl	800cd90 <HAL_RTCEx_SetWakeUpTimer_IT>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80078ea:	f000 f9c7 	bl	8007c7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80078ee:	bf00      	nop
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000244 	.word	0x20000244
 80078fc:	40002800 	.word	0x40002800

08007900 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8007904:	4b2a      	ldr	r3, [pc, #168]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007906:	4a2b      	ldr	r2, [pc, #172]	; (80079b4 <MX_SAI1_Init+0xb4>)
 8007908:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800790a:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <MX_SAI1_Init+0xb0>)
 800790c:	2200      	movs	r2, #0
 800790e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8007910:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007912:	2200      	movs	r2, #0
 8007914:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007916:	4b26      	ldr	r3, [pc, #152]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007918:	2200      	movs	r2, #0
 800791a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800791c:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <MX_SAI1_Init+0xb0>)
 800791e:	2200      	movs	r2, #0
 8007920:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007922:	4b23      	ldr	r3, [pc, #140]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007924:	2200      	movs	r2, #0
 8007926:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_32K;
 8007928:	4b21      	ldr	r3, [pc, #132]	; (80079b0 <MX_SAI1_Init+0xb0>)
 800792a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800792e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_OUTBLOCKB_ENABLE;
 8007930:	4b1f      	ldr	r3, [pc, #124]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007932:	2202      	movs	r2, #2
 8007934:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8007936:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800793e:	4b1c      	ldr	r3, [pc, #112]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007944:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007946:	2200      	movs	r2, #0
 8007948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BITEXTENDED, 2) != HAL_OK)
 800794a:	2302      	movs	r3, #2
 800794c:	2201      	movs	r2, #1
 800794e:	2100      	movs	r1, #0
 8007950:	4817      	ldr	r0, [pc, #92]	; (80079b0 <MX_SAI1_Init+0xb0>)
 8007952:	f005 faf3 	bl	800cf3c <HAL_SAI_InitProtocol>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 800795c:	f000 f98e 	bl	8007c7c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8007960:	4b15      	ldr	r3, [pc, #84]	; (80079b8 <MX_SAI1_Init+0xb8>)
 8007962:	4a16      	ldr	r2, [pc, #88]	; (80079bc <MX_SAI1_Init+0xbc>)
 8007964:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8007966:	4b14      	ldr	r3, [pc, #80]	; (80079b8 <MX_SAI1_Init+0xb8>)
 8007968:	2203      	movs	r2, #3
 800796a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800796c:	4b12      	ldr	r3, [pc, #72]	; (80079b8 <MX_SAI1_Init+0xb8>)
 800796e:	2201      	movs	r2, #1
 8007970:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007972:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <MX_SAI1_Init+0xb8>)
 8007974:	2200      	movs	r2, #0
 8007976:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <MX_SAI1_Init+0xb8>)
 800797a:	2200      	movs	r2, #0
 800797c:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_OUTBLOCKB_ENABLE;
 800797e:	4b0e      	ldr	r3, [pc, #56]	; (80079b8 <MX_SAI1_Init+0xb8>)
 8007980:	2202      	movs	r2, #2
 8007982:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8007984:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <MX_SAI1_Init+0xb8>)
 8007986:	2200      	movs	r2, #0
 8007988:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <MX_SAI1_Init+0xb8>)
 800798c:	2200      	movs	r2, #0
 800798e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_RELEASED;
 8007990:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <MX_SAI1_Init+0xb8>)
 8007992:	2210      	movs	r2, #16
 8007994:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BITEXTENDED, 2) != HAL_OK)
 8007996:	2302      	movs	r3, #2
 8007998:	2201      	movs	r2, #1
 800799a:	2100      	movs	r1, #0
 800799c:	4806      	ldr	r0, [pc, #24]	; (80079b8 <MX_SAI1_Init+0xb8>)
 800799e:	f005 facd 	bl	800cf3c <HAL_SAI_InitProtocol>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <MX_SAI1_Init+0xac>
  {
    Error_Handler();
 80079a8:	f000 f968 	bl	8007c7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80079ac:	bf00      	nop
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	2000026c 	.word	0x2000026c
 80079b4:	40015404 	.word	0x40015404
 80079b8:	20000304 	.word	0x20000304
 80079bc:	40015424 	.word	0x40015424

080079c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80079c4:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079c6:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <MX_SPI1_Init+0x78>)
 80079c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80079ca:	4b1a      	ldr	r3, [pc, #104]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80079d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80079d2:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80079d8:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80079de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80079e0:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80079e6:	4b13      	ldr	r3, [pc, #76]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80079ec:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079f4:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80079fa:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <MX_SPI1_Init+0x74>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007a00:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <MX_SPI1_Init+0x74>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <MX_SPI1_Init+0x74>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007a0c:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <MX_SPI1_Init+0x74>)
 8007a0e:	2207      	movs	r2, #7
 8007a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007a12:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <MX_SPI1_Init+0x74>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007a18:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <MX_SPI1_Init+0x74>)
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007a1e:	4805      	ldr	r0, [pc, #20]	; (8007a34 <MX_SPI1_Init+0x74>)
 8007a20:	f005 fe1c 	bl	800d65c <HAL_SPI_Init>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007a2a:	f000 f927 	bl	8007c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007a2e:	bf00      	nop
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	2000046c 	.word	0x2000046c
 8007a38:	40013000 	.word	0x40013000

08007a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007a42:	4b1e      	ldr	r3, [pc, #120]	; (8007abc <MX_DMA_Init+0x80>)
 8007a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a46:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <MX_DMA_Init+0x80>)
 8007a48:	f043 0304 	orr.w	r3, r3, #4
 8007a4c:	6493      	str	r3, [r2, #72]	; 0x48
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <MX_DMA_Init+0x80>)
 8007a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	607b      	str	r3, [r7, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007a5a:	4b18      	ldr	r3, [pc, #96]	; (8007abc <MX_DMA_Init+0x80>)
 8007a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5e:	4a17      	ldr	r2, [pc, #92]	; (8007abc <MX_DMA_Init+0x80>)
 8007a60:	f043 0301 	orr.w	r3, r3, #1
 8007a64:	6493      	str	r3, [r2, #72]	; 0x48
 8007a66:	4b15      	ldr	r3, [pc, #84]	; (8007abc <MX_DMA_Init+0x80>)
 8007a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007a72:	2200      	movs	r2, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	201d      	movs	r0, #29
 8007a78:	f001 f9c2 	bl	8008e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007a7c:	201d      	movs	r0, #29
 8007a7e:	f001 f9d9 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8007a82:	2200      	movs	r2, #0
 8007a84:	2105      	movs	r1, #5
 8007a86:	201e      	movs	r0, #30
 8007a88:	f001 f9ba 	bl	8008e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007a8c:	201e      	movs	r0, #30
 8007a8e:	f001 f9d1 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007a92:	2200      	movs	r2, #0
 8007a94:	2100      	movs	r1, #0
 8007a96:	201f      	movs	r0, #31
 8007a98:	f001 f9b2 	bl	8008e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007a9c:	201f      	movs	r0, #31
 8007a9e:	f001 f9c9 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	2020      	movs	r0, #32
 8007aa8:	f001 f9aa 	bl	8008e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007aac:	2020      	movs	r0, #32
 8007aae:	f001 f9c1 	bl	8008e34 <HAL_NVIC_EnableIRQ>

}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40021000 	.word	0x40021000

08007ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08c      	sub	sp, #48	; 0x30
 8007ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac6:	f107 031c 	add.w	r3, r7, #28
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ad6:	4b4a      	ldr	r3, [pc, #296]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ada:	4a49      	ldr	r2, [pc, #292]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007adc:	f043 0310 	orr.w	r3, r3, #16
 8007ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ae2:	4b47      	ldr	r3, [pc, #284]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae6:	f003 0310 	and.w	r3, r3, #16
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007aee:	4b44      	ldr	r3, [pc, #272]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af2:	4a43      	ldr	r2, [pc, #268]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007af4:	f043 0304 	orr.w	r3, r3, #4
 8007af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007afa:	4b41      	ldr	r3, [pc, #260]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007b06:	4b3e      	ldr	r3, [pc, #248]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0a:	4a3d      	ldr	r2, [pc, #244]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b12:	4b3b      	ldr	r3, [pc, #236]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b1e:	4b38      	ldr	r3, [pc, #224]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	4a37      	ldr	r2, [pc, #220]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b24:	f043 0301 	orr.w	r3, r3, #1
 8007b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b2a:	4b35      	ldr	r3, [pc, #212]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b36:	4b32      	ldr	r3, [pc, #200]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3a:	4a31      	ldr	r2, [pc, #196]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b3c:	f043 0302 	orr.w	r3, r3, #2
 8007b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b42:	4b2f      	ldr	r3, [pc, #188]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	60bb      	str	r3, [r7, #8]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b4e:	4b2c      	ldr	r3, [pc, #176]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b52:	4a2b      	ldr	r2, [pc, #172]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b54:	f043 0308 	orr.w	r3, r3, #8
 8007b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b5a:	4b29      	ldr	r3, [pc, #164]	; (8007c00 <MX_GPIO_Init+0x140>)
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NCS_GPIO_Port, SPI1_NCS_Pin, GPIO_PIN_SET);
 8007b66:	2201      	movs	r2, #1
 8007b68:	2110      	movs	r1, #16
 8007b6a:	4826      	ldr	r0, [pc, #152]	; (8007c04 <MX_GPIO_Init+0x144>)
 8007b6c:	f001 ffa4 	bl	8009ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_2, GPIO_PIN_RESET);
 8007b70:	2200      	movs	r2, #0
 8007b72:	f640 6104 	movw	r1, #3588	; 0xe04
 8007b76:	4824      	ldr	r0, [pc, #144]	; (8007c08 <MX_GPIO_Init+0x148>)
 8007b78:	f001 ff9e 	bl	8009ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2108      	movs	r1, #8
 8007b80:	4822      	ldr	r0, [pc, #136]	; (8007c0c <MX_GPIO_Init+0x14c>)
 8007b82:	f001 ff99 	bl	8009ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_Pin;
 8007b86:	2310      	movs	r3, #16
 8007b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b92:	2300      	movs	r3, #0
 8007b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8007b96:	f107 031c 	add.w	r3, r7, #28
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4819      	ldr	r0, [pc, #100]	; (8007c04 <MX_GPIO_Init+0x144>)
 8007b9e:	f001 fd05 	bl	80095ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bb0:	f107 031c 	add.w	r3, r7, #28
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4814      	ldr	r0, [pc, #80]	; (8007c08 <MX_GPIO_Init+0x148>)
 8007bb8:	f001 fcf8 	bl	80095ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_2;
 8007bbc:	f640 6304 	movw	r3, #3588	; 0xe04
 8007bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bce:	f107 031c 	add.w	r3, r7, #28
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	480c      	ldr	r0, [pc, #48]	; (8007c08 <MX_GPIO_Init+0x148>)
 8007bd6:	f001 fce9 	bl	80095ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007bda:	2308      	movs	r3, #8
 8007bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bde:	2301      	movs	r3, #1
 8007be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007be2:	2302      	movs	r3, #2
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007be6:	2300      	movs	r3, #0
 8007be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007bea:	f107 031c 	add.w	r3, r7, #28
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4806      	ldr	r0, [pc, #24]	; (8007c0c <MX_GPIO_Init+0x14c>)
 8007bf2:	f001 fcdb 	bl	80095ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007bf6:	bf00      	nop
 8007bf8:	3730      	adds	r7, #48	; 0x30
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40021000 	.word	0x40021000
 8007c04:	42020000 	.word	0x42020000
 8007c08:	42020c00 	.word	0x42020c00
 8007c0c:	42021c00 	.word	0x42021c00

08007c10 <debug_print>:

/* USER CODE BEGIN 4 */
uint8_t debug_tx_buffer[100];

void debug_print(char *fmt, ...){
 8007c10:	b40f      	push	{r0, r1, r2, r3}
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
	va_list args;

	va_start(args, fmt);
 8007c18:	f107 0314 	add.w	r3, r7, #20
 8007c1c:	607b      	str	r3, [r7, #4]
	vsprintf((char *)debug_tx_buffer, fmt, args);
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6939      	ldr	r1, [r7, #16]
 8007c22:	480b      	ldr	r0, [pc, #44]	; (8007c50 <debug_print+0x40>)
 8007c24:	f008 ff66 	bl	8010af4 <vsiprintf>
	va_end(args);

	HAL_UART_Transmit_DMA(&hlpuart1, debug_tx_buffer, strlen((const char *)debug_tx_buffer));
 8007c28:	4809      	ldr	r0, [pc, #36]	; (8007c50 <debug_print+0x40>)
 8007c2a:	f7f8 fb03 	bl	8000234 <strlen>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	4906      	ldr	r1, [pc, #24]	; (8007c50 <debug_print+0x40>)
 8007c36:	4807      	ldr	r0, [pc, #28]	; (8007c54 <debug_print+0x44>)
 8007c38:	f006 ff6a 	bl	800eb10 <HAL_UART_Transmit_DMA>
	HAL_Delay(1);
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	f001 f803 	bl	8008c48 <HAL_Delay>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c4c:	b004      	add	sp, #16
 8007c4e:	4770      	bx	lr
 8007c50:	200006c4 	.word	0x200006c4
 8007c54:	200000e0 	.word	0x200000e0

08007c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d101      	bne.n	8007c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007c6a:	f000 ffcd 	bl	8008c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	40012c00 	.word	0x40012c00

08007c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007c80:	b672      	cpsid	i
}
 8007c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007c84:	e7fe      	b.n	8007c84 <Error_Handler+0x8>
	...

08007c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c8e:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <HAL_MspInit+0x44>)
 8007c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c92:	4a0e      	ldr	r2, [pc, #56]	; (8007ccc <HAL_MspInit+0x44>)
 8007c94:	f043 0301 	orr.w	r3, r3, #1
 8007c98:	6613      	str	r3, [r2, #96]	; 0x60
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <HAL_MspInit+0x44>)
 8007c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <HAL_MspInit+0x44>)
 8007ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007caa:	4a08      	ldr	r2, [pc, #32]	; (8007ccc <HAL_MspInit+0x44>)
 8007cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <HAL_MspInit+0x44>)
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40021000 	.word	0x40021000

08007cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b0ae      	sub	sp, #184	; 0xb8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	605a      	str	r2, [r3, #4]
 8007ce2:	609a      	str	r2, [r3, #8]
 8007ce4:	60da      	str	r2, [r3, #12]
 8007ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ce8:	f107 0310 	add.w	r3, r7, #16
 8007cec:	2294      	movs	r2, #148	; 0x94
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f008 faba 	bl	801026a <memset>
  if(hi2c->Instance==I2C4)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a22      	ldr	r2, [pc, #136]	; (8007d84 <HAL_I2C_MspInit+0xb4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d13c      	bne.n	8007d7a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8007d00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d04:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8007d06:	2300      	movs	r3, #0
 8007d08:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007d0a:	f107 0310 	add.w	r3, r7, #16
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f003 f8c4 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007d1a:	f7ff ffaf 	bl	8007c7c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d1e:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <HAL_I2C_MspInit+0xb8>)
 8007d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d22:	4a19      	ldr	r2, [pc, #100]	; (8007d88 <HAL_I2C_MspInit+0xb8>)
 8007d24:	f043 0308 	orr.w	r3, r3, #8
 8007d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d2a:	4b17      	ldr	r3, [pc, #92]	; (8007d88 <HAL_I2C_MspInit+0xb8>)
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007d36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d3e:	2312      	movs	r3, #18
 8007d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007d50:	2304      	movs	r3, #4
 8007d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d56:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	480b      	ldr	r0, [pc, #44]	; (8007d8c <HAL_I2C_MspInit+0xbc>)
 8007d5e:	f001 fc25 	bl	80095ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007d62:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <HAL_I2C_MspInit+0xb8>)
 8007d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d66:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <HAL_I2C_MspInit+0xb8>)
 8007d68:	f043 0302 	orr.w	r3, r3, #2
 8007d6c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <HAL_I2C_MspInit+0xb8>)
 8007d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	60bb      	str	r3, [r7, #8]
 8007d78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8007d7a:	bf00      	nop
 8007d7c:	37b8      	adds	r7, #184	; 0xb8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40008400 	.word	0x40008400
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	42020c00 	.word	0x42020c00

08007d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b0ae      	sub	sp, #184	; 0xb8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007da8:	f107 0310 	add.w	r3, r7, #16
 8007dac:	2294      	movs	r2, #148	; 0x94
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f008 fa5a 	bl	801026a <memset>
  if(huart->Instance==LPUART1)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a59      	ldr	r2, [pc, #356]	; (8007f20 <HAL_UART_MspInit+0x190>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	f040 80ab 	bne.w	8007f18 <HAL_UART_MspInit+0x188>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8007dc2:	2320      	movs	r3, #32
 8007dc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007dca:	f107 0310 	add.w	r3, r7, #16
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f003 f864 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007dda:	f7ff ff4f 	bl	8007c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007dde:	4b51      	ldr	r3, [pc, #324]	; (8007f24 <HAL_UART_MspInit+0x194>)
 8007de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de2:	4a50      	ldr	r2, [pc, #320]	; (8007f24 <HAL_UART_MspInit+0x194>)
 8007de4:	f043 0301 	orr.w	r3, r3, #1
 8007de8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8007dea:	4b4e      	ldr	r3, [pc, #312]	; (8007f24 <HAL_UART_MspInit+0x194>)
 8007dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007df6:	4b4b      	ldr	r3, [pc, #300]	; (8007f24 <HAL_UART_MspInit+0x194>)
 8007df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfa:	4a4a      	ldr	r2, [pc, #296]	; (8007f24 <HAL_UART_MspInit+0x194>)
 8007dfc:	f043 0302 	orr.w	r3, r3, #2
 8007e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e02:	4b48      	ldr	r3, [pc, #288]	; (8007f24 <HAL_UART_MspInit+0x194>)
 8007e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	60bb      	str	r3, [r7, #8]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007e0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007e12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e16:	2302      	movs	r3, #2
 8007e18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8007e28:	2308      	movs	r3, #8
 8007e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007e32:	4619      	mov	r1, r3
 8007e34:	483c      	ldr	r0, [pc, #240]	; (8007f28 <HAL_UART_MspInit+0x198>)
 8007e36:	f001 fbb9 	bl	80095ac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8007e3a:	4b3c      	ldr	r3, [pc, #240]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e3c:	4a3c      	ldr	r2, [pc, #240]	; (8007f30 <HAL_UART_MspInit+0x1a0>)
 8007e3e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8007e40:	4b3a      	ldr	r3, [pc, #232]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e42:	2224      	movs	r2, #36	; 0x24
 8007e44:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e46:	4b39      	ldr	r3, [pc, #228]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e48:	2210      	movs	r2, #16
 8007e4a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e4c:	4b37      	ldr	r3, [pc, #220]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e52:	4b36      	ldr	r3, [pc, #216]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e54:	2280      	movs	r2, #128	; 0x80
 8007e56:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e58:	4b34      	ldr	r3, [pc, #208]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e5e:	4b33      	ldr	r3, [pc, #204]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8007e64:	4b31      	ldr	r3, [pc, #196]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e6a:	4b30      	ldr	r3, [pc, #192]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8007e72:	482e      	ldr	r0, [pc, #184]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e74:	f000 ffec 	bl	8008e50 <HAL_DMA_Init>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8007e7e:	f7ff fefd 	bl	8007c7c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8007e82:	2110      	movs	r1, #16
 8007e84:	4829      	ldr	r0, [pc, #164]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e86:	f001 fac1 	bl	800940c <HAL_DMA_ConfigChannelAttributes>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8007e90:	f7ff fef4 	bl	8007c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e98:	67da      	str	r2, [r3, #124]	; 0x7c
 8007e9a:	4a24      	ldr	r2, [pc, #144]	; (8007f2c <HAL_UART_MspInit+0x19c>)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8007ea0:	4b24      	ldr	r3, [pc, #144]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007ea2:	4a25      	ldr	r2, [pc, #148]	; (8007f38 <HAL_UART_MspInit+0x1a8>)
 8007ea4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007ea6:	4b23      	ldr	r3, [pc, #140]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007ea8:	2223      	movs	r2, #35	; 0x23
 8007eaa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007eac:	4b21      	ldr	r3, [pc, #132]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007eb2:	4b20      	ldr	r3, [pc, #128]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007eb8:	4b1e      	ldr	r3, [pc, #120]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007eba:	2280      	movs	r2, #128	; 0x80
 8007ebc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ec4:	4b1b      	ldr	r3, [pc, #108]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8007eca:	4b1a      	ldr	r3, [pc, #104]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007ed0:	4b18      	ldr	r3, [pc, #96]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ed6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007ed8:	4816      	ldr	r0, [pc, #88]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007eda:	f000 ffb9 	bl	8008e50 <HAL_DMA_Init>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8007ee4:	f7ff feca 	bl	8007c7c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8007ee8:	2110      	movs	r1, #16
 8007eea:	4812      	ldr	r0, [pc, #72]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007eec:	f001 fa8e 	bl	800940c <HAL_DMA_ConfigChannelAttributes>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8007ef6:	f7ff fec1 	bl	8007c7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a0d      	ldr	r2, [pc, #52]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007f02:	4a0c      	ldr	r2, [pc, #48]	; (8007f34 <HAL_UART_MspInit+0x1a4>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2105      	movs	r1, #5
 8007f0c:	2042      	movs	r0, #66	; 0x42
 8007f0e:	f000 ff77 	bl	8008e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8007f12:	2042      	movs	r0, #66	; 0x42
 8007f14:	f000 ff8e 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8007f18:	bf00      	nop
 8007f1a:	37b8      	adds	r7, #184	; 0xb8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40008000 	.word	0x40008000
 8007f24:	40021000 	.word	0x40021000
 8007f28:	42020400 	.word	0x42020400
 8007f2c:	20000174 	.word	0x20000174
 8007f30:	40020008 	.word	0x40020008
 8007f34:	200001dc 	.word	0x200001dc
 8007f38:	4002001c 	.word	0x4002001c

08007f3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b0a8      	sub	sp, #160	; 0xa0
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f44:	f107 030c 	add.w	r3, r7, #12
 8007f48:	2294      	movs	r2, #148	; 0x94
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f008 f98c 	bl	801026a <memset>
  if(hrtc->Instance==RTC)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a1a      	ldr	r2, [pc, #104]	; (8007fc0 <HAL_RTC_MspInit+0x84>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d12c      	bne.n	8007fb6 <HAL_RTC_MspInit+0x7a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f60:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f6a:	f107 030c 	add.w	r3, r7, #12
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f002 ff94 	bl	800ae9c <HAL_RCCEx_PeriphCLKConfig>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007f7a:	f7ff fe7f 	bl	8007c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007f7e:	4b11      	ldr	r3, [pc, #68]	; (8007fc4 <HAL_RTC_MspInit+0x88>)
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	4a0f      	ldr	r2, [pc, #60]	; (8007fc4 <HAL_RTC_MspInit+0x88>)
 8007f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <HAL_RTC_MspInit+0x88>)
 8007f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f92:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <HAL_RTC_MspInit+0x88>)
 8007f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f98:	6593      	str	r3, [r2, #88]	; 0x58
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <HAL_RTC_MspInit+0x88>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fa2:	60bb      	str	r3, [r7, #8]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2100      	movs	r1, #0
 8007faa:	2002      	movs	r0, #2
 8007fac:	f000 ff28 	bl	8008e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8007fb0:	2002      	movs	r0, #2
 8007fb2:	f000 ff3f 	bl	8008e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007fb6:	bf00      	nop
 8007fb8:	37a0      	adds	r7, #160	; 0xa0
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	40002800 	.word	0x40002800
 8007fc4:	40021000 	.word	0x40021000

08007fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	; 0x28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fd0:	f107 0314 	add.w	r3, r7, #20
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	605a      	str	r2, [r3, #4]
 8007fda:	609a      	str	r2, [r3, #8]
 8007fdc:	60da      	str	r2, [r3, #12]
 8007fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a17      	ldr	r2, [pc, #92]	; (8008044 <HAL_SPI_MspInit+0x7c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d127      	bne.n	800803a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007fea:	4b17      	ldr	r3, [pc, #92]	; (8008048 <HAL_SPI_MspInit+0x80>)
 8007fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fee:	4a16      	ldr	r2, [pc, #88]	; (8008048 <HAL_SPI_MspInit+0x80>)
 8007ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8007ff6:	4b14      	ldr	r3, [pc, #80]	; (8008048 <HAL_SPI_MspInit+0x80>)
 8007ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008002:	4b11      	ldr	r3, [pc, #68]	; (8008048 <HAL_SPI_MspInit+0x80>)
 8008004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008006:	4a10      	ldr	r2, [pc, #64]	; (8008048 <HAL_SPI_MspInit+0x80>)
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800800e:	4b0e      	ldr	r3, [pc, #56]	; (8008048 <HAL_SPI_MspInit+0x80>)
 8008010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800801a:	23e0      	movs	r3, #224	; 0xe0
 800801c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800801e:	2302      	movs	r3, #2
 8008020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008022:	2300      	movs	r3, #0
 8008024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008026:	2300      	movs	r3, #0
 8008028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800802a:	2305      	movs	r3, #5
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800802e:	f107 0314 	add.w	r3, r7, #20
 8008032:	4619      	mov	r1, r3
 8008034:	4805      	ldr	r0, [pc, #20]	; (800804c <HAL_SPI_MspInit+0x84>)
 8008036:	f001 fab9 	bl	80095ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800803a:	bf00      	nop
 800803c:	3728      	adds	r7, #40	; 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40013000 	.word	0x40013000
 8008048:	40021000 	.word	0x40021000
 800804c:	42020000 	.word	0x42020000

08008050 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a08      	ldr	r2, [pc, #32]	; (8008080 <HAL_SPI_MspDeInit+0x30>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d109      	bne.n	8008076 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8008062:	4b08      	ldr	r3, [pc, #32]	; (8008084 <HAL_SPI_MspDeInit+0x34>)
 8008064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008066:	4a07      	ldr	r2, [pc, #28]	; (8008084 <HAL_SPI_MspDeInit+0x34>)
 8008068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800806c:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800806e:	21e0      	movs	r1, #224	; 0xe0
 8008070:	4805      	ldr	r0, [pc, #20]	; (8008088 <HAL_SPI_MspDeInit+0x38>)
 8008072:	f001 fc1b 	bl	80098ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	40013000 	.word	0x40013000
 8008084:	40021000 	.word	0x40021000
 8008088:	42020000 	.word	0x42020000

0800808c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	; 0x28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a67      	ldr	r2, [pc, #412]	; (8008238 <HAL_SAI_MspInit+0x1ac>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d160      	bne.n	8008160 <HAL_SAI_MspInit+0xd4>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800809e:	4b67      	ldr	r3, [pc, #412]	; (800823c <HAL_SAI_MspInit+0x1b0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10b      	bne.n	80080be <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80080a6:	4b66      	ldr	r3, [pc, #408]	; (8008240 <HAL_SAI_MspInit+0x1b4>)
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	4a65      	ldr	r2, [pc, #404]	; (8008240 <HAL_SAI_MspInit+0x1b4>)
 80080ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080b0:	6613      	str	r3, [r2, #96]	; 0x60
 80080b2:	4b63      	ldr	r3, [pc, #396]	; (8008240 <HAL_SAI_MspInit+0x1b4>)
 80080b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80080be:	4b5f      	ldr	r3, [pc, #380]	; (800823c <HAL_SAI_MspInit+0x1b0>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	4a5d      	ldr	r2, [pc, #372]	; (800823c <HAL_SAI_MspInit+0x1b0>)
 80080c6:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80080c8:	2370      	movs	r3, #112	; 0x70
 80080ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080cc:	2302      	movs	r3, #2
 80080ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080d4:	2300      	movs	r3, #0
 80080d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80080d8:	230d      	movs	r3, #13
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080dc:	f107 0314 	add.w	r3, r7, #20
 80080e0:	4619      	mov	r1, r3
 80080e2:	4858      	ldr	r0, [pc, #352]	; (8008244 <HAL_SAI_MspInit+0x1b8>)
 80080e4:	f001 fa62 	bl	80095ac <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel3;
 80080e8:	4b57      	ldr	r3, [pc, #348]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 80080ea:	4a58      	ldr	r2, [pc, #352]	; (800824c <HAL_SAI_MspInit+0x1c0>)
 80080ec:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80080ee:	4b56      	ldr	r3, [pc, #344]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 80080f0:	2225      	movs	r2, #37	; 0x25
 80080f2:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80080f4:	4b54      	ldr	r3, [pc, #336]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 80080f6:	2210      	movs	r2, #16
 80080f8:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80080fa:	4b53      	ldr	r3, [pc, #332]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8008100:	4b51      	ldr	r3, [pc, #324]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 8008102:	2280      	movs	r2, #128	; 0x80
 8008104:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008106:	4b50      	ldr	r3, [pc, #320]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 8008108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800810c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800810e:	4b4e      	ldr	r3, [pc, #312]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 8008110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008114:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8008116:	4b4c      	ldr	r3, [pc, #304]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 8008118:	2220      	movs	r2, #32
 800811a:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 800811c:	4b4a      	ldr	r3, [pc, #296]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 800811e:	2200      	movs	r2, #0
 8008120:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8008122:	4849      	ldr	r0, [pc, #292]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 8008124:	f000 fe94 	bl	8008e50 <HAL_DMA_Init>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <HAL_SAI_MspInit+0xa6>
    {
      Error_Handler();
 800812e:	f7ff fda5 	bl	8007c7c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_sai1_a, DMA_CHANNEL_NPRIV) != HAL_OK)
 8008132:	2110      	movs	r1, #16
 8008134:	4844      	ldr	r0, [pc, #272]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 8008136:	f001 f969 	bl	800940c <HAL_DMA_ConfigChannelAttributes>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8008140:	f7ff fd9c 	bl	8007c7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a40      	ldr	r2, [pc, #256]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 8008148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800814c:	4a3e      	ldr	r2, [pc, #248]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6293      	str	r3, [r2, #40]	; 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a3c      	ldr	r2, [pc, #240]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 8008156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800815a:	4a3b      	ldr	r2, [pc, #236]	; (8008248 <HAL_SAI_MspInit+0x1bc>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6293      	str	r3, [r2, #40]	; 0x28

    }
    if(hsai->Instance==SAI1_Block_B)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a3a      	ldr	r2, [pc, #232]	; (8008250 <HAL_SAI_MspInit+0x1c4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d161      	bne.n	800822e <HAL_SAI_MspInit+0x1a2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800816a:	4b34      	ldr	r3, [pc, #208]	; (800823c <HAL_SAI_MspInit+0x1b0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10b      	bne.n	800818a <HAL_SAI_MspInit+0xfe>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8008172:	4b33      	ldr	r3, [pc, #204]	; (8008240 <HAL_SAI_MspInit+0x1b4>)
 8008174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008176:	4a32      	ldr	r2, [pc, #200]	; (8008240 <HAL_SAI_MspInit+0x1b4>)
 8008178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800817c:	6613      	str	r3, [r2, #96]	; 0x60
 800817e:	4b30      	ldr	r3, [pc, #192]	; (8008240 <HAL_SAI_MspInit+0x1b4>)
 8008180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800818a:	4b2c      	ldr	r3, [pc, #176]	; (800823c <HAL_SAI_MspInit+0x1b0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	4a2a      	ldr	r2, [pc, #168]	; (800823c <HAL_SAI_MspInit+0x1b0>)
 8008192:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008194:	2308      	movs	r3, #8
 8008196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008198:	2302      	movs	r3, #2
 800819a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819c:	2300      	movs	r3, #0
 800819e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081a0:	2300      	movs	r3, #0
 80081a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80081a4:	230d      	movs	r3, #13
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80081a8:	f107 0314 	add.w	r3, r7, #20
 80081ac:	4619      	mov	r1, r3
 80081ae:	4825      	ldr	r0, [pc, #148]	; (8008244 <HAL_SAI_MspInit+0x1b8>)
 80081b0:	f001 f9fc 	bl	80095ac <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Channel4;
 80081b4:	4b27      	ldr	r3, [pc, #156]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081b6:	4a28      	ldr	r2, [pc, #160]	; (8008258 <HAL_SAI_MspInit+0x1cc>)
 80081b8:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80081ba:	4b26      	ldr	r3, [pc, #152]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081bc:	2226      	movs	r2, #38	; 0x26
 80081be:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80081c0:	4b24      	ldr	r3, [pc, #144]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80081c6:	4b23      	ldr	r3, [pc, #140]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80081cc:	4b21      	ldr	r3, [pc, #132]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081ce:	2280      	movs	r2, #128	; 0x80
 80081d0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80081d2:	4b20      	ldr	r3, [pc, #128]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081d8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80081da:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081e0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081e4:	2220      	movs	r2, #32
 80081e6:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_MEDIUM;
 80081e8:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80081f0:	4818      	ldr	r0, [pc, #96]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 80081f2:	f000 fe2d 	bl	8008e50 <HAL_DMA_Init>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 80081fc:	f7ff fd3e 	bl	8007c7c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_sai1_b, DMA_CHANNEL_NPRIV) != HAL_OK)
 8008200:	2110      	movs	r1, #16
 8008202:	4814      	ldr	r0, [pc, #80]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 8008204:	f001 f902 	bl	800940c <HAL_DMA_ConfigChannelAttributes>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <HAL_SAI_MspInit+0x186>
    {
      Error_Handler();
 800820e:	f7ff fd35 	bl	8007c7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a0f      	ldr	r2, [pc, #60]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 8008216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800821a:	4a0e      	ldr	r2, [pc, #56]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a0c      	ldr	r2, [pc, #48]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 8008224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008228:	4a0a      	ldr	r2, [pc, #40]	; (8008254 <HAL_SAI_MspInit+0x1c8>)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6293      	str	r3, [r2, #40]	; 0x28
    }
}
 800822e:	bf00      	nop
 8008230:	3728      	adds	r7, #40	; 0x28
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	40015404 	.word	0x40015404
 800823c:	20000728 	.word	0x20000728
 8008240:	40021000 	.word	0x40021000
 8008244:	42021000 	.word	0x42021000
 8008248:	2000039c 	.word	0x2000039c
 800824c:	40020030 	.word	0x40020030
 8008250:	40015424 	.word	0x40015424
 8008254:	20000404 	.word	0x20000404
 8008258:	40020044 	.word	0x40020044

0800825c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08c      	sub	sp, #48	; 0x30
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800826c:	2200      	movs	r2, #0
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	202a      	movs	r0, #42	; 0x2a
 8008272:	f000 fdc5 	bl	8008e00 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008276:	202a      	movs	r0, #42	; 0x2a
 8008278:	f000 fddc 	bl	8008e34 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800827c:	4b1e      	ldr	r3, [pc, #120]	; (80082f8 <HAL_InitTick+0x9c>)
 800827e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008280:	4a1d      	ldr	r2, [pc, #116]	; (80082f8 <HAL_InitTick+0x9c>)
 8008282:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008286:	6613      	str	r3, [r2, #96]	; 0x60
 8008288:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <HAL_InitTick+0x9c>)
 800828a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800828c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008294:	f107 0210 	add.w	r2, r7, #16
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f002 fcf8 	bl	800ac94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80082a4:	f002 fce2 	bl	800ac6c <HAL_RCC_GetPCLK2Freq>
 80082a8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	4a13      	ldr	r2, [pc, #76]	; (80082fc <HAL_InitTick+0xa0>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	0c9b      	lsrs	r3, r3, #18
 80082b4:	3b01      	subs	r3, #1
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80082b8:	4b11      	ldr	r3, [pc, #68]	; (8008300 <HAL_InitTick+0xa4>)
 80082ba:	4a12      	ldr	r2, [pc, #72]	; (8008304 <HAL_InitTick+0xa8>)
 80082bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80082be:	4b10      	ldr	r3, [pc, #64]	; (8008300 <HAL_InitTick+0xa4>)
 80082c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80082c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80082c6:	4a0e      	ldr	r2, [pc, #56]	; (8008300 <HAL_InitTick+0xa4>)
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <HAL_InitTick+0xa4>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082d2:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <HAL_InitTick+0xa4>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80082d8:	4809      	ldr	r0, [pc, #36]	; (8008300 <HAL_InitTick+0xa4>)
 80082da:	f006 f8f7 	bl	800e4cc <HAL_TIM_Base_Init>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80082e4:	4806      	ldr	r0, [pc, #24]	; (8008300 <HAL_InitTick+0xa4>)
 80082e6:	f006 f953 	bl	800e590 <HAL_TIM_Base_Start_IT>
 80082ea:	4603      	mov	r3, r0
 80082ec:	e000      	b.n	80082f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3730      	adds	r7, #48	; 0x30
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40021000 	.word	0x40021000
 80082fc:	431bde83 	.word	0x431bde83
 8008300:	2000072c 	.word	0x2000072c
 8008304:	40012c00 	.word	0x40012c00

08008308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800830c:	e7fe      	b.n	800830c <NMI_Handler+0x4>

0800830e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800830e:	b480      	push	{r7}
 8008310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008312:	e7fe      	b.n	8008312 <HardFault_Handler+0x4>

08008314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008314:	b480      	push	{r7}
 8008316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008318:	e7fe      	b.n	8008318 <MemManage_Handler+0x4>

0800831a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800831a:	b480      	push	{r7}
 800831c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800831e:	e7fe      	b.n	800831e <BusFault_Handler+0x4>

08008320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008320:	b480      	push	{r7}
 8008322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008324:	e7fe      	b.n	8008324 <UsageFault_Handler+0x4>

08008326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008326:	b480      	push	{r7}
 8008328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800832a:	bf00      	nop
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008338:	bf00      	nop
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008342:	b480      	push	{r7}
 8008344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008346:	bf00      	nop
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
	...

08008360 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupts through EXTI line 17.
  */
void RTC_IRQHandler(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8008364:	4802      	ldr	r0, [pc, #8]	; (8008370 <RTC_IRQHandler+0x10>)
 8008366:	f004 fd99 	bl	800ce9c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800836a:	bf00      	nop
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000244 	.word	0x20000244

08008374 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8008378:	4802      	ldr	r0, [pc, #8]	; (8008384 <DMA1_Channel1_IRQHandler+0x10>)
 800837a:	f000 ff47 	bl	800920c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800837e:	bf00      	nop
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000174 	.word	0x20000174

08008388 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800838c:	4802      	ldr	r0, [pc, #8]	; (8008398 <DMA1_Channel2_IRQHandler+0x10>)
 800838e:	f000 ff3d 	bl	800920c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008392:	bf00      	nop
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	200001dc 	.word	0x200001dc

0800839c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80083a0:	4802      	ldr	r0, [pc, #8]	; (80083ac <DMA1_Channel3_IRQHandler+0x10>)
 80083a2:	f000 ff33 	bl	800920c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80083a6:	bf00      	nop
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	2000039c 	.word	0x2000039c

080083b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80083b4:	4802      	ldr	r0, [pc, #8]	; (80083c0 <DMA1_Channel4_IRQHandler+0x10>)
 80083b6:	f000 ff29 	bl	800920c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80083ba:	bf00      	nop
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20000404 	.word	0x20000404

080083c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083c8:	4802      	ldr	r0, [pc, #8]	; (80083d4 <TIM1_UP_IRQHandler+0x10>)
 80083ca:	f006 f951 	bl	800e670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80083ce:	bf00      	nop
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	2000072c 	.word	0x2000072c

080083d8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80083dc:	4802      	ldr	r0, [pc, #8]	; (80083e8 <LPUART1_IRQHandler+0x10>)
 80083de:	f006 fc17 	bl	800ec10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80083e2:	bf00      	nop
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200000e0 	.word	0x200000e0

080083ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
  return 1;
 80083f0:	2301      	movs	r3, #1
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <_kill>:

int _kill(int pid, int sig)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008406:	f007 fec7 	bl	8010198 <__errno>
 800840a:	4603      	mov	r3, r0
 800840c:	2216      	movs	r2, #22
 800840e:	601a      	str	r2, [r3, #0]
  return -1;
 8008410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <_exit>:

void _exit (int status)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff ffe7 	bl	80083fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800842e:	e7fe      	b.n	800842e <_exit+0x12>

08008430 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800843c:	2300      	movs	r3, #0
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	e00a      	b.n	8008458 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008442:	e000      	b.n	8008446 <_read+0x16>
 8008444:	bf00      	nop
 8008446:	4601      	mov	r1, r0
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	60ba      	str	r2, [r7, #8]
 800844e:	b2ca      	uxtb	r2, r1
 8008450:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	3301      	adds	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	dbf0      	blt.n	8008442 <_read+0x12>
  }

  return len;
 8008460:	687b      	ldr	r3, [r7, #4]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b086      	sub	sp, #24
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008476:	2300      	movs	r3, #0
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	e009      	b.n	8008490 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	60ba      	str	r2, [r7, #8]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	e000      	b.n	800848a <_write+0x20>
 8008488:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	3301      	adds	r3, #1
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	dbf1      	blt.n	800847c <_write+0x12>
  }
  return len;
 8008498:	687b      	ldr	r3, [r7, #4]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <_close>:

int _close(int file)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084ca:	605a      	str	r2, [r3, #4]
  return 0;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <_isatty>:

int _isatty(int file)
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80084e2:	2301      	movs	r3, #1
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
	...

0800850c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008514:	4a14      	ldr	r2, [pc, #80]	; (8008568 <_sbrk+0x5c>)
 8008516:	4b15      	ldr	r3, [pc, #84]	; (800856c <_sbrk+0x60>)
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008520:	4b13      	ldr	r3, [pc, #76]	; (8008570 <_sbrk+0x64>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008528:	4b11      	ldr	r3, [pc, #68]	; (8008570 <_sbrk+0x64>)
 800852a:	4a12      	ldr	r2, [pc, #72]	; (8008574 <_sbrk+0x68>)
 800852c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800852e:	4b10      	ldr	r3, [pc, #64]	; (8008570 <_sbrk+0x64>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4413      	add	r3, r2
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	429a      	cmp	r2, r3
 800853a:	d207      	bcs.n	800854c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800853c:	f007 fe2c 	bl	8010198 <__errno>
 8008540:	4603      	mov	r3, r0
 8008542:	220c      	movs	r2, #12
 8008544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800854a:	e009      	b.n	8008560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800854c:	4b08      	ldr	r3, [pc, #32]	; (8008570 <_sbrk+0x64>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008552:	4b07      	ldr	r3, [pc, #28]	; (8008570 <_sbrk+0x64>)
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4413      	add	r3, r2
 800855a:	4a05      	ldr	r2, [pc, #20]	; (8008570 <_sbrk+0x64>)
 800855c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800855e:	68fb      	ldr	r3, [r7, #12]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20030000 	.word	0x20030000
 800856c:	00000400 	.word	0x00000400
 8008570:	20000778 	.word	0x20000778
 8008574:	20000790 	.word	0x20000790

08008578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <SystemInit+0x20>)
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008582:	4a05      	ldr	r2, [pc, #20]	; (8008598 <SystemInit+0x20>)
 8008584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800858c:	bf00      	nop
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	e000ed00 	.word	0xe000ed00

0800859c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80085a2:	4b4f      	ldr	r3, [pc, #316]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d107      	bne.n	80085be <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80085ae:	4b4c      	ldr	r3, [pc, #304]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 80085b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085b4:	0a1b      	lsrs	r3, r3, #8
 80085b6:	f003 030f 	and.w	r3, r3, #15
 80085ba:	617b      	str	r3, [r7, #20]
 80085bc:	e005      	b.n	80085ca <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80085be:	4b48      	ldr	r3, [pc, #288]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	091b      	lsrs	r3, r3, #4
 80085c4:	f003 030f 	and.w	r3, r3, #15
 80085c8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80085ca:	4a46      	ldr	r2, [pc, #280]	; (80086e4 <SystemCoreClockUpdate+0x148>)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085d4:	4b42      	ldr	r3, [pc, #264]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f003 030c 	and.w	r3, r3, #12
 80085dc:	2b0c      	cmp	r3, #12
 80085de:	d866      	bhi.n	80086ae <SystemCoreClockUpdate+0x112>
 80085e0:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <SystemCoreClockUpdate+0x4c>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	0800861d 	.word	0x0800861d
 80085ec:	080086af 	.word	0x080086af
 80085f0:	080086af 	.word	0x080086af
 80085f4:	080086af 	.word	0x080086af
 80085f8:	08008625 	.word	0x08008625
 80085fc:	080086af 	.word	0x080086af
 8008600:	080086af 	.word	0x080086af
 8008604:	080086af 	.word	0x080086af
 8008608:	0800862d 	.word	0x0800862d
 800860c:	080086af 	.word	0x080086af
 8008610:	080086af 	.word	0x080086af
 8008614:	080086af 	.word	0x080086af
 8008618:	08008635 	.word	0x08008635
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800861c:	4a32      	ldr	r2, [pc, #200]	; (80086e8 <SystemCoreClockUpdate+0x14c>)
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	6013      	str	r3, [r2, #0]
      break;
 8008622:	e048      	b.n	80086b6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8008624:	4b30      	ldr	r3, [pc, #192]	; (80086e8 <SystemCoreClockUpdate+0x14c>)
 8008626:	4a31      	ldr	r2, [pc, #196]	; (80086ec <SystemCoreClockUpdate+0x150>)
 8008628:	601a      	str	r2, [r3, #0]
      break;
 800862a:	e044      	b.n	80086b6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800862c:	4b2e      	ldr	r3, [pc, #184]	; (80086e8 <SystemCoreClockUpdate+0x14c>)
 800862e:	4a30      	ldr	r2, [pc, #192]	; (80086f0 <SystemCoreClockUpdate+0x154>)
 8008630:	601a      	str	r2, [r3, #0]
      break;
 8008632:	e040      	b.n	80086b6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008634:	4b2a      	ldr	r3, [pc, #168]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800863e:	4b28      	ldr	r3, [pc, #160]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	091b      	lsrs	r3, r3, #4
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	3301      	adds	r3, #1
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d003      	beq.n	800865a <SystemCoreClockUpdate+0xbe>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b03      	cmp	r3, #3
 8008656:	d006      	beq.n	8008666 <SystemCoreClockUpdate+0xca>
 8008658:	e00b      	b.n	8008672 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800865a:	4a24      	ldr	r2, [pc, #144]	; (80086ec <SystemCoreClockUpdate+0x150>)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008662:	613b      	str	r3, [r7, #16]
          break;
 8008664:	e00b      	b.n	800867e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8008666:	4a22      	ldr	r2, [pc, #136]	; (80086f0 <SystemCoreClockUpdate+0x154>)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	fbb2 f3f3 	udiv	r3, r2, r3
 800866e:	613b      	str	r3, [r7, #16]
          break;
 8008670:	e005      	b.n	800867e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	fbb2 f3f3 	udiv	r3, r2, r3
 800867a:	613b      	str	r3, [r7, #16]
          break;
 800867c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800867e:	4b18      	ldr	r3, [pc, #96]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	fb02 f303 	mul.w	r3, r2, r3
 800868e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8008690:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	0e5b      	lsrs	r3, r3, #25
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	3301      	adds	r3, #1
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a8:	4a0f      	ldr	r2, [pc, #60]	; (80086e8 <SystemCoreClockUpdate+0x14c>)
 80086aa:	6013      	str	r3, [r2, #0]
      break;
 80086ac:	e003      	b.n	80086b6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80086ae:	4a0e      	ldr	r2, [pc, #56]	; (80086e8 <SystemCoreClockUpdate+0x14c>)
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	6013      	str	r3, [r2, #0]
      break;
 80086b4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80086b6:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <SystemCoreClockUpdate+0x144>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	091b      	lsrs	r3, r3, #4
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	4a0c      	ldr	r2, [pc, #48]	; (80086f4 <SystemCoreClockUpdate+0x158>)
 80086c2:	5cd3      	ldrb	r3, [r2, r3]
 80086c4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <SystemCoreClockUpdate+0x14c>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
 80086d0:	4a05      	ldr	r2, [pc, #20]	; (80086e8 <SystemCoreClockUpdate+0x14c>)
 80086d2:	6013      	str	r3, [r2, #0]
}
 80086d4:	bf00      	nop
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	40021000 	.word	0x40021000
 80086e4:	080133fc 	.word	0x080133fc
 80086e8:	20000000 	.word	0x20000000
 80086ec:	00f42400 	.word	0x00f42400
 80086f0:	02dc6c00 	.word	0x02dc6c00
 80086f4:	080133e4 	.word	0x080133e4

080086f8 <W25_ReadStatusReg>:
} // W25_ReadJEDECID()

// Returns value of Status Register-1 (byte)
// Winbond 8.2.4 Read Status Register-1 (05h)
// See section 7.1 for bit values
int W25_ReadStatusReg(uint8_t addrsr) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdaddr[2] = {W25_CMD_READ_STATUS_REG,addrsr};
 8008702:	2305      	movs	r3, #5
 8008704:	743b      	strb	r3, [r7, #16]
 8008706:	79fb      	ldrb	r3, [r7, #7]
 8008708:	747b      	strb	r3, [r7, #17]
	uint8_t status_reg;
	int retval;
	W25_CS_ENABLE(); 																// Drive Winbond chip select, /CS low
 800870a:	2200      	movs	r2, #0
 800870c:	2110      	movs	r1, #16
 800870e:	4813      	ldr	r0, [pc, #76]	; (800875c <W25_ReadStatusReg+0x64>)
 8008710:	f001 f9d2 	bl	8009ab8 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), TIMEOUT); 				// Send Read Status Reg command
 8008714:	f107 0110 	add.w	r1, r7, #16
 8008718:	2364      	movs	r3, #100	; 0x64
 800871a:	2202      	movs	r2, #2
 800871c:	4810      	ldr	r0, [pc, #64]	; (8008760 <W25_ReadStatusReg+0x68>)
 800871e:	f005 f868 	bl	800d7f2 <HAL_SPI_Transmit>
 8008722:	4603      	mov	r3, r0
 8008724:	617b      	str	r3, [r7, #20]
	if(retval == HAL_OK)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d108      	bne.n	800873e <W25_ReadStatusReg+0x46>
		retval = HAL_SPI_Receive(&hspi1, &status_reg, sizeof(status_reg), TIMEOUT);
 800872c:	f107 010f 	add.w	r1, r7, #15
 8008730:	2364      	movs	r3, #100	; 0x64
 8008732:	2201      	movs	r2, #1
 8008734:	480a      	ldr	r0, [pc, #40]	; (8008760 <W25_ReadStatusReg+0x68>)
 8008736:	f005 f9ca 	bl	800dace <HAL_SPI_Receive>
 800873a:	4603      	mov	r3, r0
 800873c:	617b      	str	r3, [r7, #20]
	W25_CS_DISABLE();
 800873e:	2201      	movs	r2, #1
 8008740:	2110      	movs	r1, #16
 8008742:	4806      	ldr	r0, [pc, #24]	; (800875c <W25_ReadStatusReg+0x64>)
 8008744:	f001 f9b8 	bl	8009ab8 <HAL_GPIO_WritePin>
	return retval == HAL_OK ? status_reg:0xFF; 										// return 0xFF if error
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <W25_ReadStatusReg+0x5a>
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	e000      	b.n	8008754 <W25_ReadStatusReg+0x5c>
 8008752:	23ff      	movs	r3, #255	; 0xff
} // W25_ReadStatusReg1()
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	42020000 	.word	0x42020000
 8008760:	2000046c 	.word	0x2000046c

08008764 <W25_WriteStatusReg>:

int W25_WriteStatusReg(uint8_t addrsr, uint8_t sr) {
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	460a      	mov	r2, r1
 800876e:	71fb      	strb	r3, [r7, #7]
 8008770:	4613      	mov	r3, r2
 8008772:	71bb      	strb	r3, [r7, #6]
	uint8_t cmdaddr[2] = {W25_CMD_WRITE_STATUS_REG, addrsr};
 8008774:	2301      	movs	r3, #1
 8008776:	723b      	strb	r3, [r7, #8]
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	727b      	strb	r3, [r7, #9]
	int retval;
	W25_CS_ENABLE();
 800877c:	2200      	movs	r2, #0
 800877e:	2110      	movs	r1, #16
 8008780:	4810      	ldr	r0, [pc, #64]	; (80087c4 <W25_WriteStatusReg+0x60>)
 8008782:	f001 f999 	bl	8009ab8 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), TIMEOUT);
 8008786:	f107 0108 	add.w	r1, r7, #8
 800878a:	2364      	movs	r3, #100	; 0x64
 800878c:	2202      	movs	r2, #2
 800878e:	480e      	ldr	r0, [pc, #56]	; (80087c8 <W25_WriteStatusReg+0x64>)
 8008790:	f005 f82f 	bl	800d7f2 <HAL_SPI_Transmit>
 8008794:	4603      	mov	r3, r0
 8008796:	60fb      	str	r3, [r7, #12]
	if(retval == HAL_OK)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d107      	bne.n	80087ae <W25_WriteStatusReg+0x4a>
		retval = HAL_SPI_Transmit(&hspi1, &sr, sizeof(sr), TIMEOUT);
 800879e:	1db9      	adds	r1, r7, #6
 80087a0:	2364      	movs	r3, #100	; 0x64
 80087a2:	2201      	movs	r2, #1
 80087a4:	4808      	ldr	r0, [pc, #32]	; (80087c8 <W25_WriteStatusReg+0x64>)
 80087a6:	f005 f824 	bl	800d7f2 <HAL_SPI_Transmit>
 80087aa:	4603      	mov	r3, r0
 80087ac:	60fb      	str	r3, [r7, #12]
	W25_CS_DISABLE();
 80087ae:	2201      	movs	r2, #1
 80087b0:	2110      	movs	r1, #16
 80087b2:	4804      	ldr	r0, [pc, #16]	; (80087c4 <W25_WriteStatusReg+0x60>)
 80087b4:	f001 f980 	bl	8009ab8 <HAL_GPIO_WritePin>
	return retval;
 80087b8:	68fb      	ldr	r3, [r7, #12]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	42020000 	.word	0x42020000
 80087c8:	2000046c 	.word	0x2000046c

080087cc <W25_WriteEnable>:

// Send Write Enable command
// Winbond 8.2.5 Write Enable (06h)
// See section 7.1, page 17, and section 8.2.1, page 30
// This sets the WEL bit, S1, in status register 1, allowing the part to be written.
int W25_WriteEnable(void) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
	uint8_t cmd = W25_CMD_WRITE_ENABLE;
 80087d2:	2306      	movs	r3, #6
 80087d4:	70fb      	strb	r3, [r7, #3]
	W25_CS_ENABLE(); 																// Drive Winbond chip select, /CS low
 80087d6:	2200      	movs	r2, #0
 80087d8:	2110      	movs	r1, #16
 80087da:	480a      	ldr	r0, [pc, #40]	; (8008804 <W25_WriteEnable+0x38>)
 80087dc:	f001 f96c 	bl	8009ab8 <HAL_GPIO_WritePin>
	int retval = HAL_SPI_Transmit(&hspi1, &cmd , sizeof(cmd), TIMEOUT); 			// Send Write Enable command
 80087e0:	1cf9      	adds	r1, r7, #3
 80087e2:	2364      	movs	r3, #100	; 0x64
 80087e4:	2201      	movs	r2, #1
 80087e6:	4808      	ldr	r0, [pc, #32]	; (8008808 <W25_WriteEnable+0x3c>)
 80087e8:	f005 f803 	bl	800d7f2 <HAL_SPI_Transmit>
 80087ec:	4603      	mov	r3, r0
 80087ee:	607b      	str	r3, [r7, #4]
	W25_CS_DISABLE();
 80087f0:	2201      	movs	r2, #1
 80087f2:	2110      	movs	r1, #16
 80087f4:	4803      	ldr	r0, [pc, #12]	; (8008804 <W25_WriteEnable+0x38>)
 80087f6:	f001 f95f 	bl	8009ab8 <HAL_GPIO_WritePin>
	return retval;
 80087fa:	687b      	ldr	r3, [r7, #4]
} // W25_WriteEnable()
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	42020000 	.word	0x42020000
 8008808:	2000046c 	.word	0x2000046c

0800880c <W25_Read>:
} // W25_WriteDisable()

// Winbond 8.2.6 Read Data (03h)
// The only limit for quantity of data is memory / device size
int W25_Read(uint8_t *buf, uint32_t address, uint16_t bufSize)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	80fb      	strh	r3, [r7, #6]
	uint8_t cmdaddr[4] = {W25_CMD_READ_DATA,address>>8,address,0xFF};
 800881a:	2303      	movs	r3, #3
 800881c:	743b      	strb	r3, [r7, #16]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	0a1b      	lsrs	r3, r3, #8
 8008822:	b2db      	uxtb	r3, r3
 8008824:	747b      	strb	r3, [r7, #17]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	74bb      	strb	r3, [r7, #18]
 800882c:	23ff      	movs	r3, #255	; 0xff
 800882e:	74fb      	strb	r3, [r7, #19]
	int retval;
	W25_CS_ENABLE(); 																	// Drive Winbond chip select, /CS low
 8008830:	2200      	movs	r2, #0
 8008832:	2110      	movs	r1, #16
 8008834:	4815      	ldr	r0, [pc, #84]	; (800888c <W25_Read+0x80>)
 8008836:	f001 f93f 	bl	8009ab8 <HAL_GPIO_WritePin>
	retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), 500); 					// Send Read Data command with address
 800883a:	f107 0110 	add.w	r1, r7, #16
 800883e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008842:	2204      	movs	r2, #4
 8008844:	4812      	ldr	r0, [pc, #72]	; (8008890 <W25_Read+0x84>)
 8008846:	f004 ffd4 	bl	800d7f2 <HAL_SPI_Transmit>
 800884a:	4603      	mov	r3, r0
 800884c:	617b      	str	r3, [r7, #20]
	if(retval != HAL_OK) {
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <W25_Read+0x4c>
		return retval;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	e015      	b.n	8008884 <W25_Read+0x78>
	}
	//memset(buf,0,bufSize); 																// Buffer is transmitted during receive
	retval = HAL_SPI_Receive(&hspi1, buf, bufSize, bufSize * 100); 								// need longer time-outs when using slow SPI clock
 8008858:	88fb      	ldrh	r3, [r7, #6]
 800885a:	2264      	movs	r2, #100	; 0x64
 800885c:	fb02 f303 	mul.w	r3, r2, r3
 8008860:	88fa      	ldrh	r2, [r7, #6]
 8008862:	68f9      	ldr	r1, [r7, #12]
 8008864:	480a      	ldr	r0, [pc, #40]	; (8008890 <W25_Read+0x84>)
 8008866:	f005 f932 	bl	800dace <HAL_SPI_Receive>
 800886a:	4603      	mov	r3, r0
 800886c:	617b      	str	r3, [r7, #20]
	if(retval != HAL_OK) {
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <W25_Read+0x6c>
		return retval;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	e005      	b.n	8008884 <W25_Read+0x78>
	}
	W25_CS_DISABLE();
 8008878:	2201      	movs	r2, #1
 800887a:	2110      	movs	r1, #16
 800887c:	4803      	ldr	r0, [pc, #12]	; (800888c <W25_Read+0x80>)
 800887e:	f001 f91b 	bl	8009ab8 <HAL_GPIO_WritePin>
	return retval;
 8008882:	697b      	ldr	r3, [r7, #20]
} // W25_ReadData()
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	42020000 	.word	0x42020000
 8008890:	2000046c 	.word	0x2000046c

08008894 <W25_PageDataRead>:

// Winbond 8.2.17 Padge Data Read (13h)
// Transfer data from memory array to 2112 Byte Data Buffer
int W25_PageDataRead(uint16_t address)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	80fb      	strh	r3, [r7, #6]
  int retval;																// Make sure we can write...
  W25_CS_ENABLE(); 																	// Drive Winbond chip select, /CS low
 800889e:	2200      	movs	r2, #0
 80088a0:	2110      	movs	r1, #16
 80088a2:	4813      	ldr	r0, [pc, #76]	; (80088f0 <W25_PageDataRead+0x5c>)
 80088a4:	f001 f908 	bl	8009ab8 <HAL_GPIO_WritePin>
  uint8_t cmdaddr[4] = {W25_CMD_PAGE_DATA_READ, 0xFF, address>>8, address};
 80088a8:	2313      	movs	r3, #19
 80088aa:	723b      	strb	r3, [r7, #8]
 80088ac:	23ff      	movs	r3, #255	; 0xff
 80088ae:	727b      	strb	r3, [r7, #9]
 80088b0:	88fb      	ldrh	r3, [r7, #6]
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	72bb      	strb	r3, [r7, #10]
 80088ba:	88fb      	ldrh	r3, [r7, #6]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	72fb      	strb	r3, [r7, #11]
  retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), TIMEOUT); 			// Send Sector Erase command with address
 80088c0:	f107 0108 	add.w	r1, r7, #8
 80088c4:	2364      	movs	r3, #100	; 0x64
 80088c6:	2204      	movs	r2, #4
 80088c8:	480a      	ldr	r0, [pc, #40]	; (80088f4 <W25_PageDataRead+0x60>)
 80088ca:	f004 ff92 	bl	800d7f2 <HAL_SPI_Transmit>
 80088ce:	4603      	mov	r3, r0
 80088d0:	60fb      	str	r3, [r7, #12]
  W25_CS_DISABLE();
 80088d2:	2201      	movs	r2, #1
 80088d4:	2110      	movs	r1, #16
 80088d6:	4806      	ldr	r0, [pc, #24]	; (80088f0 <W25_PageDataRead+0x5c>)
 80088d8:	f001 f8ee 	bl	8009ab8 <HAL_GPIO_WritePin>
  W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 80088dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088e0:	f000 f8b8 	bl	8008a54 <W25_DelayWhileBusy>
  return retval;
 80088e4:	68fb      	ldr	r3, [r7, #12]
} // W25_PageDataRead()
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	42020000 	.word	0x42020000
 80088f4:	2000046c 	.word	0x2000046c

080088f8 <W25_WritePage>:

// Winbond 8.2.15 Page Program (02h) ONLY TO DATA BUFFER NEEDS PROGRAM EXECUTE TO BE WRITTEN IN MEMORY
// Write one byte up to 2112 bytes (a page) of data
// If a 2112 byte page boundary is crossed, it must be addressed with an additional Page Program command.
int W25_WritePage(uint8_t *buf, uint32_t address, uint16_t bufSize)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	80fb      	strh	r3, [r7, #6]
  int retval;
  W25_WriteEnable(); 																// Make sure we can write...
 8008906:	f7ff ff61 	bl	80087cc <W25_WriteEnable>
  W25_CS_ENABLE(); 																	// Drive Winbond chip select, /CS low
 800890a:	2200      	movs	r2, #0
 800890c:	2110      	movs	r1, #16
 800890e:	4818      	ldr	r0, [pc, #96]	; (8008970 <W25_WritePage+0x78>)
 8008910:	f001 f8d2 	bl	8009ab8 <HAL_GPIO_WritePin>
  uint8_t cmdaddr[3] = {W25_CMD_PAGE_PROGRAM, address>>8, address};
 8008914:	2302      	movs	r3, #2
 8008916:	743b      	strb	r3, [r7, #16]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	b2db      	uxtb	r3, r3
 800891e:	747b      	strb	r3, [r7, #17]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	74bb      	strb	r3, [r7, #18]
  retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), TIMEOUT); 			// Send Page Program command with address
 8008926:	f107 0110 	add.w	r1, r7, #16
 800892a:	2364      	movs	r3, #100	; 0x64
 800892c:	2203      	movs	r2, #3
 800892e:	4811      	ldr	r0, [pc, #68]	; (8008974 <W25_WritePage+0x7c>)
 8008930:	f004 ff5f 	bl	800d7f2 <HAL_SPI_Transmit>
 8008934:	4603      	mov	r3, r0
 8008936:	617b      	str	r3, [r7, #20]
  if(retval == HAL_OK)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <W25_WritePage+0x5c>
	  retval = HAL_SPI_Transmit(&hspi1, buf, bufSize, TIMEOUT * bufSize);
 800893e:	88fb      	ldrh	r3, [r7, #6]
 8008940:	2264      	movs	r2, #100	; 0x64
 8008942:	fb02 f303 	mul.w	r3, r2, r3
 8008946:	88fa      	ldrh	r2, [r7, #6]
 8008948:	68f9      	ldr	r1, [r7, #12]
 800894a:	480a      	ldr	r0, [pc, #40]	; (8008974 <W25_WritePage+0x7c>)
 800894c:	f004 ff51 	bl	800d7f2 <HAL_SPI_Transmit>
 8008950:	4603      	mov	r3, r0
 8008952:	617b      	str	r3, [r7, #20]
  W25_CS_DISABLE();
 8008954:	2201      	movs	r2, #1
 8008956:	2110      	movs	r1, #16
 8008958:	4805      	ldr	r0, [pc, #20]	; (8008970 <W25_WritePage+0x78>)
 800895a:	f001 f8ad 	bl	8009ab8 <HAL_GPIO_WritePin>
  W25_DelayWhileBusy(PAGE_PROGRAM_TIMEOUT);
 800895e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008962:	f000 f877 	bl	8008a54 <W25_DelayWhileBusy>
  return retval;
 8008966:	697b      	ldr	r3, [r7, #20]
} // W25_PageProgram()
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	42020000 	.word	0x42020000
 8008974:	2000046c 	.word	0x2000046c

08008978 <W25_ProgramExecute>:

// Winbond 8.2.13 Program Execute (10h)
// Transfer data from Data buffer to memory array
int W25_ProgramExecute(uint16_t address)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	4603      	mov	r3, r0
 8008980:	80fb      	strh	r3, [r7, #6]
  int retval;
  W25_CS_ENABLE(); 																	// Drive Winbond chip select, /CS low
 8008982:	2200      	movs	r2, #0
 8008984:	2110      	movs	r1, #16
 8008986:	4813      	ldr	r0, [pc, #76]	; (80089d4 <W25_ProgramExecute+0x5c>)
 8008988:	f001 f896 	bl	8009ab8 <HAL_GPIO_WritePin>
  uint8_t cmdaddr[4] = {W25_CMD_PROGRAM_EXECUTE, 0xFF, address>>8, address};
 800898c:	2310      	movs	r3, #16
 800898e:	723b      	strb	r3, [r7, #8]
 8008990:	23ff      	movs	r3, #255	; 0xff
 8008992:	727b      	strb	r3, [r7, #9]
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	0a1b      	lsrs	r3, r3, #8
 8008998:	b29b      	uxth	r3, r3
 800899a:	b2db      	uxtb	r3, r3
 800899c:	72bb      	strb	r3, [r7, #10]
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	72fb      	strb	r3, [r7, #11]
  retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), TIMEOUT); 			// Send Sector Erase command with address
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	2364      	movs	r3, #100	; 0x64
 80089aa:	2204      	movs	r2, #4
 80089ac:	480a      	ldr	r0, [pc, #40]	; (80089d8 <W25_ProgramExecute+0x60>)
 80089ae:	f004 ff20 	bl	800d7f2 <HAL_SPI_Transmit>
 80089b2:	4603      	mov	r3, r0
 80089b4:	60fb      	str	r3, [r7, #12]
  W25_CS_DISABLE();
 80089b6:	2201      	movs	r2, #1
 80089b8:	2110      	movs	r1, #16
 80089ba:	4806      	ldr	r0, [pc, #24]	; (80089d4 <W25_ProgramExecute+0x5c>)
 80089bc:	f001 f87c 	bl	8009ab8 <HAL_GPIO_WritePin>
  W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 80089c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80089c4:	f000 f846 	bl	8008a54 <W25_DelayWhileBusy>
  return retval;
 80089c8:	68fb      	ldr	r3, [r7, #12]
} // W25_PageDataRead()
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	42020000 	.word	0x42020000
 80089d8:	2000046c 	.word	0x2000046c

080089dc <W25_SectorErase>:

// Winbond 8.2.17 Sector Erase (D8h)
// Erase all data within the addressed 128K sector.
int W25_SectorErase(uint32_t address)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  int retval;
  W25_WriteEnable(); 																// Make sure we can write...
 80089e4:	f7ff fef2 	bl	80087cc <W25_WriteEnable>
  W25_CS_ENABLE(); 																	// Drive Winbond chip select, /CS low
 80089e8:	2200      	movs	r2, #0
 80089ea:	2110      	movs	r1, #16
 80089ec:	4812      	ldr	r0, [pc, #72]	; (8008a38 <W25_SectorErase+0x5c>)
 80089ee:	f001 f863 	bl	8009ab8 <HAL_GPIO_WritePin>
  uint8_t cmdaddr[4] = {W25_CMD_BLOCK_ERASE,0xFF,address>>8,address};
 80089f2:	23d8      	movs	r3, #216	; 0xd8
 80089f4:	723b      	strb	r3, [r7, #8]
 80089f6:	23ff      	movs	r3, #255	; 0xff
 80089f8:	727b      	strb	r3, [r7, #9]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	0a1b      	lsrs	r3, r3, #8
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	72bb      	strb	r3, [r7, #10]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	72fb      	strb	r3, [r7, #11]
  retval = HAL_SPI_Transmit(&hspi1, cmdaddr , sizeof(cmdaddr), TIMEOUT); 			// Send Sector Erase command with address
 8008a08:	f107 0108 	add.w	r1, r7, #8
 8008a0c:	2364      	movs	r3, #100	; 0x64
 8008a0e:	2204      	movs	r2, #4
 8008a10:	480a      	ldr	r0, [pc, #40]	; (8008a3c <W25_SectorErase+0x60>)
 8008a12:	f004 feee 	bl	800d7f2 <HAL_SPI_Transmit>
 8008a16:	4603      	mov	r3, r0
 8008a18:	60fb      	str	r3, [r7, #12]
  W25_CS_DISABLE();
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	2110      	movs	r1, #16
 8008a1e:	4806      	ldr	r0, [pc, #24]	; (8008a38 <W25_SectorErase+0x5c>)
 8008a20:	f001 f84a 	bl	8009ab8 <HAL_GPIO_WritePin>
  W25_DelayWhileBusy(SECTOR_ERASE_TIMEOUT);
 8008a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a28:	f000 f814 	bl	8008a54 <W25_DelayWhileBusy>
  return retval;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
} // W25_SectorErase()
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	42020000 	.word	0x42020000
 8008a3c:	2000046c 	.word	0x2000046c

08008a40 <W25_Busy>:
	return -1;
} // W25_ChipErase()

// Returns 0:Not busy, or 1:Busy
int W25_Busy(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  return (W25_ReadStatusReg(0xC0) & W25_STATUS1_BUSY);
 8008a44:	20c0      	movs	r0, #192	; 0xc0
 8008a46:	f7ff fe57 	bl	80086f8 <W25_ReadStatusReg>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f003 0301 	and.w	r3, r3, #1
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <W25_DelayWhileBusy>:

// Loop while busy and not timeout
int W25_DelayWhileBusy(uint32_t msTimeout)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t initial_count = HAL_GetTick();
 8008a5c:	f000 f8e8 	bl	8008c30 <HAL_GetTick>
 8008a60:	61b8      	str	r0, [r7, #24]
  int busy;
  uint32_t deltaticks;
  uint32_t count = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
  do {
    busy = W25_Busy();
 8008a66:	f7ff ffeb 	bl	8008a40 <W25_Busy>
 8008a6a:	6178      	str	r0, [r7, #20]
    deltaticks = HAL_GetTick() - initial_count;
 8008a6c:	f000 f8e0 	bl	8008c30 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	613b      	str	r3, [r7, #16]
    count++;
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	61fb      	str	r3, [r7, #28]
  } while(busy && deltaticks < msTimeout);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <W25_DelayWhileBusy+0x38>
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d3ec      	bcc.n	8008a66 <W25_DelayWhileBusy+0x12>
  int retval = busy ? HAL_TIMEOUT:HAL_OK;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <W25_DelayWhileBusy+0x42>
 8008a92:	2303      	movs	r3, #3
 8008a94:	e000      	b.n	8008a98 <W25_DelayWhileBusy+0x44>
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  return retval;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <W25_readLittlefs>:
 * @param [out] buffer 读取到的数据
 * @param [in] size 要读取的字节数
 * @return 0 成功 <0 错误
 * @note littlefs 一定不会存在跨越块存储的情况
 */
int W25_readLittlefs(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	603b      	str	r3, [r7, #0]

	uint16_t page_numb = (block * 64) + (off/2048);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	019b      	lsls	r3, r3, #6
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	0adb      	lsrs	r3, r3, #11
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	82fb      	strh	r3, [r7, #22]
	uint16_t column_numb = off%2048;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008acc:	82bb      	strh	r3, [r7, #20]
	W25_PageDataRead(page_numb);
 8008ace:	8afb      	ldrh	r3, [r7, #22]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fedf 	bl	8008894 <W25_PageDataRead>
	HAL_Delay(10);
 8008ad6:	200a      	movs	r0, #10
 8008ad8:	f000 f8b6 	bl	8008c48 <HAL_Delay>
	W25_Read((uint8_t *)buffer, column_numb, size);
 8008adc:	8abb      	ldrh	r3, [r7, #20]
 8008ade:	6a3a      	ldr	r2, [r7, #32]
 8008ae0:	b292      	uxth	r2, r2
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6838      	ldr	r0, [r7, #0]
 8008ae6:	f7ff fe91 	bl	800880c <W25_Read>
	HAL_Delay(10);
 8008aea:	200a      	movs	r0, #10
 8008aec:	f000 f8ac 	bl	8008c48 <HAL_Delay>
	return LFS_ERR_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <W25_writeLittlefs>:
 * @param [out] buffer 读取到的数据
 * @param [in] size 要读取的字节数
 * @return 0 成功 <0 错误
 * @note littlefs 一定不会存在跨越块存储的情况
 */
int W25_writeLittlefs(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	603b      	str	r3, [r7, #0]

	uint16_t page_numb = (block * 64) + (off/2048);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	019b      	lsls	r3, r3, #6
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	0adb      	lsrs	r3, r3, #11
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	82fb      	strh	r3, [r7, #22]
	uint16_t column_numb = off%2048;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b22:	82bb      	strh	r3, [r7, #20]
	W25_WritePage((uint8_t *)buffer, column_numb, size);
 8008b24:	8abb      	ldrh	r3, [r7, #20]
 8008b26:	6a3a      	ldr	r2, [r7, #32]
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6838      	ldr	r0, [r7, #0]
 8008b2e:	f7ff fee3 	bl	80088f8 <W25_WritePage>
	HAL_Delay(10);
 8008b32:	200a      	movs	r0, #10
 8008b34:	f000 f888 	bl	8008c48 <HAL_Delay>
	W25_ProgramExecute(page_numb);
 8008b38:	8afb      	ldrh	r3, [r7, #22]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff ff1c 	bl	8008978 <W25_ProgramExecute>
	HAL_Delay(10);
 8008b40:	200a      	movs	r0, #10
 8008b42:	f000 f881 	bl	8008c48 <HAL_Delay>
	return LFS_ERR_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <W25_eraseLittlefs>:
 * @brief littlefs 擦除一个块
 * @param [in] c lfs_config数据结构
 * @param [in] block 要擦出的块
 * @return 0 成功 <0 错误
 */
int W25_eraseLittlefs(const struct lfs_config *c, lfs_block_t block) {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]

	W25_SectorErase(block);
 8008b5a:	6838      	ldr	r0, [r7, #0]
 8008b5c:	f7ff ff3e 	bl	80089dc <W25_SectorErase>
	return  LFS_ERR_OK;
 8008b60:	2300      	movs	r3, #0

}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <W25_syncLittlefs>:

int W25_syncLittlefs(const struct lfs_config *c )
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
	return  LFS_ERR_OK;
 8008b72:	2300      	movs	r3, #0

}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8008b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008b84:	f7ff fcf8 	bl	8008578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008b88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008b8a:	e003      	b.n	8008b94 <LoopCopyDataInit>

08008b8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008b8c:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008b8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008b90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008b92:	3104      	adds	r1, #4

08008b94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008b94:	480a      	ldr	r0, [pc, #40]	; (8008bc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008b96:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008b98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008b9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008b9c:	d3f6      	bcc.n	8008b8c <CopyDataInit>
	ldr	r2, =_sbss
 8008b9e:	4a0a      	ldr	r2, [pc, #40]	; (8008bc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008ba0:	e002      	b.n	8008ba8 <LoopFillZerobss>

08008ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008ba2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008ba4:	f842 3b04 	str.w	r3, [r2], #4

08008ba8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008ba8:	4b08      	ldr	r3, [pc, #32]	; (8008bcc <LoopForever+0x16>)
	cmp	r2, r3
 8008baa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008bac:	d3f9      	bcc.n	8008ba2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008bae:	f007 fb0b 	bl	80101c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008bb2:	f7fe fb83 	bl	80072bc <main>

08008bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8008bb6:	e7fe      	b.n	8008bb6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8008bb8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8008bbc:	08013548 	.word	0x08013548
	ldr	r0, =_sdata
 8008bc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008bc4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8008bc8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8008bcc:	20000790 	.word	0x20000790

08008bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008bd0:	e7fe      	b.n	8008bd0 <ADC1_2_IRQHandler>

08008bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8008bdc:	2004      	movs	r0, #4
 8008bde:	f000 f904 	bl	8008dea <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8008be2:	f7ff fcdb 	bl	800859c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008be6:	2007      	movs	r0, #7
 8008be8:	f7ff fb38 	bl	800825c <HAL_InitTick>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	71fb      	strb	r3, [r7, #7]
 8008bf6:	e001      	b.n	8008bfc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008bf8:	f7ff f846 	bl	8007c88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
	...

08008c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <HAL_IncTick+0x20>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <HAL_IncTick+0x24>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4413      	add	r3, r2
 8008c18:	4a04      	ldr	r2, [pc, #16]	; (8008c2c <HAL_IncTick+0x24>)
 8008c1a:	6013      	str	r3, [r2, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20000008 	.word	0x20000008
 8008c2c:	2000077c 	.word	0x2000077c

08008c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
  return uwTick;
 8008c34:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <HAL_GetTick+0x14>)
 8008c36:	681b      	ldr	r3, [r3, #0]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	2000077c 	.word	0x2000077c

08008c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c50:	f7ff ffee 	bl	8008c30 <HAL_GetTick>
 8008c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c60:	d005      	beq.n	8008c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <HAL_Delay+0x44>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c6e:	bf00      	nop
 8008c70:	f7ff ffde 	bl	8008c30 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d8f7      	bhi.n	8008c70 <HAL_Delay+0x28>
  {
  }
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000008 	.word	0x20000008

08008c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ca0:	4b0c      	ldr	r3, [pc, #48]	; (8008cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008cac:	4013      	ands	r3, r2
 8008cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008cc2:	4a04      	ldr	r2, [pc, #16]	; (8008cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	60d3      	str	r3, [r2, #12]
}
 8008cc8:	bf00      	nop
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	e000ed00 	.word	0xe000ed00

08008cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008cdc:	4b04      	ldr	r3, [pc, #16]	; (8008cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	0a1b      	lsrs	r3, r3, #8
 8008ce2:	f003 0307 	and.w	r3, r3, #7
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	e000ed00 	.word	0xe000ed00

08008cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	db0b      	blt.n	8008d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	f003 021f 	and.w	r2, r3, #31
 8008d0c:	4907      	ldr	r1, [pc, #28]	; (8008d2c <__NVIC_EnableIRQ+0x38>)
 8008d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	2001      	movs	r0, #1
 8008d16:	fa00 f202 	lsl.w	r2, r0, r2
 8008d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	e000e100 	.word	0xe000e100

08008d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	db0a      	blt.n	8008d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	490c      	ldr	r1, [pc, #48]	; (8008d7c <__NVIC_SetPriority+0x4c>)
 8008d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d4e:	0152      	lsls	r2, r2, #5
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	440b      	add	r3, r1
 8008d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d58:	e00a      	b.n	8008d70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	4908      	ldr	r1, [pc, #32]	; (8008d80 <__NVIC_SetPriority+0x50>)
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	3b04      	subs	r3, #4
 8008d68:	0152      	lsls	r2, r2, #5
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	761a      	strb	r2, [r3, #24]
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	e000e100 	.word	0xe000e100
 8008d80:	e000ed00 	.word	0xe000ed00

08008d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b089      	sub	sp, #36	; 0x24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	f1c3 0307 	rsb	r3, r3, #7
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	bf28      	it	cs
 8008da2:	2303      	movcs	r3, #3
 8008da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	3303      	adds	r3, #3
 8008daa:	2b06      	cmp	r3, #6
 8008dac:	d902      	bls.n	8008db4 <NVIC_EncodePriority+0x30>
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	3b04      	subs	r3, #4
 8008db2:	e000      	b.n	8008db6 <NVIC_EncodePriority+0x32>
 8008db4:	2300      	movs	r3, #0
 8008db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc2:	43da      	mvns	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	401a      	ands	r2, r3
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd6:	43d9      	mvns	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ddc:	4313      	orrs	r3, r2
         );
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3724      	adds	r7, #36	; 0x24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff ff4c 	bl	8008c90 <__NVIC_SetPriorityGrouping>
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008e0e:	f7ff ff63 	bl	8008cd8 <__NVIC_GetPriorityGrouping>
 8008e12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	68b9      	ldr	r1, [r7, #8]
 8008e18:	6978      	ldr	r0, [r7, #20]
 8008e1a:	f7ff ffb3 	bl	8008d84 <NVIC_EncodePriority>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff ff82 	bl	8008d30 <__NVIC_SetPriority>
}
 8008e2c:	bf00      	nop
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff ff56 	bl	8008cf4 <__NVIC_EnableIRQ>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e08d      	b.n	8008f7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	4b47      	ldr	r3, [pc, #284]	; (8008f88 <HAL_DMA_Init+0x138>)
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d80f      	bhi.n	8008e8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	4b45      	ldr	r3, [pc, #276]	; (8008f8c <HAL_DMA_Init+0x13c>)
 8008e76:	4413      	add	r3, r2
 8008e78:	4a45      	ldr	r2, [pc, #276]	; (8008f90 <HAL_DMA_Init+0x140>)
 8008e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7e:	091b      	lsrs	r3, r3, #4
 8008e80:	009a      	lsls	r2, r3, #2
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a42      	ldr	r2, [pc, #264]	; (8008f94 <HAL_DMA_Init+0x144>)
 8008e8a:	649a      	str	r2, [r3, #72]	; 0x48
 8008e8c:	e00e      	b.n	8008eac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	4b40      	ldr	r3, [pc, #256]	; (8008f98 <HAL_DMA_Init+0x148>)
 8008e96:	4413      	add	r3, r2
 8008e98:	4a3d      	ldr	r2, [pc, #244]	; (8008f90 <HAL_DMA_Init+0x140>)
 8008e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9e:	091b      	lsrs	r3, r3, #4
 8008ea0:	009a      	lsls	r2, r3, #2
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a3c      	ldr	r2, [pc, #240]	; (8008f9c <HAL_DMA_Init+0x14c>)
 8008eaa:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8008ec2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8008ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 faf2 	bl	80094e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f0c:	d102      	bne.n	8008f14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1c:	b2d2      	uxtb	r2, r2
 8008f1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008f28:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d010      	beq.n	8008f54 <HAL_DMA_Init+0x104>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d80c      	bhi.n	8008f54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fb12 	bl	8009564 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	e008      	b.n	8008f66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	40020407 	.word	0x40020407
 8008f8c:	bffdfff8 	.word	0xbffdfff8
 8008f90:	cccccccd 	.word	0xcccccccd
 8008f94:	40020000 	.word	0x40020000
 8008f98:	bffdfbf8 	.word	0xbffdfbf8
 8008f9c:	40020400 	.word	0x40020400

08008fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d101      	bne.n	8008fc0 <HAL_DMA_Start_IT+0x20>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e066      	b.n	800908e <HAL_DMA_Start_IT+0xee>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d155      	bne.n	8009080 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0201 	bic.w	r2, r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fa37 	bl	800946c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 020e 	orr.w	r2, r2, #14
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	e00f      	b.n	8009038 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0204 	bic.w	r2, r2, #4
 8009026:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 020a 	orr.w	r2, r2, #10
 8009036:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d007      	beq.n	8009056 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009054:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d007      	beq.n	800906e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800906c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f042 0201 	orr.w	r2, r2, #1
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e005      	b.n	800908c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009088:	2302      	movs	r3, #2
 800908a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800908c:	7dfb      	ldrb	r3, [r7, #23]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009096:	b480      	push	{r7}
 8009098:	b085      	sub	sp, #20
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d008      	beq.n	80090c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2204      	movs	r2, #4
 80090b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e040      	b.n	8009142 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 020e 	bic.w	r2, r2, #14
 80090ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0201 	bic.w	r2, r2, #1
 80090ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f4:	f003 021c 	and.w	r2, r3, #28
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090fc:	2101      	movs	r1, #1
 80090fe:	fa01 f202 	lsl.w	r2, r1, r2
 8009102:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800910c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00c      	beq.n	8009130 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009124:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800912e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d005      	beq.n	8009172 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2204      	movs	r2, #4
 800916a:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	73fb      	strb	r3, [r7, #15]
 8009170:	e047      	b.n	8009202 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 020e 	bic.w	r2, r2, #14
 8009180:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0201 	bic.w	r2, r2, #1
 8009190:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a6:	f003 021c 	and.w	r2, r3, #28
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ae:	2101      	movs	r1, #1
 80091b0:	fa01 f202 	lsl.w	r2, r1, r2
 80091b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80091be:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00c      	beq.n	80091e2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80091e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
    }
  }
  return status;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009228:	f003 031c 	and.w	r3, r3, #28
 800922c:	2204      	movs	r2, #4
 800922e:	409a      	lsls	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4013      	ands	r3, r2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d053      	beq.n	80092e0 <HAL_DMA_IRQHandler+0xd4>
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f003 0304 	and.w	r3, r3, #4
 800923e:	2b00      	cmp	r3, #0
 8009240:	d04e      	beq.n	80092e0 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d024      	beq.n	800929a <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009254:	f003 021c 	and.w	r2, r3, #28
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800925c:	2104      	movs	r1, #4
 800925e:	fa01 f202 	lsl.w	r2, r1, r2
 8009262:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d109      	bne.n	8009286 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 80c0 	beq.w	80093fc <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8009284:	e0ba      	b.n	80093fc <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 80b6 	beq.w	80093fc <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8009298:	e0b0      	b.n	80093fc <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d107      	bne.n	80092b8 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0204 	bic.w	r2, r2, #4
 80092b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092bc:	f003 021c 	and.w	r2, r3, #28
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c4:	2104      	movs	r1, #4
 80092c6:	fa01 f202 	lsl.w	r2, r1, r2
 80092ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8093 	beq.w	80093fc <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80092de:	e08d      	b.n	80093fc <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e4:	f003 031c 	and.w	r3, r3, #28
 80092e8:	2202      	movs	r2, #2
 80092ea:	409a      	lsls	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4013      	ands	r3, r2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d04e      	beq.n	8009392 <HAL_DMA_IRQHandler+0x186>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d049      	beq.n	8009392 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d018      	beq.n	800933e <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d108      	bne.n	800932c <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931e:	2b00      	cmp	r3, #0
 8009320:	d06e      	beq.n	8009400 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800932a:	e069      	b.n	8009400 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009330:	2b00      	cmp	r3, #0
 8009332:	d065      	beq.n	8009400 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800933c:	e060      	b.n	8009400 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0320 	and.w	r3, r3, #32
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10b      	bne.n	8009364 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 020a 	bic.w	r2, r2, #10
 800935a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009368:	f003 021c 	and.w	r2, r3, #28
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009370:	2102      	movs	r1, #2
 8009372:	fa01 f202 	lsl.w	r2, r1, r2
 8009376:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d03b      	beq.n	8009400 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8009390:	e036      	b.n	8009400 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009396:	f003 031c 	and.w	r3, r3, #28
 800939a:	2208      	movs	r2, #8
 800939c:	409a      	lsls	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4013      	ands	r3, r2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d02e      	beq.n	8009404 <HAL_DMA_IRQHandler+0x1f8>
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d029      	beq.n	8009404 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 020e 	bic.w	r2, r2, #14
 80093be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c4:	f003 021c 	and.w	r2, r3, #28
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093cc:	2101      	movs	r1, #1
 80093ce:	fa01 f202 	lsl.w	r2, r1, r2
 80093d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d008      	beq.n	8009404 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80093fa:	e002      	b.n	8009402 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80093fc:	bf00      	nop
 80093fe:	e000      	b.n	8009402 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8009400:	bf00      	nop
  return;
 8009402:	bf00      	nop
 8009404:	bf00      	nop
}
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	72fb      	strb	r3, [r7, #11]
    return status;
 8009424:	7afb      	ldrb	r3, [r7, #11]
 8009426:	e01b      	b.n	8009460 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f003 0310 	and.w	r3, r3, #16
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00d      	beq.n	8009456 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d004      	beq.n	800944e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	e003      	b.n	8009456 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009454:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	601a      	str	r2, [r3, #0]

  return status;
 800945e:	7afb      	ldrb	r3, [r7, #11]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3714      	adds	r7, #20
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009482:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009488:	2b00      	cmp	r3, #0
 800948a:	d004      	beq.n	8009496 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8009494:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949a:	f003 021c 	and.w	r2, r3, #28
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a2:	2101      	movs	r1, #1
 80094a4:	fa01 f202 	lsl.w	r2, r1, r2
 80094a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2b10      	cmp	r3, #16
 80094b8:	d108      	bne.n	80094cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80094ca:	e007      	b.n	80094dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	60da      	str	r2, [r3, #12]
}
 80094dc:	bf00      	nop
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	4b17      	ldr	r3, [pc, #92]	; (8009554 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d80a      	bhi.n	8009512 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009500:	089b      	lsrs	r3, r3, #2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009508:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6513      	str	r3, [r2, #80]	; 0x50
 8009510:	e007      	b.n	8009522 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009516:	089b      	lsrs	r3, r3, #2
 8009518:	009a      	lsls	r2, r3, #2
 800951a:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800951c:	4413      	add	r3, r2
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	3b08      	subs	r3, #8
 800952a:	4a0c      	ldr	r2, [pc, #48]	; (800955c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800952c:	fba2 2303 	umull	r2, r3, r2, r3
 8009530:	091b      	lsrs	r3, r3, #4
 8009532:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a0a      	ldr	r2, [pc, #40]	; (8009560 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009538:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f003 031f 	and.w	r3, r3, #31
 8009540:	2201      	movs	r2, #1
 8009542:	409a      	lsls	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	659a      	str	r2, [r3, #88]	; 0x58
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	40020407 	.word	0x40020407
 8009558:	40020820 	.word	0x40020820
 800955c:	cccccccd 	.word	0xcccccccd
 8009560:	40020880 	.word	0x40020880

08009564 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009578:	4413      	add	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	461a      	mov	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a08      	ldr	r2, [pc, #32]	; (80095a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009586:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3b01      	subs	r3, #1
 800958c:	f003 0303 	and.w	r3, r3, #3
 8009590:	2201      	movs	r2, #1
 8009592:	409a      	lsls	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009598:	bf00      	nop
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	1000823f 	.word	0x1000823f
 80095a8:	40020940 	.word	0x40020940

080095ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80095ba:	e158      	b.n	800986e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	2101      	movs	r1, #1
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	fa01 f303 	lsl.w	r3, r1, r3
 80095c8:	4013      	ands	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 814a 	beq.w	8009868 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	f003 0303 	and.w	r3, r3, #3
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d005      	beq.n	80095ec <HAL_GPIO_Init+0x40>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d130      	bne.n	800964e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	005b      	lsls	r3, r3, #1
 80095f6:	2203      	movs	r2, #3
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	43db      	mvns	r3, r3
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4013      	ands	r3, r2
 8009602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	fa02 f303 	lsl.w	r3, r2, r3
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	4313      	orrs	r3, r2
 8009614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009622:	2201      	movs	r2, #1
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	fa02 f303 	lsl.w	r3, r2, r3
 800962a:	43db      	mvns	r3, r3
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	4013      	ands	r3, r2
 8009630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	091b      	lsrs	r3, r3, #4
 8009638:	f003 0201 	and.w	r2, r3, #1
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	fa02 f303 	lsl.w	r3, r2, r3
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	4313      	orrs	r3, r2
 8009646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	2b03      	cmp	r3, #3
 8009658:	d017      	beq.n	800968a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	2203      	movs	r2, #3
 8009666:	fa02 f303 	lsl.w	r3, r2, r3
 800966a:	43db      	mvns	r3, r3
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4013      	ands	r3, r2
 8009670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	689a      	ldr	r2, [r3, #8]
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	005b      	lsls	r3, r3, #1
 800967a:	fa02 f303 	lsl.w	r3, r2, r3
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d123      	bne.n	80096de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	08da      	lsrs	r2, r3, #3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	3208      	adds	r2, #8
 800969e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	220f      	movs	r2, #15
 80096ae:	fa02 f303 	lsl.w	r3, r2, r3
 80096b2:	43db      	mvns	r3, r3
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4013      	ands	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	691a      	ldr	r2, [r3, #16]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	f003 0307 	and.w	r3, r3, #7
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	08da      	lsrs	r2, r3, #3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3208      	adds	r2, #8
 80096d8:	6939      	ldr	r1, [r7, #16]
 80096da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	2203      	movs	r2, #3
 80096ea:	fa02 f303 	lsl.w	r3, r2, r3
 80096ee:	43db      	mvns	r3, r3
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	4013      	ands	r3, r2
 80096f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f003 0203 	and.w	r2, r3, #3
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	fa02 f303 	lsl.w	r3, r2, r3
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	4313      	orrs	r3, r2
 800970a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 80a4 	beq.w	8009868 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8009720:	4a5a      	ldr	r2, [pc, #360]	; (800988c <HAL_GPIO_Init+0x2e0>)
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	3318      	adds	r3, #24
 8009728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800972c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	220f      	movs	r2, #15
 8009738:	fa02 f303 	lsl.w	r3, r2, r3
 800973c:	43db      	mvns	r3, r3
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	4013      	ands	r3, r2
 8009742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a52      	ldr	r2, [pc, #328]	; (8009890 <HAL_GPIO_Init+0x2e4>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d025      	beq.n	8009798 <HAL_GPIO_Init+0x1ec>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a51      	ldr	r2, [pc, #324]	; (8009894 <HAL_GPIO_Init+0x2e8>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d01f      	beq.n	8009794 <HAL_GPIO_Init+0x1e8>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a50      	ldr	r2, [pc, #320]	; (8009898 <HAL_GPIO_Init+0x2ec>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d019      	beq.n	8009790 <HAL_GPIO_Init+0x1e4>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a4f      	ldr	r2, [pc, #316]	; (800989c <HAL_GPIO_Init+0x2f0>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d013      	beq.n	800978c <HAL_GPIO_Init+0x1e0>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a4e      	ldr	r2, [pc, #312]	; (80098a0 <HAL_GPIO_Init+0x2f4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d00d      	beq.n	8009788 <HAL_GPIO_Init+0x1dc>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a4d      	ldr	r2, [pc, #308]	; (80098a4 <HAL_GPIO_Init+0x2f8>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d007      	beq.n	8009784 <HAL_GPIO_Init+0x1d8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a4c      	ldr	r2, [pc, #304]	; (80098a8 <HAL_GPIO_Init+0x2fc>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d101      	bne.n	8009780 <HAL_GPIO_Init+0x1d4>
 800977c:	2306      	movs	r3, #6
 800977e:	e00c      	b.n	800979a <HAL_GPIO_Init+0x1ee>
 8009780:	2307      	movs	r3, #7
 8009782:	e00a      	b.n	800979a <HAL_GPIO_Init+0x1ee>
 8009784:	2305      	movs	r3, #5
 8009786:	e008      	b.n	800979a <HAL_GPIO_Init+0x1ee>
 8009788:	2304      	movs	r3, #4
 800978a:	e006      	b.n	800979a <HAL_GPIO_Init+0x1ee>
 800978c:	2303      	movs	r3, #3
 800978e:	e004      	b.n	800979a <HAL_GPIO_Init+0x1ee>
 8009790:	2302      	movs	r3, #2
 8009792:	e002      	b.n	800979a <HAL_GPIO_Init+0x1ee>
 8009794:	2301      	movs	r3, #1
 8009796:	e000      	b.n	800979a <HAL_GPIO_Init+0x1ee>
 8009798:	2300      	movs	r3, #0
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	f002 0203 	and.w	r2, r2, #3
 80097a0:	00d2      	lsls	r2, r2, #3
 80097a2:	4093      	lsls	r3, r2
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80097aa:	4938      	ldr	r1, [pc, #224]	; (800988c <HAL_GPIO_Init+0x2e0>)
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	089b      	lsrs	r3, r3, #2
 80097b0:	3318      	adds	r3, #24
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80097b8:	4b34      	ldr	r3, [pc, #208]	; (800988c <HAL_GPIO_Init+0x2e0>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	43db      	mvns	r3, r3
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	4013      	ands	r3, r2
 80097c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4313      	orrs	r3, r2
 80097da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80097dc:	4a2b      	ldr	r2, [pc, #172]	; (800988c <HAL_GPIO_Init+0x2e0>)
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80097e2:	4b2a      	ldr	r3, [pc, #168]	; (800988c <HAL_GPIO_Init+0x2e0>)
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	43db      	mvns	r3, r3
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	4013      	ands	r3, r2
 80097f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4313      	orrs	r3, r2
 8009804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009806:	4a21      	ldr	r2, [pc, #132]	; (800988c <HAL_GPIO_Init+0x2e0>)
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800980c:	4b1f      	ldr	r3, [pc, #124]	; (800988c <HAL_GPIO_Init+0x2e0>)
 800980e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	43db      	mvns	r3, r3
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	4013      	ands	r3, r2
 800981c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009832:	4a16      	ldr	r2, [pc, #88]	; (800988c <HAL_GPIO_Init+0x2e0>)
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800983a:	4b14      	ldr	r3, [pc, #80]	; (800988c <HAL_GPIO_Init+0x2e0>)
 800983c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	43db      	mvns	r3, r3
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	4013      	ands	r3, r2
 800984a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009860:	4a0a      	ldr	r2, [pc, #40]	; (800988c <HAL_GPIO_Init+0x2e0>)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	3301      	adds	r3, #1
 800986c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	fa22 f303 	lsr.w	r3, r2, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	f47f ae9f 	bne.w	80095bc <HAL_GPIO_Init+0x10>
  }
}
 800987e:	bf00      	nop
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	4002f400 	.word	0x4002f400
 8009890:	42020000 	.word	0x42020000
 8009894:	42020400 	.word	0x42020400
 8009898:	42020800 	.word	0x42020800
 800989c:	42020c00 	.word	0x42020c00
 80098a0:	42021000 	.word	0x42021000
 80098a4:	42021400 	.word	0x42021400
 80098a8:	42021800 	.word	0x42021800

080098ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80098ba:	e0c7      	b.n	8009a4c <HAL_GPIO_DeInit+0x1a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80098bc:	2201      	movs	r2, #1
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	fa02 f303 	lsl.w	r3, r2, r3
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	4013      	ands	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 80ba 	beq.w	8009a46 <HAL_GPIO_DeInit+0x19a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
 80098d2:	4a65      	ldr	r2, [pc, #404]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	089b      	lsrs	r3, r3, #2
 80098d8:	3318      	adds	r3, #24
 80098da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098de:	60fb      	str	r3, [r7, #12]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	220f      	movs	r2, #15
 80098ea:	fa02 f303 	lsl.w	r3, r2, r3
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	4013      	ands	r3, r2
 80098f2:	60fb      	str	r3, [r7, #12]
      if (temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a5d      	ldr	r2, [pc, #372]	; (8009a6c <HAL_GPIO_DeInit+0x1c0>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d025      	beq.n	8009948 <HAL_GPIO_DeInit+0x9c>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a5c      	ldr	r2, [pc, #368]	; (8009a70 <HAL_GPIO_DeInit+0x1c4>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d01f      	beq.n	8009944 <HAL_GPIO_DeInit+0x98>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a5b      	ldr	r2, [pc, #364]	; (8009a74 <HAL_GPIO_DeInit+0x1c8>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d019      	beq.n	8009940 <HAL_GPIO_DeInit+0x94>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a5a      	ldr	r2, [pc, #360]	; (8009a78 <HAL_GPIO_DeInit+0x1cc>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d013      	beq.n	800993c <HAL_GPIO_DeInit+0x90>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a59      	ldr	r2, [pc, #356]	; (8009a7c <HAL_GPIO_DeInit+0x1d0>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00d      	beq.n	8009938 <HAL_GPIO_DeInit+0x8c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a58      	ldr	r2, [pc, #352]	; (8009a80 <HAL_GPIO_DeInit+0x1d4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d007      	beq.n	8009934 <HAL_GPIO_DeInit+0x88>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a57      	ldr	r2, [pc, #348]	; (8009a84 <HAL_GPIO_DeInit+0x1d8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d101      	bne.n	8009930 <HAL_GPIO_DeInit+0x84>
 800992c:	2306      	movs	r3, #6
 800992e:	e00c      	b.n	800994a <HAL_GPIO_DeInit+0x9e>
 8009930:	2307      	movs	r3, #7
 8009932:	e00a      	b.n	800994a <HAL_GPIO_DeInit+0x9e>
 8009934:	2305      	movs	r3, #5
 8009936:	e008      	b.n	800994a <HAL_GPIO_DeInit+0x9e>
 8009938:	2304      	movs	r3, #4
 800993a:	e006      	b.n	800994a <HAL_GPIO_DeInit+0x9e>
 800993c:	2303      	movs	r3, #3
 800993e:	e004      	b.n	800994a <HAL_GPIO_DeInit+0x9e>
 8009940:	2302      	movs	r3, #2
 8009942:	e002      	b.n	800994a <HAL_GPIO_DeInit+0x9e>
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <HAL_GPIO_DeInit+0x9e>
 8009948:	2300      	movs	r3, #0
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	f002 0203 	and.w	r2, r2, #3
 8009950:	00d2      	lsls	r2, r2, #3
 8009952:	4093      	lsls	r3, r2
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	429a      	cmp	r2, r3
 8009958:	d136      	bne.n	80099c8 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800995a:	4b43      	ldr	r3, [pc, #268]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 800995c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	43db      	mvns	r3, r3
 8009964:	4940      	ldr	r1, [pc, #256]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 8009966:	4013      	ands	r3, r2
 8009968:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800996c:	4b3e      	ldr	r3, [pc, #248]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 800996e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	43db      	mvns	r3, r3
 8009976:	493c      	ldr	r1, [pc, #240]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 8009978:	4013      	ands	r3, r2
 800997a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800997e:	4b3a      	ldr	r3, [pc, #232]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	43db      	mvns	r3, r3
 8009986:	4938      	ldr	r1, [pc, #224]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 8009988:	4013      	ands	r3, r2
 800998a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800998c:	4b36      	ldr	r3, [pc, #216]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	43db      	mvns	r3, r3
 8009994:	4934      	ldr	r1, [pc, #208]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 8009996:	4013      	ands	r3, r2
 8009998:	600b      	str	r3, [r1, #0]

        temp = (0x0FUL) << (8U * (position & 0x03U));
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	00db      	lsls	r3, r3, #3
 80099a2:	220f      	movs	r2, #15
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 80099aa:	4a2f      	ldr	r2, [pc, #188]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	089b      	lsrs	r3, r3, #2
 80099b0:	3318      	adds	r3, #24
 80099b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	43da      	mvns	r2, r3
 80099ba:	482b      	ldr	r0, [pc, #172]	; (8009a68 <HAL_GPIO_DeInit+0x1bc>)
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	089b      	lsrs	r3, r3, #2
 80099c0:	400a      	ands	r2, r1
 80099c2:	3318      	adds	r3, #24
 80099c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	2103      	movs	r1, #3
 80099d2:	fa01 f303 	lsl.w	r3, r1, r3
 80099d6:	431a      	orrs	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	08da      	lsrs	r2, r3, #3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3208      	adds	r2, #8
 80099e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	220f      	movs	r2, #15
 80099f2:	fa02 f303 	lsl.w	r3, r2, r3
 80099f6:	43db      	mvns	r3, r3
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	08d2      	lsrs	r2, r2, #3
 80099fc:	4019      	ands	r1, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	3208      	adds	r2, #8
 8009a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	2103      	movs	r1, #3
 8009a10:	fa01 f303 	lsl.w	r3, r1, r3
 8009a14:	43db      	mvns	r3, r3
 8009a16:	401a      	ands	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	2101      	movs	r1, #1
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	fa01 f303 	lsl.w	r3, r1, r3
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	401a      	ands	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	2103      	movs	r1, #3
 8009a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a3e:	43db      	mvns	r3, r3
 8009a40:	401a      	ands	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	fa22 f303 	lsr.w	r3, r2, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f47f af31 	bne.w	80098bc <HAL_GPIO_DeInit+0x10>
  }
}
 8009a5a:	bf00      	nop
 8009a5c:	bf00      	nop
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	4002f400 	.word	0x4002f400
 8009a6c:	42020000 	.word	0x42020000
 8009a70:	42020400 	.word	0x42020400
 8009a74:	42020800 	.word	0x42020800
 8009a78:	42020c00 	.word	0x42020c00
 8009a7c:	42021000 	.word	0x42021000
 8009a80:	42021400 	.word	0x42021400
 8009a84:	42021800 	.word	0x42021800

08009a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691a      	ldr	r2, [r3, #16]
 8009a98:	887b      	ldrh	r3, [r7, #2]
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	73fb      	strb	r3, [r7, #15]
 8009aa4:	e001      	b.n	8009aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	807b      	strh	r3, [r7, #2]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009ac8:	787b      	ldrb	r3, [r7, #1]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009ace:	887a      	ldrh	r2, [r7, #2]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009ad4:	e002      	b.n	8009adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009ad6:	887a      	ldrh	r2, [r7, #2]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e081      	b.n	8009bfe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7fe f8de 	bl	8007cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2224      	movs	r2, #36	; 0x24
 8009b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f022 0201 	bic.w	r2, r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d107      	bne.n	8009b62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689a      	ldr	r2, [r3, #8]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b5e:	609a      	str	r2, [r3, #8]
 8009b60:	e006      	b.n	8009b70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009b6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d104      	bne.n	8009b82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6812      	ldr	r2, [r2, #0]
 8009b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ba4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691a      	ldr	r2, [r3, #16]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	69d9      	ldr	r1, [r3, #28]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a1a      	ldr	r2, [r3, #32]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	430a      	orrs	r2, r1
 8009bce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f042 0201 	orr.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b20      	cmp	r3, #32
 8009c1a:	d138      	bne.n	8009c8e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d101      	bne.n	8009c2a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c26:	2302      	movs	r3, #2
 8009c28:	e032      	b.n	8009c90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2224      	movs	r2, #36	; 0x24
 8009c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0201 	bic.w	r2, r2, #1
 8009c48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c58:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6819      	ldr	r1, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f042 0201 	orr.w	r2, r2, #1
 8009c78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e000      	b.n	8009c90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c8e:	2302      	movs	r3, #2
  }
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d139      	bne.n	8009d26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d101      	bne.n	8009cc0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e033      	b.n	8009d28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2224      	movs	r2, #36	; 0x24
 8009ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 0201 	bic.w	r2, r2, #1
 8009cde:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009cee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f042 0201 	orr.w	r2, r2, #1
 8009d10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2220      	movs	r2, #32
 8009d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	e000      	b.n	8009d28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d26:	2302      	movs	r3, #2
  }
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8009d34:	b480      	push	{r7}
 8009d36:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009d38:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <HAL_ICACHE_Enable+0x1c>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a04      	ldr	r2, [pc, #16]	; (8009d50 <HAL_ICACHE_Enable+0x1c>)
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	40030400 	.word	0x40030400

08009d54 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009d54:	b480      	push	{r7}
 8009d56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d58:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a04      	ldr	r2, [pc, #16]	; (8009d70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d62:	6013      	str	r3, [r2, #0]
}
 8009d64:	bf00      	nop
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	40007000 	.word	0x40007000

08009d74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009d74:	b480      	push	{r7}
 8009d76:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8009d78:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <HAL_PWREx_GetVoltageRange+0x18>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	40007000 	.word	0x40007000

08009d90 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b084      	sub	sp, #16
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8009d98:	4b27      	ldr	r3, [pc, #156]	; (8009e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009da0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8009da2:	f000 f86b 	bl	8009e7c <HAL_PWREx_SMPS_GetEffectiveMode>
 8009da6:	4603      	mov	r3, r0
 8009da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dac:	d101      	bne.n	8009db2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e03e      	b.n	8009e30 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8009db2:	4b21      	ldr	r3, [pc, #132]	; (8009e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dbe:	d101      	bne.n	8009dc4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e035      	b.n	8009e30 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d101      	bne.n	8009dd0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	e02f      	b.n	8009e30 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009dd0:	4b19      	ldr	r3, [pc, #100]	; (8009e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009dd8:	4917      	ldr	r1, [pc, #92]	; (8009e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8009de0:	4b16      	ldr	r3, [pc, #88]	; (8009e3c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	095b      	lsrs	r3, r3, #5
 8009de6:	4a16      	ldr	r2, [pc, #88]	; (8009e40 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8009de8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dec:	09db      	lsrs	r3, r3, #7
 8009dee:	2232      	movs	r2, #50	; 0x32
 8009df0:	fb02 f303 	mul.w	r3, r2, r3
 8009df4:	4a13      	ldr	r2, [pc, #76]	; (8009e44 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8009df6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dfa:	08db      	lsrs	r3, r3, #3
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e00:	e002      	b.n	8009e08 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009e08:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e14:	d102      	bne.n	8009e1c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1f2      	bne.n	8009e02 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009e1c:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e28:	d101      	bne.n	8009e2e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e000      	b.n	8009e30 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	40007000 	.word	0x40007000
 8009e3c:	20000000 	.word	0x20000000
 8009e40:	0a7c5ac5 	.word	0x0a7c5ac5
 8009e44:	cccccccd 	.word	0xcccccccd

08009e48 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8009e4c:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f023 0307 	bic.w	r3, r3, #7
 8009e54:	4a07      	ldr	r2, [pc, #28]	; (8009e74 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8009e56:	f043 0304 	orr.w	r3, r3, #4
 8009e5a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009e5c:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	4a05      	ldr	r2, [pc, #20]	; (8009e78 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8009e62:	f043 0304 	orr.w	r3, r3, #4
 8009e66:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009e68:	bf30      	wfi
}
 8009e6a:	bf00      	nop
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	40007000 	.word	0x40007000
 8009e78:	e000ed00 	.word	0xe000ed00

08009e7c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8009e82:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8009e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e96:	607b      	str	r3, [r7, #4]
 8009e98:	e00a      	b.n	8009eb0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d103      	bne.n	8009eac <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8009ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ea8:	607b      	str	r3, [r7, #4]
 8009eaa:	e001      	b.n	8009eb0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8009eac:	2300      	movs	r3, #0
 8009eae:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8009eb0:	687b      	ldr	r3, [r7, #4]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	40007000 	.word	0x40007000

08009ec4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f000 bcc2 	b.w	800a85c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ed8:	4b99      	ldr	r3, [pc, #612]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	f003 030c 	and.w	r3, r3, #12
 8009ee0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ee2:	4b97      	ldr	r3, [pc, #604]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f003 0303 	and.w	r3, r3, #3
 8009eea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0310 	and.w	r3, r3, #16
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 80e9 	beq.w	800a0cc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d006      	beq.n	8009f0e <HAL_RCC_OscConfig+0x4a>
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2b0c      	cmp	r3, #12
 8009f04:	f040 8083 	bne.w	800a00e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d17f      	bne.n	800a00e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009f0e:	4b8c      	ldr	r3, [pc, #560]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d006      	beq.n	8009f28 <HAL_RCC_OscConfig+0x64>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d102      	bne.n	8009f28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	f000 bc9a 	b.w	800a85c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2c:	4b84      	ldr	r3, [pc, #528]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0308 	and.w	r3, r3, #8
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <HAL_RCC_OscConfig+0x7e>
 8009f38:	4b81      	ldr	r3, [pc, #516]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f40:	e005      	b.n	8009f4e <HAL_RCC_OscConfig+0x8a>
 8009f42:	4b7f      	ldr	r3, [pc, #508]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f48:	091b      	lsrs	r3, r3, #4
 8009f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d224      	bcs.n	8009f9c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 fece 	bl	800acf8 <RCC_SetFlashLatencyFromMSIRange>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f000 bc7a 	b.w	800a85c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009f68:	4b75      	ldr	r3, [pc, #468]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a74      	ldr	r2, [pc, #464]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f6e:	f043 0308 	orr.w	r3, r3, #8
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	4b72      	ldr	r3, [pc, #456]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	496f      	ldr	r1, [pc, #444]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009f86:	4b6e      	ldr	r3, [pc, #440]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	496a      	ldr	r1, [pc, #424]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	604b      	str	r3, [r1, #4]
 8009f9a:	e026      	b.n	8009fea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009f9c:	4b68      	ldr	r3, [pc, #416]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a67      	ldr	r2, [pc, #412]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009fa2:	f043 0308 	orr.w	r3, r3, #8
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	4b65      	ldr	r3, [pc, #404]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	4962      	ldr	r1, [pc, #392]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009fba:	4b61      	ldr	r3, [pc, #388]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	021b      	lsls	r3, r3, #8
 8009fc8:	495d      	ldr	r1, [pc, #372]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 fe8d 	bl	800acf8 <RCC_SetFlashLatencyFromMSIRange>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f000 bc39 	b.w	800a85c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009fea:	f000 fe17 	bl	800ac1c <HAL_RCC_GetHCLKFreq>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	4a54      	ldr	r2, [pc, #336]	; (800a144 <HAL_RCC_OscConfig+0x280>)
 8009ff2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009ff4:	4b54      	ldr	r3, [pc, #336]	; (800a148 <HAL_RCC_OscConfig+0x284>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fe f92f 	bl	800825c <HAL_InitTick>
 8009ffe:	4603      	mov	r3, r0
 800a000:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800a002:	7bfb      	ldrb	r3, [r7, #15]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d060      	beq.n	800a0ca <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	f000 bc27 	b.w	800a85c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d039      	beq.n	800a08a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a016:	4b4a      	ldr	r3, [pc, #296]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a49      	ldr	r2, [pc, #292]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a01c:	f043 0301 	orr.w	r3, r3, #1
 800a020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a022:	f7fe fe05 	bl	8008c30 <HAL_GetTick>
 800a026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a028:	e00f      	b.n	800a04a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a02a:	f7fe fe01 	bl	8008c30 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b02      	cmp	r3, #2
 800a036:	d908      	bls.n	800a04a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a038:	4b41      	ldr	r3, [pc, #260]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	f000 bc09 	b.w	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a04a:	4b3d      	ldr	r3, [pc, #244]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d0e9      	beq.n	800a02a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a056:	4b3a      	ldr	r3, [pc, #232]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a39      	ldr	r2, [pc, #228]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a05c:	f043 0308 	orr.w	r3, r3, #8
 800a060:	6013      	str	r3, [r2, #0]
 800a062:	4b37      	ldr	r3, [pc, #220]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	4934      	ldr	r1, [pc, #208]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a070:	4313      	orrs	r3, r2
 800a072:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a074:	4b32      	ldr	r3, [pc, #200]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1b      	ldr	r3, [r3, #32]
 800a080:	021b      	lsls	r3, r3, #8
 800a082:	492f      	ldr	r1, [pc, #188]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a084:	4313      	orrs	r3, r2
 800a086:	604b      	str	r3, [r1, #4]
 800a088:	e020      	b.n	800a0cc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a08a:	4b2d      	ldr	r3, [pc, #180]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a2c      	ldr	r2, [pc, #176]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a090:	f023 0301 	bic.w	r3, r3, #1
 800a094:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a096:	f7fe fdcb 	bl	8008c30 <HAL_GetTick>
 800a09a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a09c:	e00e      	b.n	800a0bc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a09e:	f7fe fdc7 	bl	8008c30 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d907      	bls.n	800a0bc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a0ac:	4b24      	ldr	r3, [pc, #144]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e3cf      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a0bc:	4b20      	ldr	r3, [pc, #128]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0302 	and.w	r3, r3, #2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1ea      	bne.n	800a09e <HAL_RCC_OscConfig+0x1da>
 800a0c8:	e000      	b.n	800a0cc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a0ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d07e      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	d005      	beq.n	800a0ea <HAL_RCC_OscConfig+0x226>
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2b0c      	cmp	r3, #12
 800a0e2:	d10e      	bne.n	800a102 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d10b      	bne.n	800a102 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0ea:	4b15      	ldr	r3, [pc, #84]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d06e      	beq.n	800a1d4 <HAL_RCC_OscConfig+0x310>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d16a      	bne.n	800a1d4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e3ac      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a10a:	d106      	bne.n	800a11a <HAL_RCC_OscConfig+0x256>
 800a10c:	4b0c      	ldr	r3, [pc, #48]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0b      	ldr	r2, [pc, #44]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a116:	6013      	str	r3, [r2, #0]
 800a118:	e024      	b.n	800a164 <HAL_RCC_OscConfig+0x2a0>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a122:	d113      	bne.n	800a14c <HAL_RCC_OscConfig+0x288>
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a05      	ldr	r2, [pc, #20]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a12a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a12e:	6013      	str	r3, [r2, #0]
 800a130:	4b03      	ldr	r3, [pc, #12]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a02      	ldr	r2, [pc, #8]	; (800a140 <HAL_RCC_OscConfig+0x27c>)
 800a136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	e012      	b.n	800a164 <HAL_RCC_OscConfig+0x2a0>
 800a13e:	bf00      	nop
 800a140:	40021000 	.word	0x40021000
 800a144:	20000000 	.word	0x20000000
 800a148:	20000004 	.word	0x20000004
 800a14c:	4b8b      	ldr	r3, [pc, #556]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a8a      	ldr	r2, [pc, #552]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	4b88      	ldr	r3, [pc, #544]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a87      	ldr	r2, [pc, #540]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a15e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d019      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a16c:	f7fe fd60 	bl	8008c30 <HAL_GetTick>
 800a170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a172:	e00e      	b.n	800a192 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a174:	f7fe fd5c 	bl	8008c30 <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	2bc8      	cmp	r3, #200	; 0xc8
 800a180:	d907      	bls.n	800a192 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a182:	4b7e      	ldr	r3, [pc, #504]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e364      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a192:	4b7a      	ldr	r3, [pc, #488]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0ea      	beq.n	800a174 <HAL_RCC_OscConfig+0x2b0>
 800a19e:	e01a      	b.n	800a1d6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1a0:	f7fe fd46 	bl	8008c30 <HAL_GetTick>
 800a1a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a1a6:	e00e      	b.n	800a1c6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1a8:	f7fe fd42 	bl	8008c30 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	2bc8      	cmp	r3, #200	; 0xc8
 800a1b4:	d907      	bls.n	800a1c6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a1b6:	4b71      	ldr	r3, [pc, #452]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e34a      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a1c6:	4b6d      	ldr	r3, [pc, #436]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1ea      	bne.n	800a1a8 <HAL_RCC_OscConfig+0x2e4>
 800a1d2:	e000      	b.n	800a1d6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d06c      	beq.n	800a2bc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b04      	cmp	r3, #4
 800a1e6:	d005      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x330>
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	2b0c      	cmp	r3, #12
 800a1ec:	d119      	bne.n	800a222 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d116      	bne.n	800a222 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1f4:	4b61      	ldr	r3, [pc, #388]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <HAL_RCC_OscConfig+0x348>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e327      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a20c:	4b5b      	ldr	r3, [pc, #364]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	061b      	lsls	r3, r3, #24
 800a21a:	4958      	ldr	r1, [pc, #352]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a220:	e04c      	b.n	800a2bc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d029      	beq.n	800a27e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a22a:	4b54      	ldr	r3, [pc, #336]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a53      	ldr	r2, [pc, #332]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a236:	f7fe fcfb 	bl	8008c30 <HAL_GetTick>
 800a23a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a23c:	e00e      	b.n	800a25c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a23e:	f7fe fcf7 	bl	8008c30 <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d907      	bls.n	800a25c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a24c:	4b4b      	ldr	r3, [pc, #300]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a254:	2b00      	cmp	r3, #0
 800a256:	d101      	bne.n	800a25c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e2ff      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a25c:	4b47      	ldr	r3, [pc, #284]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0ea      	beq.n	800a23e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a268:	4b44      	ldr	r3, [pc, #272]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	061b      	lsls	r3, r3, #24
 800a276:	4941      	ldr	r1, [pc, #260]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a278:	4313      	orrs	r3, r2
 800a27a:	604b      	str	r3, [r1, #4]
 800a27c:	e01e      	b.n	800a2bc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a27e:	4b3f      	ldr	r3, [pc, #252]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a3e      	ldr	r2, [pc, #248]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28a:	f7fe fcd1 	bl	8008c30 <HAL_GetTick>
 800a28e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a290:	e00e      	b.n	800a2b0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a292:	f7fe fccd 	bl	8008c30 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d907      	bls.n	800a2b0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a2a0:	4b36      	ldr	r3, [pc, #216]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e2d5      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a2b0:	4b32      	ldr	r3, [pc, #200]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1ea      	bne.n	800a292 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f003 0308 	and.w	r3, r3, #8
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d062      	beq.n	800a38e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d038      	beq.n	800a342 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d108      	bne.n	800a2ea <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800a2d8:	4b28      	ldr	r3, [pc, #160]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a2da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2de:	4a27      	ldr	r2, [pc, #156]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a2e0:	f023 0310 	bic.w	r3, r3, #16
 800a2e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a2e8:	e007      	b.n	800a2fa <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800a2ea:	4b24      	ldr	r3, [pc, #144]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a2ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2f0:	4a22      	ldr	r2, [pc, #136]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a2f2:	f043 0310 	orr.w	r3, r3, #16
 800a2f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2fa:	4b20      	ldr	r3, [pc, #128]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a2fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a300:	4a1e      	ldr	r2, [pc, #120]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a302:	f043 0301 	orr.w	r3, r3, #1
 800a306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a30a:	f7fe fc91 	bl	8008c30 <HAL_GetTick>
 800a30e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a310:	e00f      	b.n	800a332 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a312:	f7fe fc8d 	bl	8008c30 <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2b07      	cmp	r3, #7
 800a31e:	d908      	bls.n	800a332 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a320:	4b16      	ldr	r3, [pc, #88]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e294      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a332:	4b12      	ldr	r3, [pc, #72]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0e8      	beq.n	800a312 <HAL_RCC_OscConfig+0x44e>
 800a340:	e025      	b.n	800a38e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a342:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a348:	4a0c      	ldr	r2, [pc, #48]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a34a:	f023 0301 	bic.w	r3, r3, #1
 800a34e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a352:	f7fe fc6d 	bl	8008c30 <HAL_GetTick>
 800a356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a358:	e012      	b.n	800a380 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a35a:	f7fe fc69 	bl	8008c30 <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b07      	cmp	r3, #7
 800a366:	d90b      	bls.n	800a380 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a368:	4b04      	ldr	r3, [pc, #16]	; (800a37c <HAL_RCC_OscConfig+0x4b8>)
 800a36a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d004      	beq.n	800a380 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e270      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
 800a37a:	bf00      	nop
 800a37c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a380:	4ba8      	ldr	r3, [pc, #672]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1e5      	bne.n	800a35a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 0304 	and.w	r3, r3, #4
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 812d 	beq.w	800a5f6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a39c:	2300      	movs	r3, #0
 800a39e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a3a0:	4ba0      	ldr	r3, [pc, #640]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a3a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10d      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3ac:	4b9d      	ldr	r3, [pc, #628]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b0:	4a9c      	ldr	r2, [pc, #624]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a3b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3b6:	6593      	str	r3, [r2, #88]	; 0x58
 800a3b8:	4b9a      	ldr	r3, [pc, #616]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3c0:	60bb      	str	r3, [r7, #8]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a3c8:	4b97      	ldr	r3, [pc, #604]	; (800a628 <HAL_RCC_OscConfig+0x764>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d11e      	bne.n	800a412 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3d4:	4b94      	ldr	r3, [pc, #592]	; (800a628 <HAL_RCC_OscConfig+0x764>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a93      	ldr	r2, [pc, #588]	; (800a628 <HAL_RCC_OscConfig+0x764>)
 800a3da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3e0:	f7fe fc26 	bl	8008c30 <HAL_GetTick>
 800a3e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a3e6:	e00e      	b.n	800a406 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3e8:	f7fe fc22 	bl	8008c30 <HAL_GetTick>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d907      	bls.n	800a406 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a3f6:	4b8c      	ldr	r3, [pc, #560]	; (800a628 <HAL_RCC_OscConfig+0x764>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e22a      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a406:	4b88      	ldr	r3, [pc, #544]	; (800a628 <HAL_RCC_OscConfig+0x764>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0ea      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d01f      	beq.n	800a45e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f003 0304 	and.w	r3, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	d010      	beq.n	800a44c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a42a:	4b7e      	ldr	r3, [pc, #504]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a430:	4a7c      	ldr	r2, [pc, #496]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a432:	f043 0304 	orr.w	r3, r3, #4
 800a436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a43a:	4b7a      	ldr	r3, [pc, #488]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a440:	4a78      	ldr	r2, [pc, #480]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a442:	f043 0301 	orr.w	r3, r3, #1
 800a446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a44a:	e018      	b.n	800a47e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a44c:	4b75      	ldr	r3, [pc, #468]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a452:	4a74      	ldr	r2, [pc, #464]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a454:	f043 0301 	orr.w	r3, r3, #1
 800a458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a45c:	e00f      	b.n	800a47e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a45e:	4b71      	ldr	r3, [pc, #452]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a464:	4a6f      	ldr	r2, [pc, #444]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a46e:	4b6d      	ldr	r3, [pc, #436]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a474:	4a6b      	ldr	r2, [pc, #428]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a476:	f023 0304 	bic.w	r3, r3, #4
 800a47a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d068      	beq.n	800a558 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a486:	f7fe fbd3 	bl	8008c30 <HAL_GetTick>
 800a48a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a48c:	e011      	b.n	800a4b2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a48e:	f7fe fbcf 	bl	8008c30 <HAL_GetTick>
 800a492:	4602      	mov	r2, r0
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	f241 3288 	movw	r2, #5000	; 0x1388
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d908      	bls.n	800a4b2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4a0:	4b60      	ldr	r3, [pc, #384]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e1d4      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4b2:	4b5c      	ldr	r3, [pc, #368]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b8:	f003 0302 	and.w	r3, r3, #2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0e6      	beq.n	800a48e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d022      	beq.n	800a512 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a4cc:	4b55      	ldr	r3, [pc, #340]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d2:	4a54      	ldr	r2, [pc, #336]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a4dc:	e011      	b.n	800a502 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4de:	f7fe fba7 	bl	8008c30 <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d908      	bls.n	800a502 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a4f0:	4b4c      	ldr	r3, [pc, #304]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d101      	bne.n	800a502 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800a4fe:	2303      	movs	r3, #3
 800a500:	e1ac      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a502:	4b48      	ldr	r3, [pc, #288]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0e6      	beq.n	800a4de <HAL_RCC_OscConfig+0x61a>
 800a510:	e068      	b.n	800a5e4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a512:	4b44      	ldr	r3, [pc, #272]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a518:	4a42      	ldr	r2, [pc, #264]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a51a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a51e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a522:	e011      	b.n	800a548 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a524:	f7fe fb84 	bl	8008c30 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a532:	4293      	cmp	r3, r2
 800a534:	d908      	bls.n	800a548 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a536:	4b3b      	ldr	r3, [pc, #236]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a53c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e189      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a548:	4b36      	ldr	r3, [pc, #216]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a54e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e6      	bne.n	800a524 <HAL_RCC_OscConfig+0x660>
 800a556:	e045      	b.n	800a5e4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a558:	f7fe fb6a 	bl	8008c30 <HAL_GetTick>
 800a55c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a55e:	e011      	b.n	800a584 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a560:	f7fe fb66 	bl	8008c30 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a56e:	4293      	cmp	r3, r2
 800a570:	d908      	bls.n	800a584 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a572:	4b2c      	ldr	r3, [pc, #176]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e16b      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a584:	4b27      	ldr	r3, [pc, #156]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1e6      	bne.n	800a560 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800a592:	4b24      	ldr	r3, [pc, #144]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d021      	beq.n	800a5e4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a5a0:	4b20      	ldr	r3, [pc, #128]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a6:	4a1f      	ldr	r2, [pc, #124]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a5a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a5b0:	e011      	b.n	800a5d6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5b2:	f7fe fb3d 	bl	8008c30 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d908      	bls.n	800a5d6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a5c4:	4b17      	ldr	r3, [pc, #92]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a5c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e142      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a5d6:	4b13      	ldr	r3, [pc, #76]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1e6      	bne.n	800a5b2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a5e4:	7ffb      	ldrb	r3, [r7, #31]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d105      	bne.n	800a5f6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5ea:	4b0e      	ldr	r3, [pc, #56]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ee:	4a0d      	ldr	r2, [pc, #52]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a5f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0320 	and.w	r3, r3, #32
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d04f      	beq.n	800a6a2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a606:	2b00      	cmp	r3, #0
 800a608:	d028      	beq.n	800a65c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a60a:	4b06      	ldr	r3, [pc, #24]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a60c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a610:	4a04      	ldr	r2, [pc, #16]	; (800a624 <HAL_RCC_OscConfig+0x760>)
 800a612:	f043 0301 	orr.w	r3, r3, #1
 800a616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61a:	f7fe fb09 	bl	8008c30 <HAL_GetTick>
 800a61e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a620:	e014      	b.n	800a64c <HAL_RCC_OscConfig+0x788>
 800a622:	bf00      	nop
 800a624:	40021000 	.word	0x40021000
 800a628:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a62c:	f7fe fb00 	bl	8008c30 <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	2b02      	cmp	r3, #2
 800a638:	d908      	bls.n	800a64c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a63a:	4b8a      	ldr	r3, [pc, #552]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a63c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a640:	f003 0302 	and.w	r3, r3, #2
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e107      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a64c:	4b85      	ldr	r3, [pc, #532]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a64e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0e8      	beq.n	800a62c <HAL_RCC_OscConfig+0x768>
 800a65a:	e022      	b.n	800a6a2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a65c:	4b81      	ldr	r3, [pc, #516]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a65e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a662:	4a80      	ldr	r2, [pc, #512]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a664:	f023 0301 	bic.w	r3, r3, #1
 800a668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a66c:	f7fe fae0 	bl	8008c30 <HAL_GetTick>
 800a670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a672:	e00f      	b.n	800a694 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a674:	f7fe fadc 	bl	8008c30 <HAL_GetTick>
 800a678:	4602      	mov	r2, r0
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d908      	bls.n	800a694 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a682:	4b78      	ldr	r3, [pc, #480]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a688:	f003 0302 	and.w	r3, r3, #2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e0e3      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a694:	4b73      	ldr	r3, [pc, #460]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e8      	bne.n	800a674 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80d7 	beq.w	800a85a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6ac:	4b6d      	ldr	r3, [pc, #436]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	f003 030c 	and.w	r3, r3, #12
 800a6b4:	2b0c      	cmp	r3, #12
 800a6b6:	f000 8091 	beq.w	800a7dc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d166      	bne.n	800a790 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6c2:	4b68      	ldr	r3, [pc, #416]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a67      	ldr	r2, [pc, #412]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a6c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ce:	f7fe faaf 	bl	8008c30 <HAL_GetTick>
 800a6d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6d4:	e00e      	b.n	800a6f4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6d6:	f7fe faab 	bl	8008c30 <HAL_GetTick>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d907      	bls.n	800a6f4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6e4:	4b5f      	ldr	r3, [pc, #380]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e0b3      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6f4:	4b5b      	ldr	r3, [pc, #364]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1ea      	bne.n	800a6d6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a700:	4b58      	ldr	r3, [pc, #352]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a702:	68da      	ldr	r2, [r3, #12]
 800a704:	4b58      	ldr	r3, [pc, #352]	; (800a868 <HAL_RCC_OscConfig+0x9a4>)
 800a706:	4013      	ands	r3, r2
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a710:	3a01      	subs	r2, #1
 800a712:	0112      	lsls	r2, r2, #4
 800a714:	4311      	orrs	r1, r2
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a71a:	0212      	lsls	r2, r2, #8
 800a71c:	4311      	orrs	r1, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a722:	0852      	lsrs	r2, r2, #1
 800a724:	3a01      	subs	r2, #1
 800a726:	0552      	lsls	r2, r2, #21
 800a728:	4311      	orrs	r1, r2
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a72e:	0852      	lsrs	r2, r2, #1
 800a730:	3a01      	subs	r2, #1
 800a732:	0652      	lsls	r2, r2, #25
 800a734:	4311      	orrs	r1, r2
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a73a:	06d2      	lsls	r2, r2, #27
 800a73c:	430a      	orrs	r2, r1
 800a73e:	4949      	ldr	r1, [pc, #292]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a740:	4313      	orrs	r3, r2
 800a742:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a744:	4b47      	ldr	r3, [pc, #284]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a46      	ldr	r2, [pc, #280]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a74a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a74e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a750:	4b44      	ldr	r3, [pc, #272]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	4a43      	ldr	r2, [pc, #268]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a75a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a75c:	f7fe fa68 	bl	8008c30 <HAL_GetTick>
 800a760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a762:	e00e      	b.n	800a782 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a764:	f7fe fa64 	bl	8008c30 <HAL_GetTick>
 800a768:	4602      	mov	r2, r0
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d907      	bls.n	800a782 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a772:	4b3c      	ldr	r3, [pc, #240]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d101      	bne.n	800a782 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e06c      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a782:	4b38      	ldr	r3, [pc, #224]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0ea      	beq.n	800a764 <HAL_RCC_OscConfig+0x8a0>
 800a78e:	e064      	b.n	800a85a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a790:	4b34      	ldr	r3, [pc, #208]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a33      	ldr	r2, [pc, #204]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a79a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a79c:	f7fe fa48 	bl	8008c30 <HAL_GetTick>
 800a7a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7a2:	e00e      	b.n	800a7c2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7a4:	f7fe fa44 	bl	8008c30 <HAL_GetTick>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d907      	bls.n	800a7c2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7b2:	4b2c      	ldr	r3, [pc, #176]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e04c      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7c2:	4b28      	ldr	r3, [pc, #160]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1ea      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a7ce:	4b25      	ldr	r3, [pc, #148]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a7d0:	68da      	ldr	r2, [r3, #12]
 800a7d2:	4924      	ldr	r1, [pc, #144]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a7d4:	4b25      	ldr	r3, [pc, #148]	; (800a86c <HAL_RCC_OscConfig+0x9a8>)
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	60cb      	str	r3, [r1, #12]
 800a7da:	e03e      	b.n	800a85a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e039      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800a7e8:	4b1e      	ldr	r3, [pc, #120]	; (800a864 <HAL_RCC_OscConfig+0x9a0>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f003 0203 	and.w	r2, r3, #3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d12c      	bne.n	800a856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a806:	3b01      	subs	r3, #1
 800a808:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d123      	bne.n	800a856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d11b      	bne.n	800a856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a828:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d113      	bne.n	800a856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a838:	085b      	lsrs	r3, r3, #1
 800a83a:	3b01      	subs	r3, #1
 800a83c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a83e:	429a      	cmp	r2, r3
 800a840:	d109      	bne.n	800a856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a84c:	085b      	lsrs	r3, r3, #1
 800a84e:	3b01      	subs	r3, #1
 800a850:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a852:	429a      	cmp	r2, r3
 800a854:	d001      	beq.n	800a85a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e000      	b.n	800a85c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3720      	adds	r7, #32
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40021000 	.word	0x40021000
 800a868:	019f800c 	.word	0x019f800c
 800a86c:	feeefffc 	.word	0xfeeefffc

0800a870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a87a:	2300      	movs	r3, #0
 800a87c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e11c      	b.n	800aac2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a888:	4b90      	ldr	r3, [pc, #576]	; (800aacc <HAL_RCC_ClockConfig+0x25c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 030f 	and.w	r3, r3, #15
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d910      	bls.n	800a8b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a896:	4b8d      	ldr	r3, [pc, #564]	; (800aacc <HAL_RCC_ClockConfig+0x25c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f023 020f 	bic.w	r2, r3, #15
 800a89e:	498b      	ldr	r1, [pc, #556]	; (800aacc <HAL_RCC_ClockConfig+0x25c>)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8a6:	4b89      	ldr	r3, [pc, #548]	; (800aacc <HAL_RCC_ClockConfig+0x25c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 030f 	and.w	r3, r3, #15
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d001      	beq.n	800a8b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e104      	b.n	800aac2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0302 	and.w	r3, r3, #2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d010      	beq.n	800a8e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	689a      	ldr	r2, [r3, #8]
 800a8c8:	4b81      	ldr	r3, [pc, #516]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d908      	bls.n	800a8e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8d4:	4b7e      	ldr	r3, [pc, #504]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	497b      	ldr	r1, [pc, #492]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 8085 	beq.w	800a9fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d11f      	bne.n	800a93c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8fc:	4b74      	ldr	r3, [pc, #464]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e0da      	b.n	800aac2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a90c:	f000 fa58 	bl	800adc0 <RCC_GetSysClockFreqFromPLLSource>
 800a910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	4a6f      	ldr	r2, [pc, #444]	; (800aad4 <HAL_RCC_ClockConfig+0x264>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d947      	bls.n	800a9aa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a91a:	4b6d      	ldr	r3, [pc, #436]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d141      	bne.n	800a9aa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a926:	4b6a      	ldr	r3, [pc, #424]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a92e:	4a68      	ldr	r2, [pc, #416]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a936:	2380      	movs	r3, #128	; 0x80
 800a938:	617b      	str	r3, [r7, #20]
 800a93a:	e036      	b.n	800a9aa <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	2b02      	cmp	r3, #2
 800a942:	d107      	bne.n	800a954 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a944:	4b62      	ldr	r3, [pc, #392]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d115      	bne.n	800a97c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e0b6      	b.n	800aac2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d107      	bne.n	800a96c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a95c:	4b5c      	ldr	r3, [pc, #368]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 0302 	and.w	r3, r3, #2
 800a964:	2b00      	cmp	r3, #0
 800a966:	d109      	bne.n	800a97c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e0aa      	b.n	800aac2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a96c:	4b58      	ldr	r3, [pc, #352]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e0a2      	b.n	800aac2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a97c:	f000 f8b0 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800a980:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	4a53      	ldr	r2, [pc, #332]	; (800aad4 <HAL_RCC_ClockConfig+0x264>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d90f      	bls.n	800a9aa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a98a:	4b51      	ldr	r3, [pc, #324]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d109      	bne.n	800a9aa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a996:	4b4e      	ldr	r3, [pc, #312]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a99e:	4a4c      	ldr	r2, [pc, #304]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a9a6:	2380      	movs	r3, #128	; 0x80
 800a9a8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9aa:	4b49      	ldr	r3, [pc, #292]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f023 0203 	bic.w	r2, r3, #3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	4946      	ldr	r1, [pc, #280]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9bc:	f7fe f938 	bl	8008c30 <HAL_GetTick>
 800a9c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9c2:	e013      	b.n	800a9ec <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9c4:	f7fe f934 	bl	8008c30 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d90a      	bls.n	800a9ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9d6:	4b3e      	ldr	r3, [pc, #248]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	f003 020c 	and.w	r2, r3, #12
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d001      	beq.n	800a9ec <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e06a      	b.n	800aac2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9ec:	4b38      	ldr	r3, [pc, #224]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f003 020c 	and.w	r2, r3, #12
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d1e2      	bne.n	800a9c4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b80      	cmp	r3, #128	; 0x80
 800aa02:	d105      	bne.n	800aa10 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800aa04:	4b32      	ldr	r3, [pc, #200]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	4a31      	ldr	r2, [pc, #196]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aa0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa0e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d010      	beq.n	800aa3e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	4b2b      	ldr	r3, [pc, #172]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d208      	bcs.n	800aa3e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa2c:	4b28      	ldr	r3, [pc, #160]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	4925      	ldr	r1, [pc, #148]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa3e:	4b23      	ldr	r3, [pc, #140]	; (800aacc <HAL_RCC_ClockConfig+0x25c>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 030f 	and.w	r3, r3, #15
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d210      	bcs.n	800aa6e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa4c:	4b1f      	ldr	r3, [pc, #124]	; (800aacc <HAL_RCC_ClockConfig+0x25c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f023 020f 	bic.w	r2, r3, #15
 800aa54:	491d      	ldr	r1, [pc, #116]	; (800aacc <HAL_RCC_ClockConfig+0x25c>)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa5c:	4b1b      	ldr	r3, [pc, #108]	; (800aacc <HAL_RCC_ClockConfig+0x25c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 030f 	and.w	r3, r3, #15
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d001      	beq.n	800aa6e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e029      	b.n	800aac2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0304 	and.w	r3, r3, #4
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d008      	beq.n	800aa8c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa7a:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	4912      	ldr	r1, [pc, #72]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0308 	and.w	r3, r3, #8
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d009      	beq.n	800aaac <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa98:	4b0d      	ldr	r3, [pc, #52]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	00db      	lsls	r3, r3, #3
 800aaa6:	490a      	ldr	r1, [pc, #40]	; (800aad0 <HAL_RCC_ClockConfig+0x260>)
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800aaac:	f000 f8b6 	bl	800ac1c <HAL_RCC_GetHCLKFreq>
 800aab0:	4603      	mov	r3, r0
 800aab2:	4a09      	ldr	r2, [pc, #36]	; (800aad8 <HAL_RCC_ClockConfig+0x268>)
 800aab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <HAL_RCC_ClockConfig+0x26c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fd fbce 	bl	800825c <HAL_InitTick>
 800aac0:	4603      	mov	r3, r0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	40022000 	.word	0x40022000
 800aad0:	40021000 	.word	0x40021000
 800aad4:	04c4b400 	.word	0x04c4b400
 800aad8:	20000000 	.word	0x20000000
 800aadc:	20000004 	.word	0x20000004

0800aae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b089      	sub	sp, #36	; 0x24
 800aae4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	61fb      	str	r3, [r7, #28]
 800aaea:	2300      	movs	r3, #0
 800aaec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aaee:	4b47      	ldr	r3, [pc, #284]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	f003 030c 	and.w	r3, r3, #12
 800aaf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aaf8:	4b44      	ldr	r3, [pc, #272]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	f003 0303 	and.w	r3, r3, #3
 800ab00:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <HAL_RCC_GetSysClockFreq+0x34>
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	2b0c      	cmp	r3, #12
 800ab0c:	d121      	bne.n	800ab52 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d11e      	bne.n	800ab52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ab14:	4b3d      	ldr	r3, [pc, #244]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 0308 	and.w	r3, r3, #8
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d107      	bne.n	800ab30 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ab20:	4b3a      	ldr	r3, [pc, #232]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ab22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab26:	0a1b      	lsrs	r3, r3, #8
 800ab28:	f003 030f 	and.w	r3, r3, #15
 800ab2c:	61fb      	str	r3, [r7, #28]
 800ab2e:	e005      	b.n	800ab3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ab30:	4b36      	ldr	r3, [pc, #216]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	091b      	lsrs	r3, r3, #4
 800ab36:	f003 030f 	and.w	r3, r3, #15
 800ab3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800ab3c:	4a34      	ldr	r2, [pc, #208]	; (800ac10 <HAL_RCC_GetSysClockFreq+0x130>)
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab44:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10d      	bne.n	800ab68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800ab50:	e00a      	b.n	800ab68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d102      	bne.n	800ab5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ab58:	4b2e      	ldr	r3, [pc, #184]	; (800ac14 <HAL_RCC_GetSysClockFreq+0x134>)
 800ab5a:	61bb      	str	r3, [r7, #24]
 800ab5c:	e004      	b.n	800ab68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2b08      	cmp	r3, #8
 800ab62:	d101      	bne.n	800ab68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ab64:	4b2c      	ldr	r3, [pc, #176]	; (800ac18 <HAL_RCC_GetSysClockFreq+0x138>)
 800ab66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2b0c      	cmp	r3, #12
 800ab6c:	d146      	bne.n	800abfc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800ab6e:	4b27      	ldr	r3, [pc, #156]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	f003 0303 	and.w	r3, r3, #3
 800ab76:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ab78:	4b24      	ldr	r3, [pc, #144]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	091b      	lsrs	r3, r3, #4
 800ab7e:	f003 030f 	and.w	r3, r3, #15
 800ab82:	3301      	adds	r3, #1
 800ab84:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d003      	beq.n	800ab94 <HAL_RCC_GetSysClockFreq+0xb4>
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d00d      	beq.n	800abae <HAL_RCC_GetSysClockFreq+0xce>
 800ab92:	e019      	b.n	800abc8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ab94:	4a1f      	ldr	r2, [pc, #124]	; (800ac14 <HAL_RCC_GetSysClockFreq+0x134>)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab9c:	4a1b      	ldr	r2, [pc, #108]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800ab9e:	68d2      	ldr	r2, [r2, #12]
 800aba0:	0a12      	lsrs	r2, r2, #8
 800aba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aba6:	fb02 f303 	mul.w	r3, r2, r3
 800abaa:	617b      	str	r3, [r7, #20]
        break;
 800abac:	e019      	b.n	800abe2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800abae:	4a1a      	ldr	r2, [pc, #104]	; (800ac18 <HAL_RCC_GetSysClockFreq+0x138>)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abb6:	4a15      	ldr	r2, [pc, #84]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800abb8:	68d2      	ldr	r2, [r2, #12]
 800abba:	0a12      	lsrs	r2, r2, #8
 800abbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800abc0:	fb02 f303 	mul.w	r3, r2, r3
 800abc4:	617b      	str	r3, [r7, #20]
        break;
 800abc6:	e00c      	b.n	800abe2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800abd0:	4a0e      	ldr	r2, [pc, #56]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800abd2:	68d2      	ldr	r2, [r2, #12]
 800abd4:	0a12      	lsrs	r2, r2, #8
 800abd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800abda:	fb02 f303 	mul.w	r3, r2, r3
 800abde:	617b      	str	r3, [r7, #20]
        break;
 800abe0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800abe2:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <HAL_RCC_GetSysClockFreq+0x12c>)
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	0e5b      	lsrs	r3, r3, #25
 800abe8:	f003 0303 	and.w	r3, r3, #3
 800abec:	3301      	adds	r3, #1
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800abfc:	69bb      	ldr	r3, [r7, #24]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3724      	adds	r7, #36	; 0x24
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	40021000 	.word	0x40021000
 800ac10:	080133fc 	.word	0x080133fc
 800ac14:	00f42400 	.word	0x00f42400
 800ac18:	02dc6c00 	.word	0x02dc6c00

0800ac1c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800ac20:	f7ff ff5e 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800ac24:	4602      	mov	r2, r0
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <HAL_RCC_GetHCLKFreq+0x20>)
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	091b      	lsrs	r3, r3, #4
 800ac2c:	f003 030f 	and.w	r3, r3, #15
 800ac30:	4903      	ldr	r1, [pc, #12]	; (800ac40 <HAL_RCC_GetHCLKFreq+0x24>)
 800ac32:	5ccb      	ldrb	r3, [r1, r3]
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	40021000 	.word	0x40021000
 800ac40:	080133e4 	.word	0x080133e4

0800ac44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ac48:	f7ff ffe8 	bl	800ac1c <HAL_RCC_GetHCLKFreq>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	0a1b      	lsrs	r3, r3, #8
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	4903      	ldr	r1, [pc, #12]	; (800ac68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac5a:	5ccb      	ldrb	r3, [r1, r3]
 800ac5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	40021000 	.word	0x40021000
 800ac68:	080133f4 	.word	0x080133f4

0800ac6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac70:	f7ff ffd4 	bl	800ac1c <HAL_RCC_GetHCLKFreq>
 800ac74:	4602      	mov	r2, r0
 800ac76:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	0adb      	lsrs	r3, r3, #11
 800ac7c:	f003 0307 	and.w	r3, r3, #7
 800ac80:	4903      	ldr	r1, [pc, #12]	; (800ac90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac82:	5ccb      	ldrb	r3, [r1, r3]
 800ac84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	40021000 	.word	0x40021000
 800ac90:	080133f4 	.word	0x080133f4

0800ac94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	220f      	movs	r2, #15
 800aca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aca4:	4b12      	ldr	r3, [pc, #72]	; (800acf0 <HAL_RCC_GetClockConfig+0x5c>)
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	f003 0203 	and.w	r2, r3, #3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800acb0:	4b0f      	ldr	r3, [pc, #60]	; (800acf0 <HAL_RCC_GetClockConfig+0x5c>)
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800acbc:	4b0c      	ldr	r3, [pc, #48]	; (800acf0 <HAL_RCC_GetClockConfig+0x5c>)
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800acc8:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <HAL_RCC_GetClockConfig+0x5c>)
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	08db      	lsrs	r3, r3, #3
 800acce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800acd6:	4b07      	ldr	r3, [pc, #28]	; (800acf4 <HAL_RCC_GetClockConfig+0x60>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 020f 	and.w	r2, r3, #15
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	601a      	str	r2, [r3, #0]
}
 800ace2:	bf00      	nop
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40021000 	.word	0x40021000
 800acf4:	40022000 	.word	0x40022000

0800acf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ad00:	2300      	movs	r3, #0
 800ad02:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ad04:	4b2c      	ldr	r3, [pc, #176]	; (800adb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ad06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ad10:	f7ff f830 	bl	8009d74 <HAL_PWREx_GetVoltageRange>
 800ad14:	6138      	str	r0, [r7, #16]
 800ad16:	e014      	b.n	800ad42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad18:	4b27      	ldr	r3, [pc, #156]	; (800adb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ad1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad1c:	4a26      	ldr	r2, [pc, #152]	; (800adb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ad1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad22:	6593      	str	r3, [r2, #88]	; 0x58
 800ad24:	4b24      	ldr	r3, [pc, #144]	; (800adb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ad26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ad30:	f7ff f820 	bl	8009d74 <HAL_PWREx_GetVoltageRange>
 800ad34:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ad36:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ad38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad3a:	4a1f      	ldr	r2, [pc, #124]	; (800adb8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800ad3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d003      	beq.n	800ad50 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad4e:	d10b      	bne.n	800ad68 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b80      	cmp	r3, #128	; 0x80
 800ad54:	d919      	bls.n	800ad8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2ba0      	cmp	r3, #160	; 0xa0
 800ad5a:	d902      	bls.n	800ad62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800ad60:	e013      	b.n	800ad8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad62:	2301      	movs	r3, #1
 800ad64:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800ad66:	e010      	b.n	800ad8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b80      	cmp	r3, #128	; 0x80
 800ad6c:	d902      	bls.n	800ad74 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ad6e:	2303      	movs	r3, #3
 800ad70:	617b      	str	r3, [r7, #20]
 800ad72:	e00a      	b.n	800ad8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b80      	cmp	r3, #128	; 0x80
 800ad78:	d102      	bne.n	800ad80 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	617b      	str	r3, [r7, #20]
 800ad7e:	e004      	b.n	800ad8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b70      	cmp	r3, #112	; 0x70
 800ad84:	d101      	bne.n	800ad8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ad86:	2301      	movs	r3, #1
 800ad88:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ad8a:	4b0c      	ldr	r3, [pc, #48]	; (800adbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f023 020f 	bic.w	r2, r3, #15
 800ad92:	490a      	ldr	r1, [pc, #40]	; (800adbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800ad9a:	4b08      	ldr	r3, [pc, #32]	; (800adbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 030f 	and.w	r3, r3, #15
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d001      	beq.n	800adac <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e000      	b.n	800adae <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	40021000 	.word	0x40021000
 800adbc:	40022000 	.word	0x40022000

0800adc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800adc6:	4b31      	ldr	r3, [pc, #196]	; (800ae8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	f003 0303 	and.w	r3, r3, #3
 800adce:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800add0:	4b2e      	ldr	r3, [pc, #184]	; (800ae8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	091b      	lsrs	r3, r3, #4
 800add6:	f003 030f 	and.w	r3, r3, #15
 800adda:	3301      	adds	r3, #1
 800addc:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d015      	beq.n	800ae10 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d839      	bhi.n	800ae5e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d01c      	beq.n	800ae2a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d133      	bne.n	800ae5e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800adf6:	4a26      	ldr	r2, [pc, #152]	; (800ae90 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800adfe:	4a23      	ldr	r2, [pc, #140]	; (800ae8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800ae00:	68d2      	ldr	r2, [r2, #12]
 800ae02:	0a12      	lsrs	r2, r2, #8
 800ae04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ae08:	fb02 f303 	mul.w	r3, r2, r3
 800ae0c:	613b      	str	r3, [r7, #16]
      break;
 800ae0e:	e029      	b.n	800ae64 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ae10:	4a20      	ldr	r2, [pc, #128]	; (800ae94 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae18:	4a1c      	ldr	r2, [pc, #112]	; (800ae8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800ae1a:	68d2      	ldr	r2, [r2, #12]
 800ae1c:	0a12      	lsrs	r2, r2, #8
 800ae1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ae22:	fb02 f303 	mul.w	r3, r2, r3
 800ae26:	613b      	str	r3, [r7, #16]
      break;
 800ae28:	e01c      	b.n	800ae64 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ae2a:	4b18      	ldr	r3, [pc, #96]	; (800ae8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d107      	bne.n	800ae46 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ae36:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800ae38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae3c:	0a1b      	lsrs	r3, r3, #8
 800ae3e:	f003 030f 	and.w	r3, r3, #15
 800ae42:	617b      	str	r3, [r7, #20]
 800ae44:	e005      	b.n	800ae52 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ae46:	4b11      	ldr	r3, [pc, #68]	; (800ae8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	091b      	lsrs	r3, r3, #4
 800ae4c:	f003 030f 	and.w	r3, r3, #15
 800ae50:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800ae52:	4a11      	ldr	r2, [pc, #68]	; (800ae98 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae5a:	613b      	str	r3, [r7, #16]
        break;
 800ae5c:	e002      	b.n	800ae64 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	613b      	str	r3, [r7, #16]
      break;
 800ae62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800ae64:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	0e5b      	lsrs	r3, r3, #25
 800ae6a:	f003 0303 	and.w	r3, r3, #3
 800ae6e:	3301      	adds	r3, #1
 800ae70:	005b      	lsls	r3, r3, #1
 800ae72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800ae7e:	683b      	ldr	r3, [r7, #0]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	371c      	adds	r7, #28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	40021000 	.word	0x40021000
 800ae90:	00f42400 	.word	0x00f42400
 800ae94:	02dc6c00 	.word	0x02dc6c00
 800ae98:	080133fc 	.word	0x080133fc

0800ae9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aea4:	2300      	movs	r3, #0
 800aea6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aea8:	2300      	movs	r3, #0
 800aeaa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d040      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aebc:	2b80      	cmp	r3, #128	; 0x80
 800aebe:	d02a      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aec0:	2b80      	cmp	r3, #128	; 0x80
 800aec2:	d825      	bhi.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aec4:	2b60      	cmp	r3, #96	; 0x60
 800aec6:	d026      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aec8:	2b60      	cmp	r3, #96	; 0x60
 800aeca:	d821      	bhi.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aecc:	2b40      	cmp	r3, #64	; 0x40
 800aece:	d006      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x42>
 800aed0:	2b40      	cmp	r3, #64	; 0x40
 800aed2:	d81d      	bhi.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d009      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x50>
 800aed8:	2b20      	cmp	r3, #32
 800aeda:	d010      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x62>
 800aedc:	e018      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aede:	4b8f      	ldr	r3, [pc, #572]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	4a8e      	ldr	r2, [pc, #568]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aeea:	e015      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3304      	adds	r3, #4
 800aef0:	2100      	movs	r1, #0
 800aef2:	4618      	mov	r0, r3
 800aef4:	f001 faf8 	bl	800c4e8 <RCCEx_PLLSAI1_Config>
 800aef8:	4603      	mov	r3, r0
 800aefa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800aefc:	e00c      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3320      	adds	r3, #32
 800af02:	2100      	movs	r1, #0
 800af04:	4618      	mov	r0, r3
 800af06:	f001 fbd5 	bl	800c6b4 <RCCEx_PLLSAI2_Config>
 800af0a:	4603      	mov	r3, r0
 800af0c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800af0e:	e003      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	77fb      	strb	r3, [r7, #31]
        break;
 800af14:	e000      	b.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800af16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af18:	7ffb      	ldrb	r3, [r7, #31]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10b      	bne.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af1e:	4b7f      	ldr	r3, [pc, #508]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800af20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af24:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af2c:	497b      	ldr	r1, [pc, #492]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800af2e:	4313      	orrs	r3, r2
 800af30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800af34:	e001      	b.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af36:	7ffb      	ldrb	r3, [r7, #31]
 800af38:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af42:	2b00      	cmp	r3, #0
 800af44:	d047      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af4e:	d030      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800af50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af54:	d82a      	bhi.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800af56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af5a:	d02a      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800af5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af60:	d824      	bhi.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800af62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af66:	d008      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800af68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af6c:	d81e      	bhi.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00a      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800af72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af76:	d010      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800af78:	e018      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800af7a:	4b68      	ldr	r3, [pc, #416]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	4a67      	ldr	r2, [pc, #412]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800af80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af84:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800af86:	e015      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3304      	adds	r3, #4
 800af8c:	2100      	movs	r1, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f001 faaa 	bl	800c4e8 <RCCEx_PLLSAI1_Config>
 800af94:	4603      	mov	r3, r0
 800af96:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800af98:	e00c      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	3320      	adds	r3, #32
 800af9e:	2100      	movs	r1, #0
 800afa0:	4618      	mov	r0, r3
 800afa2:	f001 fb87 	bl	800c6b4 <RCCEx_PLLSAI2_Config>
 800afa6:	4603      	mov	r3, r0
 800afa8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800afaa:	e003      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	77fb      	strb	r3, [r7, #31]
        break;
 800afb0:	e000      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800afb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afb4:	7ffb      	ldrb	r3, [r7, #31]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10b      	bne.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800afba:	4b58      	ldr	r3, [pc, #352]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800afbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc8:	4954      	ldr	r1, [pc, #336]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800afca:	4313      	orrs	r3, r2
 800afcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800afd0:	e001      	b.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd2:	7ffb      	ldrb	r3, [r7, #31]
 800afd4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 80ab 	beq.w	800b13a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afe4:	2300      	movs	r3, #0
 800afe6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800afe8:	4b4c      	ldr	r3, [pc, #304]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800afea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10d      	bne.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aff4:	4b49      	ldr	r3, [pc, #292]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800aff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff8:	4a48      	ldr	r2, [pc, #288]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800affa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800affe:	6593      	str	r3, [r2, #88]	; 0x58
 800b000:	4b46      	ldr	r3, [pc, #280]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b00c:	2301      	movs	r3, #1
 800b00e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b010:	4b43      	ldr	r3, [pc, #268]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a42      	ldr	r2, [pc, #264]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b01a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b01c:	f7fd fe08 	bl	8008c30 <HAL_GetTick>
 800b020:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b022:	e00f      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b024:	f7fd fe04 	bl	8008c30 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d908      	bls.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b032:	4b3b      	ldr	r3, [pc, #236]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d109      	bne.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800b03e:	2303      	movs	r3, #3
 800b040:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800b042:	e006      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b044:	4b36      	ldr	r3, [pc, #216]	; (800b120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d0e9      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800b050:	e000      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800b052:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800b054:	7ffb      	ldrb	r3, [r7, #31]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d164      	bne.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b05a:	4b30      	ldr	r3, [pc, #192]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b064:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d01f      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	429a      	cmp	r2, r3
 800b076:	d019      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b078:	4b28      	ldr	r3, [pc, #160]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b07e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b082:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b084:	4b25      	ldr	r3, [pc, #148]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b08a:	4a24      	ldr	r2, [pc, #144]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b08c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b094:	4b21      	ldr	r3, [pc, #132]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b09a:	4a20      	ldr	r2, [pc, #128]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b09c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b0a4:	4a1d      	ldr	r2, [pc, #116]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d01f      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b6:	f7fd fdbb 	bl	8008c30 <HAL_GetTick>
 800b0ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0bc:	e012      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0be:	f7fd fdb7 	bl	8008c30 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d909      	bls.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0d0:	4b12      	ldr	r3, [pc, #72]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0d6:	f003 0302 	and.w	r3, r3, #2
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10a      	bne.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800b0e2:	e007      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0e4:	4b0d      	ldr	r3, [pc, #52]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0e5      	beq.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x222>
 800b0f2:	e000      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800b0f4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800b0f6:	7ffb      	ldrb	r3, [r7, #31]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10c      	bne.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0fc:	4b07      	ldr	r3, [pc, #28]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b10c:	4903      	ldr	r1, [pc, #12]	; (800b11c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b114:	e008      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b116:	7ffb      	ldrb	r3, [r7, #31]
 800b118:	77bb      	strb	r3, [r7, #30]
 800b11a:	e005      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800b11c:	40021000 	.word	0x40021000
 800b120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b124:	7ffb      	ldrb	r3, [r7, #31]
 800b126:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d105      	bne.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b12e:	4b9c      	ldr	r3, [pc, #624]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b132:	4a9b      	ldr	r2, [pc, #620]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b138:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00a      	beq.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b146:	4b96      	ldr	r3, [pc, #600]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14c:	f023 0203 	bic.w	r2, r3, #3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b154:	4992      	ldr	r1, [pc, #584]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b156:	4313      	orrs	r3, r2
 800b158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 0302 	and.w	r3, r3, #2
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00a      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b168:	4b8d      	ldr	r3, [pc, #564]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16e:	f023 020c 	bic.w	r2, r3, #12
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b176:	498a      	ldr	r1, [pc, #552]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b178:	4313      	orrs	r3, r2
 800b17a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0304 	and.w	r3, r3, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00a      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b18a:	4b85      	ldr	r3, [pc, #532]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b190:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b198:	4981      	ldr	r1, [pc, #516]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0308 	and.w	r3, r3, #8
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00a      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b1ac:	4b7c      	ldr	r3, [pc, #496]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ba:	4979      	ldr	r1, [pc, #484]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0310 	and.w	r3, r3, #16
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00a      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b1ce:	4b74      	ldr	r3, [pc, #464]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1dc:	4970      	ldr	r1, [pc, #448]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 0320 	and.w	r3, r3, #32
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00a      	beq.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1f0:	4b6b      	ldr	r3, [pc, #428]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b1f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1fe:	4968      	ldr	r1, [pc, #416]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b200:	4313      	orrs	r3, r2
 800b202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00a      	beq.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b212:	4b63      	ldr	r3, [pc, #396]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b220:	495f      	ldr	r1, [pc, #380]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b222:	4313      	orrs	r3, r2
 800b224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00a      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b234:	4b5a      	ldr	r3, [pc, #360]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b23a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b242:	4957      	ldr	r1, [pc, #348]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b244:	4313      	orrs	r3, r2
 800b246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00a      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800b256:	4b52      	ldr	r3, [pc, #328]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b264:	494e      	ldr	r1, [pc, #312]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b266:	4313      	orrs	r3, r2
 800b268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d031      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b27c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b280:	d00e      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b286:	d814      	bhi.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d015      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b28c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b290:	d10f      	bne.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b292:	4b43      	ldr	r3, [pc, #268]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	4a42      	ldr	r2, [pc, #264]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b29c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800b29e:	e00c      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f001 f91e 	bl	800c4e8 <RCCEx_PLLSAI1_Config>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800b2b0:	e003      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	77fb      	strb	r3, [r7, #31]
        break;
 800b2b6:	e000      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800b2b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ba:	7ffb      	ldrb	r3, [r7, #31]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10b      	bne.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b2c0:	4b37      	ldr	r3, [pc, #220]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2ce:	4934      	ldr	r1, [pc, #208]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b2d6:	e001      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d8:	7ffb      	ldrb	r3, [r7, #31]
 800b2da:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00a      	beq.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b2e8:	4b2d      	ldr	r3, [pc, #180]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f6:	492a      	ldr	r1, [pc, #168]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00a      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b30a:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b318:	4921      	ldr	r1, [pc, #132]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00a      	beq.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b32c:	4b1c      	ldr	r3, [pc, #112]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33a:	4919      	ldr	r1, [pc, #100]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00a      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b34e:	4b14      	ldr	r3, [pc, #80]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b350:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b354:	f023 0203 	bic.w	r2, r3, #3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b35c:	4910      	ldr	r1, [pc, #64]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d02b      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b370:	4b0b      	ldr	r3, [pc, #44]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b37e:	4908      	ldr	r1, [pc, #32]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b380:	4313      	orrs	r3, r2
 800b382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b38a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b38e:	d109      	bne.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b390:	4b03      	ldr	r3, [pc, #12]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	4a02      	ldr	r2, [pc, #8]	; (800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800b396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b39a:	60d3      	str	r3, [r2, #12]
 800b39c:	e014      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b39e:	bf00      	nop
 800b3a0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3ac:	d10c      	bne.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f001 f897 	bl	800c4e8 <RCCEx_PLLSAI1_Config>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800b3be:	7ffb      	ldrb	r3, [r7, #31]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800b3c4:	7ffb      	ldrb	r3, [r7, #31]
 800b3c6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d04a      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3dc:	d108      	bne.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800b3de:	4b70      	ldr	r3, [pc, #448]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b3e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3e4:	4a6e      	ldr	r2, [pc, #440]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b3e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b3ee:	e012      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800b3f0:	4b6b      	ldr	r3, [pc, #428]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3fe:	4968      	ldr	r1, [pc, #416]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b400:	4313      	orrs	r3, r2
 800b402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b406:	4b66      	ldr	r3, [pc, #408]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b40c:	4a64      	ldr	r2, [pc, #400]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b40e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b412:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b41a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b41e:	d10d      	bne.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3304      	adds	r3, #4
 800b424:	2101      	movs	r1, #1
 800b426:	4618      	mov	r0, r3
 800b428:	f001 f85e 	bl	800c4e8 <RCCEx_PLLSAI1_Config>
 800b42c:	4603      	mov	r3, r0
 800b42e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b430:	7ffb      	ldrb	r3, [r7, #31]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d019      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800b436:	7ffb      	ldrb	r3, [r7, #31]
 800b438:	77bb      	strb	r3, [r7, #30]
 800b43a:	e016      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b444:	d106      	bne.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b446:	4b56      	ldr	r3, [pc, #344]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	4a55      	ldr	r2, [pc, #340]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b44c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b450:	60d3      	str	r3, [r2, #12]
 800b452:	e00a      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b45c:	d105      	bne.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b45e:	4b50      	ldr	r3, [pc, #320]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	4a4f      	ldr	r2, [pc, #316]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b468:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d028      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b476:	4b4a      	ldr	r3, [pc, #296]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b47c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b484:	4946      	ldr	r1, [pc, #280]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b486:	4313      	orrs	r3, r2
 800b488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b494:	d106      	bne.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b496:	4b42      	ldr	r3, [pc, #264]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	4a41      	ldr	r2, [pc, #260]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b49c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4a0:	60d3      	str	r3, [r2, #12]
 800b4a2:	e011      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4ac:	d10c      	bne.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f001 f817 	bl	800c4e8 <RCCEx_PLLSAI1_Config>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b4be:	7ffb      	ldrb	r3, [r7, #31]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800b4c4:	7ffb      	ldrb	r3, [r7, #31]
 800b4c6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d01e      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b4d4:	4b32      	ldr	r3, [pc, #200]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4e4:	492e      	ldr	r1, [pc, #184]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4f6:	d10c      	bne.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	2102      	movs	r1, #2
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 fff2 	bl	800c4e8 <RCCEx_PLLSAI1_Config>
 800b504:	4603      	mov	r3, r0
 800b506:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b508:	7ffb      	ldrb	r3, [r7, #31]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800b50e:	7ffb      	ldrb	r3, [r7, #31]
 800b510:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00b      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b51e:	4b20      	ldr	r3, [pc, #128]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b524:	f023 0204 	bic.w	r2, r3, #4
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b52e:	491c      	ldr	r1, [pc, #112]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b530:	4313      	orrs	r3, r2
 800b532:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00b      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b542:	4b17      	ldr	r3, [pc, #92]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b548:	f023 0218 	bic.w	r2, r3, #24
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b552:	4913      	ldr	r1, [pc, #76]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b554:	4313      	orrs	r3, r2
 800b556:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b562:	2b00      	cmp	r3, #0
 800b564:	d017      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b566:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b56c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b576:	490a      	ldr	r1, [pc, #40]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b578:	4313      	orrs	r3, r2
 800b57a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b588:	d105      	bne.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b58a:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800b590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b594:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800b596:	7fbb      	ldrb	r3, [r7, #30]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	40021000 	.word	0x40021000

0800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5b6:	d13e      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b5b8:	4b45      	ldr	r3, [pc, #276]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5c2:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ca:	d028      	beq.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5d2:	f200 8773 	bhi.w	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5dc:	d005      	beq.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e4:	d00e      	beq.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800b5e6:	f000 bf69 	b.w	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b5ea:	4b39      	ldr	r3, [pc, #228]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f0:	f003 0302 	and.w	r3, r3, #2
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	f040 8763 	bne.w	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 800b5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5fe:	61fb      	str	r3, [r7, #28]
        break;
 800b600:	f000 bf5e 	b.w	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b604:	4b32      	ldr	r3, [pc, #200]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b60a:	f003 0302 	and.w	r3, r3, #2
 800b60e:	2b02      	cmp	r3, #2
 800b610:	f040 8758 	bne.w	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 800b614:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b618:	61fb      	str	r3, [r7, #28]
        break;
 800b61a:	f000 bf53 	b.w	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b61e:	4b2c      	ldr	r3, [pc, #176]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b62a:	f040 874d 	bne.w	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 800b62e:	4b29      	ldr	r3, [pc, #164]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 800b630:	61fb      	str	r3, [r7, #28]
        break;
 800b632:	f000 bf49 	b.w	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b636:	4b26      	ldr	r3, [pc, #152]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f003 0303 	and.w	r3, r3, #3
 800b63e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b03      	cmp	r3, #3
 800b644:	d036      	beq.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d84b      	bhi.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d003      	beq.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b02      	cmp	r3, #2
 800b656:	d020      	beq.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800b658:	e044      	b.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b65a:	4b1d      	ldr	r3, [pc, #116]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b02      	cmp	r3, #2
 800b664:	d116      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b666:	4b1a      	ldr	r3, [pc, #104]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0308 	and.w	r3, r3, #8
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d005      	beq.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800b672:	4b17      	ldr	r3, [pc, #92]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	091b      	lsrs	r3, r3, #4
 800b678:	f003 030f 	and.w	r3, r3, #15
 800b67c:	e005      	b.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800b67e:	4b14      	ldr	r3, [pc, #80]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b684:	0a1b      	lsrs	r3, r3, #8
 800b686:	f003 030f 	and.w	r3, r3, #15
 800b68a:	4a13      	ldr	r2, [pc, #76]	; (800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 800b68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b690:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800b692:	e02a      	b.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 800b694:	2300      	movs	r3, #0
 800b696:	61bb      	str	r3, [r7, #24]
        break;
 800b698:	e027      	b.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b69a:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a6:	d102      	bne.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 800b6a8:	4b0c      	ldr	r3, [pc, #48]	; (800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 800b6aa:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800b6ac:	e01d      	b.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	61bb      	str	r3, [r7, #24]
        break;
 800b6b2:	e01a      	b.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6b4:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c0:	d102      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 800b6c2:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 800b6c4:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800b6c6:	e010      	b.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	61bb      	str	r3, [r7, #24]
        break;
 800b6cc:	e00d      	b.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800b6ce:	bf00      	nop
 800b6d0:	40021000 	.word	0x40021000
 800b6d4:	0016e360 	.word	0x0016e360
 800b6d8:	080133fc 	.word	0x080133fc
 800b6dc:	00f42400 	.word	0x00f42400
 800b6e0:	02dc6c00 	.word	0x02dc6c00
      default:
        /* No source */
        pllvco = 0U;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	61bb      	str	r3, [r7, #24]
        break;
 800b6e8:	bf00      	nop
    }

    switch (PeriphClk)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6f0:	f000 8659 	beq.w	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6fa:	f200 86e7 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b704:	f000 8605 	beq.w	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b70e:	f200 86dd 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b718:	f000 8468 	beq.w	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b722:	f200 86d3 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b72c:	f000 8530 	beq.w	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b736:	f200 86c9 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b740:	f000 8180 	beq.w	800ba44 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b74a:	f200 86bf 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b754:	f000 80c2 	beq.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b75e:	f200 86b5 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b768:	f000 842f 	beq.w	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b772:	f200 86ab 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b77c:	f000 83e7 	beq.w	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b786:	f200 86a1 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b790:	f000 80a4 	beq.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b79a:	f200 8697 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a4:	f000 8092 	beq.w	800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ae:	f200 868d 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7b8:	f000 8080 	beq.w	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7c2:	f200 8683 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7cc:	f000 8553 	beq.w	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7d6:	f200 8679 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7e0:	f000 84ff 	beq.w	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ea:	f200 866f 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7f4:	f000 84a0 	beq.w	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7fe:	f200 8665 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b80      	cmp	r3, #128	; 0x80
 800b806:	f000 846b 	beq.w	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b80      	cmp	r3, #128	; 0x80
 800b80e:	f200 865d 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b20      	cmp	r3, #32
 800b816:	d84b      	bhi.n	800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 8656 	beq.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3b01      	subs	r3, #1
 800b824:	2b1f      	cmp	r3, #31
 800b826:	f200 8651 	bhi.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800b82a:	a201      	add	r2, pc, #4	; (adr r2, 800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800bc49 	.word	0x0800bc49
 800b834:	0800bcbd 	.word	0x0800bcbd
 800b838:	0800c4cd 	.word	0x0800c4cd
 800b83c:	0800bd4f 	.word	0x0800bd4f
 800b840:	0800c4cd 	.word	0x0800c4cd
 800b844:	0800c4cd 	.word	0x0800c4cd
 800b848:	0800c4cd 	.word	0x0800c4cd
 800b84c:	0800bdc7 	.word	0x0800bdc7
 800b850:	0800c4cd 	.word	0x0800c4cd
 800b854:	0800c4cd 	.word	0x0800c4cd
 800b858:	0800c4cd 	.word	0x0800c4cd
 800b85c:	0800c4cd 	.word	0x0800c4cd
 800b860:	0800c4cd 	.word	0x0800c4cd
 800b864:	0800c4cd 	.word	0x0800c4cd
 800b868:	0800c4cd 	.word	0x0800c4cd
 800b86c:	0800be4b 	.word	0x0800be4b
 800b870:	0800c4cd 	.word	0x0800c4cd
 800b874:	0800c4cd 	.word	0x0800c4cd
 800b878:	0800c4cd 	.word	0x0800c4cd
 800b87c:	0800c4cd 	.word	0x0800c4cd
 800b880:	0800c4cd 	.word	0x0800c4cd
 800b884:	0800c4cd 	.word	0x0800c4cd
 800b888:	0800c4cd 	.word	0x0800c4cd
 800b88c:	0800c4cd 	.word	0x0800c4cd
 800b890:	0800c4cd 	.word	0x0800c4cd
 800b894:	0800c4cd 	.word	0x0800c4cd
 800b898:	0800c4cd 	.word	0x0800c4cd
 800b89c:	0800c4cd 	.word	0x0800c4cd
 800b8a0:	0800c4cd 	.word	0x0800c4cd
 800b8a4:	0800c4cd 	.word	0x0800c4cd
 800b8a8:	0800c4cd 	.word	0x0800c4cd
 800b8ac:	0800becd 	.word	0x0800becd
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b40      	cmp	r3, #64	; 0x40
 800b8b4:	f000 83e8 	beq.w	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 800b8b8:	f000 be08 	b.w	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800b8bc:	69b9      	ldr	r1, [r7, #24]
 800b8be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b8c2:	f001 f857 	bl	800c974 <RCCEx_GetSAIxPeriphCLKFreq>
 800b8c6:	61f8      	str	r0, [r7, #28]
        break;
 800b8c8:	f000 be03 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800b8cc:	69b9      	ldr	r1, [r7, #24]
 800b8ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b8d2:	f001 f84f 	bl	800c974 <RCCEx_GetSAIxPeriphCLKFreq>
 800b8d6:	61f8      	str	r0, [r7, #28]
        break;
 800b8d8:	f000 bdfb 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 800b8dc:	4b9c      	ldr	r3, [pc, #624]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b8de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8e2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b8e6:	60fb      	str	r3, [r7, #12]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b8ee:	d015      	beq.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b8f6:	f200 8096 	bhi.w	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b900:	d02a      	beq.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b908:	f200 808d 	bhi.w	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d07f      	beq.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b918:	d04b      	beq.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 800b91a:	e084      	b.n	800ba26 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b91c:	4b8c      	ldr	r3, [pc, #560]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0302 	and.w	r3, r3, #2
 800b924:	2b02      	cmp	r3, #2
 800b926:	f040 8081 	bne.w	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b92a:	4b89      	ldr	r3, [pc, #548]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 0308 	and.w	r3, r3, #8
 800b932:	2b00      	cmp	r3, #0
 800b934:	d005      	beq.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800b936:	4b86      	ldr	r3, [pc, #536]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	091b      	lsrs	r3, r3, #4
 800b93c:	f003 030f 	and.w	r3, r3, #15
 800b940:	e005      	b.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800b942:	4b83      	ldr	r3, [pc, #524]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b948:	0a1b      	lsrs	r3, r3, #8
 800b94a:	f003 030f 	and.w	r3, r3, #15
 800b94e:	4a81      	ldr	r2, [pc, #516]	; (800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800b950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b954:	61fb      	str	r3, [r7, #28]
            break;
 800b956:	e069      	b.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b958:	4b7d      	ldr	r3, [pc, #500]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b964:	d165      	bne.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b966:	4b7a      	ldr	r3, [pc, #488]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b96e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b972:	d15e      	bne.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b974:	4b76      	ldr	r3, [pc, #472]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	091b      	lsrs	r3, r3, #4
 800b97a:	f003 030f 	and.w	r3, r3, #15
 800b97e:	3301      	adds	r3, #1
 800b980:	69ba      	ldr	r2, [r7, #24]
 800b982:	fbb2 f3f3 	udiv	r3, r2, r3
 800b986:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b988:	4b71      	ldr	r3, [pc, #452]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b992:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	fb03 f202 	mul.w	r2, r3, r2
 800b99c:	4b6c      	ldr	r3, [pc, #432]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	0d5b      	lsrs	r3, r3, #21
 800b9a2:	f003 0303 	and.w	r3, r3, #3
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ae:	61fb      	str	r3, [r7, #28]
            break;
 800b9b0:	e03f      	b.n	800ba32 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800b9b2:	4b67      	ldr	r3, [pc, #412]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9be:	d13b      	bne.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800b9c0:	4b63      	ldr	r3, [pc, #396]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9cc:	d134      	bne.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800b9ce:	f000 ff1d 	bl	800c80c <RCCEx_PLLSAI1_GetVCOFreq>
 800b9d2:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b9d4:	4b5e      	ldr	r3, [pc, #376]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	091b      	lsrs	r3, r3, #4
 800b9da:	f003 030f 	and.w	r3, r3, #15
 800b9de:	3301      	adds	r3, #1
 800b9e0:	69ba      	ldr	r2, [r7, #24]
 800b9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e6:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b9e8:	4b59      	ldr	r3, [pc, #356]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b9ea:	691b      	ldr	r3, [r3, #16]
 800b9ec:	0a1b      	lsrs	r3, r3, #8
 800b9ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9f2:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	fb03 f202 	mul.w	r2, r3, r2
 800b9fc:	4b54      	ldr	r3, [pc, #336]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	0d5b      	lsrs	r3, r3, #21
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	3301      	adds	r3, #1
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba0e:	61fb      	str	r3, [r7, #28]
            break;
 800ba10:	e012      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800ba12:	4b4f      	ldr	r3, [pc, #316]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800ba14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d10e      	bne.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 800ba20:	4b4d      	ldr	r3, [pc, #308]	; (800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800ba22:	61fb      	str	r3, [r7, #28]
            break;
 800ba24:	e00b      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 800ba26:	bf00      	nop
 800ba28:	f000 bd53 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800ba2c:	bf00      	nop
 800ba2e:	f000 bd50 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800ba32:	bf00      	nop
 800ba34:	f000 bd4d 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800ba38:	bf00      	nop
 800ba3a:	f000 bd4a 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800ba3e:	bf00      	nop
        break;
 800ba40:	f000 bd47 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 800ba44:	4b42      	ldr	r3, [pc, #264]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800ba46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba52:	d13d      	bne.n	800bad0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ba54:	4b3e      	ldr	r3, [pc, #248]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba60:	f040 8536 	bne.w	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800ba64:	4b3a      	ldr	r3, [pc, #232]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba70:	f040 852e 	bne.w	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ba74:	4b36      	ldr	r3, [pc, #216]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	091b      	lsrs	r3, r3, #4
 800ba7a:	f003 030f 	and.w	r3, r3, #15
 800ba7e:	3301      	adds	r3, #1
 800ba80:	69ba      	ldr	r2, [r7, #24]
 800ba82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba86:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ba88:	4b31      	ldr	r3, [pc, #196]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	0a1b      	lsrs	r3, r3, #8
 800ba8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba92:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ba94:	4b2e      	ldr	r3, [pc, #184]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	0edb      	lsrs	r3, r3, #27
 800ba9a:	f003 031f 	and.w	r3, r3, #31
 800ba9e:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10a      	bne.n	800babc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800baa6:	4b2a      	ldr	r3, [pc, #168]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d002      	beq.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 800bab2:	2311      	movs	r3, #17
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	e001      	b.n	800babc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 800bab8:	2307      	movs	r3, #7
 800baba:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	fb03 f202 	mul.w	r2, r3, r2
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	fbb2 f3f3 	udiv	r3, r2, r3
 800baca:	61fb      	str	r3, [r7, #28]
        break;
 800bacc:	f000 bd00 	b.w	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 800bad0:	4b1f      	ldr	r3, [pc, #124]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800bad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bae2:	d016      	beq.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800baea:	f200 809e 	bhi.w	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800baf4:	d032      	beq.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bafc:	f200 8095 	bhi.w	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 8087 	beq.w	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb0e:	d052      	beq.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 800bb10:	e08b      	b.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800bb12:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 0302 	and.w	r3, r3, #2
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	f040 8088 	bne.w	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800bb20:	4b0b      	ldr	r3, [pc, #44]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 0308 	and.w	r3, r3, #8
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d005      	beq.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 800bb2c:	4b08      	ldr	r3, [pc, #32]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	091b      	lsrs	r3, r3, #4
 800bb32:	f003 030f 	and.w	r3, r3, #15
 800bb36:	e005      	b.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800bb38:	4b05      	ldr	r3, [pc, #20]	; (800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800bb3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb3e:	0a1b      	lsrs	r3, r3, #8
 800bb40:	f003 030f 	and.w	r3, r3, #15
 800bb44:	4a03      	ldr	r2, [pc, #12]	; (800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800bb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb4a:	61fb      	str	r3, [r7, #28]
              break;
 800bb4c:	e070      	b.n	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bb4e:	bf00      	nop
 800bb50:	40021000 	.word	0x40021000
 800bb54:	080133fc 	.word	0x080133fc
 800bb58:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800bb5c:	4baa      	ldr	r3, [pc, #680]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb68:	d165      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800bb6a:	4ba7      	ldr	r3, [pc, #668]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb76:	d15e      	bne.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bb78:	4ba3      	ldr	r3, [pc, #652]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	091b      	lsrs	r3, r3, #4
 800bb7e:	f003 030f 	and.w	r3, r3, #15
 800bb82:	3301      	adds	r3, #1
 800bb84:	69ba      	ldr	r2, [r7, #24]
 800bb86:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb8a:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800bb8c:	4b9e      	ldr	r3, [pc, #632]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	0a1b      	lsrs	r3, r3, #8
 800bb92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb96:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	fb03 f202 	mul.w	r2, r3, r2
 800bba0:	4b99      	ldr	r3, [pc, #612]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	0d5b      	lsrs	r3, r3, #21
 800bba6:	f003 0303 	and.w	r3, r3, #3
 800bbaa:	3301      	adds	r3, #1
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbb2:	61fb      	str	r3, [r7, #28]
              break;
 800bbb4:	e03f      	b.n	800bc36 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800bbb6:	4b94      	ldr	r3, [pc, #592]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbc2:	d13b      	bne.n	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800bbc4:	4b90      	ldr	r3, [pc, #576]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbd0:	d134      	bne.n	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800bbd2:	f000 fe1b 	bl	800c80c <RCCEx_PLLSAI1_GetVCOFreq>
 800bbd6:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800bbd8:	4b8b      	ldr	r3, [pc, #556]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	091b      	lsrs	r3, r3, #4
 800bbde:	f003 030f 	and.w	r3, r3, #15
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	69ba      	ldr	r2, [r7, #24]
 800bbe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbea:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800bbec:	4b86      	ldr	r3, [pc, #536]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	0a1b      	lsrs	r3, r3, #8
 800bbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf6:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	fb03 f202 	mul.w	r2, r3, r2
 800bc00:	4b81      	ldr	r3, [pc, #516]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	0d5b      	lsrs	r3, r3, #21
 800bc06:	f003 0303 	and.w	r3, r3, #3
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc12:	61fb      	str	r3, [r7, #28]
              break;
 800bc14:	e012      	b.n	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800bc16:	4b7c      	ldr	r3, [pc, #496]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bc18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc1c:	f003 0302 	and.w	r3, r3, #2
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d10e      	bne.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 800bc24:	4b79      	ldr	r3, [pc, #484]	; (800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 800bc26:	61fb      	str	r3, [r7, #28]
              break;
 800bc28:	e00b      	b.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 800bc2a:	bf00      	nop
 800bc2c:	f000 bc50 	b.w	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 800bc30:	bf00      	nop
 800bc32:	f000 bc4d 	b.w	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 800bc36:	bf00      	nop
 800bc38:	f000 bc4a 	b.w	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 800bc3c:	bf00      	nop
 800bc3e:	f000 bc47 	b.w	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 800bc42:	bf00      	nop
        break;
 800bc44:	f000 bc44 	b.w	800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bc48:	4b6f      	ldr	r3, [pc, #444]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d827      	bhi.n	800bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800bc5a:	a201      	add	r2, pc, #4	; (adr r2, 800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800bc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc60:	0800bc71 	.word	0x0800bc71
 800bc64:	0800bc79 	.word	0x0800bc79
 800bc68:	0800bc81 	.word	0x0800bc81
 800bc6c:	0800bc95 	.word	0x0800bc95
            frequency = HAL_RCC_GetPCLK2Freq();
 800bc70:	f7fe fffc 	bl	800ac6c <HAL_RCC_GetPCLK2Freq>
 800bc74:	61f8      	str	r0, [r7, #28]
            break;
 800bc76:	e01f      	b.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 800bc78:	f7fe ff32 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800bc7c:	61f8      	str	r0, [r7, #28]
            break;
 800bc7e:	e01b      	b.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc80:	4b61      	ldr	r3, [pc, #388]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc8c:	d110      	bne.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 800bc8e:	4b60      	ldr	r3, [pc, #384]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800bc90:	61fb      	str	r3, [r7, #28]
            break;
 800bc92:	e00d      	b.n	800bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bc94:	4b5c      	ldr	r3, [pc, #368]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9a:	f003 0302 	and.w	r3, r3, #2
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d109      	bne.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 800bca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bca6:	61fb      	str	r3, [r7, #28]
            break;
 800bca8:	e005      	b.n	800bcb6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 800bcaa:	bf00      	nop
 800bcac:	f000 bc11 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bcb0:	bf00      	nop
 800bcb2:	f000 bc0e 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bcb6:	bf00      	nop
        break;
 800bcb8:	f000 bc0b 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800bcbc:	4b52      	ldr	r3, [pc, #328]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bcbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc2:	f003 030c 	and.w	r3, r3, #12
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b0c      	cmp	r3, #12
 800bccc:	d839      	bhi.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 800bcce:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bd09 	.word	0x0800bd09
 800bcd8:	0800bd43 	.word	0x0800bd43
 800bcdc:	0800bd43 	.word	0x0800bd43
 800bce0:	0800bd43 	.word	0x0800bd43
 800bce4:	0800bd11 	.word	0x0800bd11
 800bce8:	0800bd43 	.word	0x0800bd43
 800bcec:	0800bd43 	.word	0x0800bd43
 800bcf0:	0800bd43 	.word	0x0800bd43
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd43 	.word	0x0800bd43
 800bcfc:	0800bd43 	.word	0x0800bd43
 800bd00:	0800bd43 	.word	0x0800bd43
 800bd04:	0800bd2d 	.word	0x0800bd2d
            frequency = HAL_RCC_GetPCLK1Freq();
 800bd08:	f7fe ff9c 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800bd0c:	61f8      	str	r0, [r7, #28]
            break;
 800bd0e:	e01d      	b.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 800bd10:	f7fe fee6 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800bd14:	61f8      	str	r0, [r7, #28]
            break;
 800bd16:	e019      	b.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd18:	4b3b      	ldr	r3, [pc, #236]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd24:	d10f      	bne.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 800bd26:	4b3a      	ldr	r3, [pc, #232]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800bd28:	61fb      	str	r3, [r7, #28]
            break;
 800bd2a:	e00c      	b.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bd2c:	4b36      	ldr	r3, [pc, #216]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bd2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd32:	f003 0302 	and.w	r3, r3, #2
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	d107      	bne.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 800bd3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd3e:	61fb      	str	r3, [r7, #28]
            break;
 800bd40:	e003      	b.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 800bd42:	bf00      	nop
 800bd44:	e3c5      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bd46:	bf00      	nop
 800bd48:	e3c3      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bd4a:	bf00      	nop
        break;
 800bd4c:	e3c1      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800bd4e:	4b2e      	ldr	r3, [pc, #184]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd58:	60fb      	str	r3, [r7, #12]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2b30      	cmp	r3, #48	; 0x30
 800bd5e:	d021      	beq.n	800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b30      	cmp	r3, #48	; 0x30
 800bd64:	d829      	bhi.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b20      	cmp	r3, #32
 800bd6a:	d011      	beq.n	800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2b20      	cmp	r3, #32
 800bd70:	d823      	bhi.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b10      	cmp	r3, #16
 800bd7c:	d004      	beq.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 800bd7e:	e01c      	b.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 800bd80:	f7fe ff60 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800bd84:	61f8      	str	r0, [r7, #28]
            break;
 800bd86:	e01d      	b.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 800bd88:	f7fe feaa 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800bd8c:	61f8      	str	r0, [r7, #28]
            break;
 800bd8e:	e019      	b.n	800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd90:	4b1d      	ldr	r3, [pc, #116]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd9c:	d10f      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 800bd9e:	4b1c      	ldr	r3, [pc, #112]	; (800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800bda0:	61fb      	str	r3, [r7, #28]
            break;
 800bda2:	e00c      	b.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bda4:	4b18      	ldr	r3, [pc, #96]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bda6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdaa:	f003 0302 	and.w	r3, r3, #2
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d107      	bne.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 800bdb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdb6:	61fb      	str	r3, [r7, #28]
            break;
 800bdb8:	e003      	b.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 800bdba:	bf00      	nop
 800bdbc:	e389      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bdbe:	bf00      	nop
 800bdc0:	e387      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bdc2:	bf00      	nop
        break;
 800bdc4:	e385      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800bdc6:	4b10      	ldr	r3, [pc, #64]	; (800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800bdc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2bc0      	cmp	r3, #192	; 0xc0
 800bdd6:	d027      	beq.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2bc0      	cmp	r3, #192	; 0xc0
 800bddc:	d82f      	bhi.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2b80      	cmp	r3, #128	; 0x80
 800bde2:	d017      	beq.n	800be14 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b80      	cmp	r3, #128	; 0x80
 800bde8:	d829      	bhi.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d003      	beq.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2b40      	cmp	r3, #64	; 0x40
 800bdf4:	d004      	beq.n	800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 800bdf6:	e022      	b.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800bdf8:	f7fe ff24 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800bdfc:	61f8      	str	r0, [r7, #28]
            break;
 800bdfe:	e023      	b.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 800be00:	f7fe fe6e 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800be04:	61f8      	str	r0, [r7, #28]
            break;
 800be06:	e01f      	b.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 800be08:	40021000 	.word	0x40021000
 800be0c:	02dc6c00 	.word	0x02dc6c00
 800be10:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be14:	4b99      	ldr	r3, [pc, #612]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be20:	d10f      	bne.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 800be22:	4b97      	ldr	r3, [pc, #604]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800be24:	61fb      	str	r3, [r7, #28]
            break;
 800be26:	e00c      	b.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800be28:	4b94      	ldr	r3, [pc, #592]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800be2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be2e:	f003 0302 	and.w	r3, r3, #2
 800be32:	2b02      	cmp	r3, #2
 800be34:	d107      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 800be36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be3a:	61fb      	str	r3, [r7, #28]
            break;
 800be3c:	e003      	b.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 800be3e:	bf00      	nop
 800be40:	e347      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800be42:	bf00      	nop
 800be44:	e345      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800be46:	bf00      	nop
        break;
 800be48:	e343      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800be4a:	4b8c      	ldr	r3, [pc, #560]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800be4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be5c:	d025      	beq.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be64:	d82c      	bhi.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be6c:	d013      	beq.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be74:	d824      	bhi.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d004      	beq.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be82:	d004      	beq.n	800be8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 800be84:	e01c      	b.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 800be86:	f7fe fedd 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800be8a:	61f8      	str	r0, [r7, #28]
            break;
 800be8c:	e01d      	b.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 800be8e:	f7fe fe27 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800be92:	61f8      	str	r0, [r7, #28]
            break;
 800be94:	e019      	b.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be96:	4b79      	ldr	r3, [pc, #484]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bea2:	d10f      	bne.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 800bea4:	4b76      	ldr	r3, [pc, #472]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800bea6:	61fb      	str	r3, [r7, #28]
            break;
 800bea8:	e00c      	b.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800beaa:	4b74      	ldr	r3, [pc, #464]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800beac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beb0:	f003 0302 	and.w	r3, r3, #2
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d107      	bne.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 800beb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bebc:	61fb      	str	r3, [r7, #28]
            break;
 800bebe:	e003      	b.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 800bec0:	bf00      	nop
 800bec2:	e306      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bec4:	bf00      	nop
 800bec6:	e304      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bec8:	bf00      	nop
        break;
 800beca:	e302      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800becc:	4b6b      	ldr	r3, [pc, #428]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bed2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bede:	d025      	beq.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bee6:	d82c      	bhi.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beee:	d013      	beq.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bef6:	d824      	bhi.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d004      	beq.n	800bf08 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf04:	d004      	beq.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 800bf06:	e01c      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 800bf08:	f7fe fe9c 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800bf0c:	61f8      	str	r0, [r7, #28]
            break;
 800bf0e:	e01d      	b.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 800bf10:	f7fe fde6 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800bf14:	61f8      	str	r0, [r7, #28]
            break;
 800bf16:	e019      	b.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf18:	4b58      	ldr	r3, [pc, #352]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf24:	d10f      	bne.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 800bf26:	4b56      	ldr	r3, [pc, #344]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800bf28:	61fb      	str	r3, [r7, #28]
            break;
 800bf2a:	e00c      	b.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bf2c:	4b53      	ldr	r3, [pc, #332]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bf2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf32:	f003 0302 	and.w	r3, r3, #2
 800bf36:	2b02      	cmp	r3, #2
 800bf38:	d107      	bne.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 800bf3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf3e:	61fb      	str	r3, [r7, #28]
            break;
 800bf40:	e003      	b.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 800bf42:	bf00      	nop
 800bf44:	e2c5      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bf46:	bf00      	nop
 800bf48:	e2c3      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bf4a:	bf00      	nop
        break;
 800bf4c:	e2c1      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bf4e:	4b4b      	ldr	r3, [pc, #300]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bf50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf58:	60fb      	str	r3, [r7, #12]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf60:	d007      	beq.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf68:	d12b      	bne.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 800bf6a:	f7fe fdb9 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800bf6e:	61f8      	str	r0, [r7, #28]
            break;
 800bf70:	e02a      	b.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800bf72:	4b42      	ldr	r3, [pc, #264]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d023      	beq.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800bf7e:	f000 fc45 	bl	800c80c <RCCEx_PLLSAI1_GetVCOFreq>
 800bf82:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800bf84:	4b3d      	ldr	r3, [pc, #244]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	091b      	lsrs	r3, r3, #4
 800bf8a:	f003 030f 	and.w	r3, r3, #15
 800bf8e:	3301      	adds	r3, #1
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf96:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800bf98:	4b38      	ldr	r3, [pc, #224]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	0a1b      	lsrs	r3, r3, #8
 800bf9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfa2:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	fb03 f202 	mul.w	r2, r3, r2
 800bfac:	4b33      	ldr	r3, [pc, #204]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	0e5b      	lsrs	r3, r3, #25
 800bfb2:	f003 0303 	and.w	r3, r3, #3
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfbe:	61fb      	str	r3, [r7, #28]
            break;
 800bfc0:	e001      	b.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 800bfc2:	bf00      	nop
 800bfc4:	e285      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800bfc6:	bf00      	nop
        break;
 800bfc8:	e283      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800bfca:	4b2c      	ldr	r3, [pc, #176]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bfcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d103      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 800bfdc:	f7fe fe46 	bl	800ac6c <HAL_RCC_GetPCLK2Freq>
 800bfe0:	61f8      	str	r0, [r7, #28]
        break;
 800bfe2:	e276      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 800bfe4:	f7fe fd7c 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800bfe8:	61f8      	str	r0, [r7, #28]
        break;
 800bfea:	e272      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800bfec:	4b23      	ldr	r3, [pc, #140]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800bfee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bff2:	f003 0318 	and.w	r3, r3, #24
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b10      	cmp	r3, #16
 800bffc:	d010      	beq.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b10      	cmp	r3, #16
 800c002:	d834      	bhi.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2b08      	cmp	r3, #8
 800c00e:	d024      	beq.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 800c010:	e02d      	b.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c012:	69b9      	ldr	r1, [r7, #24]
 800c014:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c018:	f000 fcac 	bl	800c974 <RCCEx_GetSAIxPeriphCLKFreq>
 800c01c:	61f8      	str	r0, [r7, #28]
            break;
 800c01e:	e02b      	b.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c020:	4b16      	ldr	r3, [pc, #88]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0302 	and.w	r3, r3, #2
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d122      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c02c:	4b13      	ldr	r3, [pc, #76]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f003 0308 	and.w	r3, r3, #8
 800c034:	2b00      	cmp	r3, #0
 800c036:	d005      	beq.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 800c038:	4b10      	ldr	r3, [pc, #64]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	091b      	lsrs	r3, r3, #4
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	e005      	b.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 800c044:	4b0d      	ldr	r3, [pc, #52]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800c046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c04a:	0a1b      	lsrs	r3, r3, #8
 800c04c:	f003 030f 	and.w	r3, r3, #15
 800c050:	4a0c      	ldr	r2, [pc, #48]	; (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 800c052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c056:	61fb      	str	r3, [r7, #28]
            break;
 800c058:	e00b      	b.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c05a:	4b08      	ldr	r3, [pc, #32]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c066:	d106      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 800c068:	4b05      	ldr	r3, [pc, #20]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800c06a:	61fb      	str	r3, [r7, #28]
            break;
 800c06c:	e003      	b.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 800c06e:	bf00      	nop
 800c070:	e22f      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c072:	bf00      	nop
 800c074:	e22d      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c076:	bf00      	nop
        break;
 800c078:	e22b      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 800c07a:	bf00      	nop
 800c07c:	40021000 	.word	0x40021000
 800c080:	00f42400 	.word	0x00f42400
 800c084:	080133fc 	.word	0x080133fc
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c088:	4b96      	ldr	r3, [pc, #600]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c08e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c092:	60fb      	str	r3, [r7, #12]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c09a:	d013      	beq.n	800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0a2:	d819      	bhi.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d004      	beq.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b0:	d004      	beq.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 800c0b2:	e011      	b.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 800c0b4:	f7fe fdc6 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c0b8:	61f8      	str	r0, [r7, #28]
            break;
 800c0ba:	e010      	b.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 800c0bc:	f7fe fd10 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800c0c0:	61f8      	str	r0, [r7, #28]
            break;
 800c0c2:	e00c      	b.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0c4:	4b87      	ldr	r3, [pc, #540]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0d0:	d104      	bne.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 800c0d2:	4b85      	ldr	r3, [pc, #532]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800c0d4:	61fb      	str	r3, [r7, #28]
            break;
 800c0d6:	e001      	b.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 800c0d8:	bf00      	nop
 800c0da:	e1fa      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c0dc:	bf00      	nop
        break;
 800c0de:	e1f8      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c0e0:	4b80      	ldr	r3, [pc, #512]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0f2:	d013      	beq.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0fa:	d819      	bhi.n	800c130 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d004      	beq.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c108:	d004      	beq.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 800c10a:	e011      	b.n	800c130 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 800c10c:	f7fe fd9a 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c110:	61f8      	str	r0, [r7, #28]
            break;
 800c112:	e010      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 800c114:	f7fe fce4 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800c118:	61f8      	str	r0, [r7, #28]
            break;
 800c11a:	e00c      	b.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c11c:	4b71      	ldr	r3, [pc, #452]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c128:	d104      	bne.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 800c12a:	4b6f      	ldr	r3, [pc, #444]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800c12c:	61fb      	str	r3, [r7, #28]
            break;
 800c12e:	e001      	b.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 800c130:	bf00      	nop
 800c132:	e1ce      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c134:	bf00      	nop
        break;
 800c136:	e1cc      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c138:	4b6a      	ldr	r3, [pc, #424]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c13e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14a:	d013      	beq.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c152:	d819      	bhi.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d004      	beq.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c160:	d004      	beq.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 800c162:	e011      	b.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 800c164:	f7fe fd6e 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c168:	61f8      	str	r0, [r7, #28]
            break;
 800c16a:	e010      	b.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 800c16c:	f7fe fcb8 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800c170:	61f8      	str	r0, [r7, #28]
            break;
 800c172:	e00c      	b.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c174:	4b5b      	ldr	r3, [pc, #364]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c17c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c180:	d104      	bne.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 800c182:	4b59      	ldr	r3, [pc, #356]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800c184:	61fb      	str	r3, [r7, #28]
            break;
 800c186:	e001      	b.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 800c188:	bf00      	nop
 800c18a:	e1a2      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c18c:	bf00      	nop
        break;
 800c18e:	e1a0      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c190:	4b54      	ldr	r3, [pc, #336]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c196:	f003 0303 	and.w	r3, r3, #3
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d011      	beq.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d818      	bhi.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d004      	beq.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 800c1b4:	e011      	b.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 800c1b6:	f7fe fd45 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c1ba:	61f8      	str	r0, [r7, #28]
            break;
 800c1bc:	e010      	b.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 800c1be:	f7fe fc8f 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800c1c2:	61f8      	str	r0, [r7, #28]
            break;
 800c1c4:	e00c      	b.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1c6:	4b47      	ldr	r3, [pc, #284]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1d2:	d104      	bne.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 800c1d4:	4b44      	ldr	r3, [pc, #272]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800c1d6:	61fb      	str	r3, [r7, #28]
            break;
 800c1d8:	e001      	b.n	800c1de <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 800c1da:	bf00      	nop
 800c1dc:	e179      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c1de:	bf00      	nop
        break;
 800c1e0:	e177      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c1e2:	4b40      	ldr	r3, [pc, #256]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c1f4:	d02c      	beq.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c1fc:	d833      	bhi.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c204:	d01a      	beq.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c20c:	d82b      	bhi.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c21a:	d004      	beq.n	800c226 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 800c21c:	e023      	b.n	800c266 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 800c21e:	f7fe fd11 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c222:	61f8      	str	r0, [r7, #28]
            break;
 800c224:	e026      	b.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c226:	4b2f      	ldr	r3, [pc, #188]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c22c:	f003 0302 	and.w	r3, r3, #2
 800c230:	2b02      	cmp	r3, #2
 800c232:	d11a      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 800c234:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c238:	61fb      	str	r3, [r7, #28]
            break;
 800c23a:	e016      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c23c:	4b29      	ldr	r3, [pc, #164]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c248:	d111      	bne.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 800c24a:	4b27      	ldr	r3, [pc, #156]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800c24c:	61fb      	str	r3, [r7, #28]
            break;
 800c24e:	e00e      	b.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c250:	4b24      	ldr	r3, [pc, #144]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d109      	bne.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 800c25e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c262:	61fb      	str	r3, [r7, #28]
            break;
 800c264:	e005      	b.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 800c266:	bf00      	nop
 800c268:	e133      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c26a:	bf00      	nop
 800c26c:	e131      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c26e:	bf00      	nop
 800c270:	e12f      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c272:	bf00      	nop
        break;
 800c274:	e12d      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c276:	4b1b      	ldr	r3, [pc, #108]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c27c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c288:	d030      	beq.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c290:	d837      	bhi.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c298:	d01a      	beq.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2a0:	d82f      	bhi.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d004      	beq.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2ae:	d004      	beq.n	800c2ba <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 800c2b0:	e027      	b.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 800c2b2:	f7fe fcc7 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c2b6:	61f8      	str	r0, [r7, #28]
            break;
 800c2b8:	e02a      	b.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c2ba:	4b0a      	ldr	r3, [pc, #40]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c2bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2c0:	f003 0302 	and.w	r3, r3, #2
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d11e      	bne.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 800c2c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c2cc:	61fb      	str	r3, [r7, #28]
            break;
 800c2ce:	e01a      	b.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2d0:	4b04      	ldr	r3, [pc, #16]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2dc:	d115      	bne.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 800c2de:	4b02      	ldr	r3, [pc, #8]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800c2e0:	61fb      	str	r3, [r7, #28]
            break;
 800c2e2:	e012      	b.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 800c2e4:	40021000 	.word	0x40021000
 800c2e8:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c2ec:	4b7b      	ldr	r3, [pc, #492]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2f2:	f003 0302 	and.w	r3, r3, #2
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d109      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 800c2fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2fe:	61fb      	str	r3, [r7, #28]
            break;
 800c300:	e005      	b.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 800c302:	bf00      	nop
 800c304:	e0e5      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c306:	bf00      	nop
 800c308:	e0e3      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c30a:	bf00      	nop
 800c30c:	e0e1      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c30e:	bf00      	nop
        break;
 800c310:	e0df      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800c312:	4b72      	ldr	r3, [pc, #456]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c318:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c31c:	60fb      	str	r3, [r7, #12]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c324:	d02c      	beq.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c32c:	d833      	bhi.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c334:	d01a      	beq.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c33c:	d82b      	bhi.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d004      	beq.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c34a:	d004      	beq.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 800c34c:	e023      	b.n	800c396 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 800c34e:	f7fe fc79 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c352:	61f8      	str	r0, [r7, #28]
            break;
 800c354:	e026      	b.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c356:	4b61      	ldr	r3, [pc, #388]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c35c:	f003 0302 	and.w	r3, r3, #2
 800c360:	2b02      	cmp	r3, #2
 800c362:	d11a      	bne.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 800c364:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c368:	61fb      	str	r3, [r7, #28]
            break;
 800c36a:	e016      	b.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c36c:	4b5b      	ldr	r3, [pc, #364]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c378:	d111      	bne.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 800c37a:	4b59      	ldr	r3, [pc, #356]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 800c37c:	61fb      	str	r3, [r7, #28]
            break;
 800c37e:	e00e      	b.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c380:	4b56      	ldr	r3, [pc, #344]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c386:	f003 0302 	and.w	r3, r3, #2
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d109      	bne.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 800c38e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c392:	61fb      	str	r3, [r7, #28]
            break;
 800c394:	e005      	b.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 800c396:	bf00      	nop
 800c398:	e09b      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c39a:	bf00      	nop
 800c39c:	e099      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c39e:	bf00      	nop
 800c3a0:	e097      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c3a2:	bf00      	nop
        break;
 800c3a4:	e095      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c3a6:	4b4d      	ldr	r3, [pc, #308]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3ac:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800c3b0:	60fb      	str	r3, [r7, #12]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3b8:	d042      	beq.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3c0:	d874      	bhi.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c3ce:	d00a      	beq.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 800c3d0:	e06c      	b.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c3d2:	4b42      	ldr	r3, [pc, #264]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3de:	d167      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 800c3e0:	4b40      	ldr	r3, [pc, #256]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 800c3e2:	61fb      	str	r3, [r7, #28]
            break;
 800c3e4:	e064      	b.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c3e6:	4b3d      	ldr	r3, [pc, #244]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3f2:	d15f      	bne.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c3f4:	4b39      	ldr	r3, [pc, #228]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c400:	d158      	bne.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c402:	4b36      	ldr	r3, [pc, #216]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	091b      	lsrs	r3, r3, #4
 800c408:	f003 030f 	and.w	r3, r3, #15
 800c40c:	3301      	adds	r3, #1
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	fbb2 f3f3 	udiv	r3, r2, r3
 800c414:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c416:	4b31      	ldr	r3, [pc, #196]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	0a1b      	lsrs	r3, r3, #8
 800c41c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c420:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	fb03 f202 	mul.w	r2, r3, r2
 800c42a:	4b2c      	ldr	r3, [pc, #176]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	0d5b      	lsrs	r3, r3, #21
 800c430:	f003 0303 	and.w	r3, r3, #3
 800c434:	3301      	adds	r3, #1
 800c436:	005b      	lsls	r3, r3, #1
 800c438:	fbb2 f3f3 	udiv	r3, r2, r3
 800c43c:	61fb      	str	r3, [r7, #28]
            break;
 800c43e:	e039      	b.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800c440:	4b26      	ldr	r3, [pc, #152]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c442:	691b      	ldr	r3, [r3, #16]
 800c444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d035      	beq.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800c44c:	f000 f9de 	bl	800c80c <RCCEx_PLLSAI1_GetVCOFreq>
 800c450:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c452:	4b22      	ldr	r3, [pc, #136]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	091b      	lsrs	r3, r3, #4
 800c458:	f003 030f 	and.w	r3, r3, #15
 800c45c:	3301      	adds	r3, #1
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	fbb2 f3f3 	udiv	r3, r2, r3
 800c464:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c466:	4b1d      	ldr	r3, [pc, #116]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	0a1b      	lsrs	r3, r3, #8
 800c46c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c470:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800c472:	4b1a      	ldr	r3, [pc, #104]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	0edb      	lsrs	r3, r3, #27
 800c478:	f003 031f 	and.w	r3, r3, #31
 800c47c:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10a      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800c484:	4b15      	ldr	r3, [pc, #84]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 800c490:	2311      	movs	r3, #17
 800c492:	617b      	str	r3, [r7, #20]
 800c494:	e001      	b.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 800c496:	2307      	movs	r3, #7
 800c498:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	fb03 f202 	mul.w	r2, r3, r2
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a8:	61fb      	str	r3, [r7, #28]
            break;
 800c4aa:	e005      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 800c4ac:	bf00      	nop
 800c4ae:	e010      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c4b0:	bf00      	nop
 800c4b2:	e00e      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c4b4:	bf00      	nop
 800c4b6:	e00c      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800c4b8:	bf00      	nop
        break;
 800c4ba:	e00a      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800c4bc:	bf00      	nop
 800c4be:	e008      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800c4c0:	bf00      	nop
 800c4c2:	e006      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800c4c4:	bf00      	nop
 800c4c6:	e004      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800c4c8:	bf00      	nop
 800c4ca:	e002      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800c4cc:	bf00      	nop
 800c4ce:	e000      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800c4d0:	bf00      	nop
    }
  }

  return (frequency);
 800c4d2:	69fb      	ldr	r3, [r7, #28]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3720      	adds	r7, #32
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	40021000 	.word	0x40021000
 800c4e0:	00f42400 	.word	0x00f42400
 800c4e4:	02dc6c00 	.word	0x02dc6c00

0800c4e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d018      	beq.n	800c530 <RCCEx_PLLSAI1_Config+0x48>
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d81f      	bhi.n	800c542 <RCCEx_PLLSAI1_Config+0x5a>
 800c502:	2b01      	cmp	r3, #1
 800c504:	d002      	beq.n	800c50c <RCCEx_PLLSAI1_Config+0x24>
 800c506:	2b02      	cmp	r3, #2
 800c508:	d009      	beq.n	800c51e <RCCEx_PLLSAI1_Config+0x36>
 800c50a:	e01a      	b.n	800c542 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c50c:	4b65      	ldr	r3, [pc, #404]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0302 	and.w	r3, r3, #2
 800c514:	2b00      	cmp	r3, #0
 800c516:	d117      	bne.n	800c548 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c51c:	e014      	b.n	800c548 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c51e:	4b61      	ldr	r3, [pc, #388]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c526:	2b00      	cmp	r3, #0
 800c528:	d110      	bne.n	800c54c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c52e:	e00d      	b.n	800c54c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800c530:	4b5c      	ldr	r3, [pc, #368]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d109      	bne.n	800c550 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c540:	e006      	b.n	800c550 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	73fb      	strb	r3, [r7, #15]
      break;
 800c546:	e004      	b.n	800c552 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800c548:	bf00      	nop
 800c54a:	e002      	b.n	800c552 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800c54c:	bf00      	nop
 800c54e:	e000      	b.n	800c552 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800c550:	bf00      	nop
  }

  if (status == HAL_OK)
 800c552:	7bfb      	ldrb	r3, [r7, #15]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f040 809f 	bne.w	800c698 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c55a:	4b52      	ldr	r3, [pc, #328]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a51      	ldr	r2, [pc, #324]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c566:	f7fc fb63 	bl	8008c30 <HAL_GetTick>
 800c56a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c56c:	e00f      	b.n	800c58e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c56e:	f7fc fb5f 	bl	8008c30 <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d908      	bls.n	800c58e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c57c:	4b49      	ldr	r3, [pc, #292]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c584:	2b00      	cmp	r3, #0
 800c586:	d009      	beq.n	800c59c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800c588:	2303      	movs	r3, #3
 800c58a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c58c:	e006      	b.n	800c59c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c58e:	4b45      	ldr	r3, [pc, #276]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1e9      	bne.n	800c56e <RCCEx_PLLSAI1_Config+0x86>
 800c59a:	e000      	b.n	800c59e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800c59c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800c59e:	7bfb      	ldrb	r3, [r7, #15]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d179      	bne.n	800c698 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d116      	bne.n	800c5d8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c5aa:	4b3e      	ldr	r3, [pc, #248]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c5ac:	691a      	ldr	r2, [r3, #16]
 800c5ae:	4b3e      	ldr	r3, [pc, #248]	; (800c6a8 <RCCEx_PLLSAI1_Config+0x1c0>)
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	6892      	ldr	r2, [r2, #8]
 800c5b6:	0211      	lsls	r1, r2, #8
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	68d2      	ldr	r2, [r2, #12]
 800c5bc:	06d2      	lsls	r2, r2, #27
 800c5be:	4311      	orrs	r1, r2
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	6852      	ldr	r2, [r2, #4]
 800c5c4:	3a01      	subs	r2, #1
 800c5c6:	0112      	lsls	r2, r2, #4
 800c5c8:	4311      	orrs	r1, r2
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	6812      	ldr	r2, [r2, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	4934      	ldr	r1, [pc, #208]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	610b      	str	r3, [r1, #16]
 800c5d6:	e033      	b.n	800c640 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d118      	bne.n	800c610 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c5de:	4b31      	ldr	r3, [pc, #196]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c5e0:	691a      	ldr	r2, [r3, #16]
 800c5e2:	4b32      	ldr	r3, [pc, #200]	; (800c6ac <RCCEx_PLLSAI1_Config+0x1c4>)
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	6892      	ldr	r2, [r2, #8]
 800c5ea:	0211      	lsls	r1, r2, #8
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	6912      	ldr	r2, [r2, #16]
 800c5f0:	0852      	lsrs	r2, r2, #1
 800c5f2:	3a01      	subs	r2, #1
 800c5f4:	0552      	lsls	r2, r2, #21
 800c5f6:	4311      	orrs	r1, r2
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	6852      	ldr	r2, [r2, #4]
 800c5fc:	3a01      	subs	r2, #1
 800c5fe:	0112      	lsls	r2, r2, #4
 800c600:	4311      	orrs	r1, r2
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	6812      	ldr	r2, [r2, #0]
 800c606:	430a      	orrs	r2, r1
 800c608:	4926      	ldr	r1, [pc, #152]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c60a:	4313      	orrs	r3, r2
 800c60c:	610b      	str	r3, [r1, #16]
 800c60e:	e017      	b.n	800c640 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c610:	4b24      	ldr	r3, [pc, #144]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c612:	691a      	ldr	r2, [r3, #16]
 800c614:	4b26      	ldr	r3, [pc, #152]	; (800c6b0 <RCCEx_PLLSAI1_Config+0x1c8>)
 800c616:	4013      	ands	r3, r2
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	6892      	ldr	r2, [r2, #8]
 800c61c:	0211      	lsls	r1, r2, #8
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	6952      	ldr	r2, [r2, #20]
 800c622:	0852      	lsrs	r2, r2, #1
 800c624:	3a01      	subs	r2, #1
 800c626:	0652      	lsls	r2, r2, #25
 800c628:	4311      	orrs	r1, r2
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6852      	ldr	r2, [r2, #4]
 800c62e:	3a01      	subs	r2, #1
 800c630:	0112      	lsls	r2, r2, #4
 800c632:	4311      	orrs	r1, r2
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	6812      	ldr	r2, [r2, #0]
 800c638:	430a      	orrs	r2, r1
 800c63a:	491a      	ldr	r1, [pc, #104]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c63c:	4313      	orrs	r3, r2
 800c63e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c640:	4b18      	ldr	r3, [pc, #96]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a17      	ldr	r2, [pc, #92]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c64a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c64c:	f7fc faf0 	bl	8008c30 <HAL_GetTick>
 800c650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c652:	e00f      	b.n	800c674 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c654:	f7fc faec 	bl	8008c30 <HAL_GetTick>
 800c658:	4602      	mov	r2, r0
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d908      	bls.n	800c674 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c662:	4b10      	ldr	r3, [pc, #64]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d109      	bne.n	800c682 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800c672:	e006      	b.n	800c682 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c674:	4b0b      	ldr	r3, [pc, #44]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d0e9      	beq.n	800c654 <RCCEx_PLLSAI1_Config+0x16c>
 800c680:	e000      	b.n	800c684 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800c682:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d106      	bne.n	800c698 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800c68a:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c68c:	691a      	ldr	r2, [r3, #16]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	4904      	ldr	r1, [pc, #16]	; (800c6a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800c694:	4313      	orrs	r3, r2
 800c696:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c698:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	40021000 	.word	0x40021000
 800c6a8:	07ff800c 	.word	0x07ff800c
 800c6ac:	ff9f800c 	.word	0xff9f800c
 800c6b0:	f9ff800c 	.word	0xf9ff800c

0800c6b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d018      	beq.n	800c6fc <RCCEx_PLLSAI2_Config+0x48>
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d81f      	bhi.n	800c70e <RCCEx_PLLSAI2_Config+0x5a>
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d002      	beq.n	800c6d8 <RCCEx_PLLSAI2_Config+0x24>
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d009      	beq.n	800c6ea <RCCEx_PLLSAI2_Config+0x36>
 800c6d6:	e01a      	b.n	800c70e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c6d8:	4b4a      	ldr	r3, [pc, #296]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0302 	and.w	r3, r3, #2
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d117      	bne.n	800c714 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c6e8:	e014      	b.n	800c714 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c6ea:	4b46      	ldr	r3, [pc, #280]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d110      	bne.n	800c718 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c6fa:	e00d      	b.n	800c718 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800c6fc:	4b41      	ldr	r3, [pc, #260]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d109      	bne.n	800c71c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c70c:	e006      	b.n	800c71c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800c70e:	2301      	movs	r3, #1
 800c710:	73fb      	strb	r3, [r7, #15]
      break;
 800c712:	e004      	b.n	800c71e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800c714:	bf00      	nop
 800c716:	e002      	b.n	800c71e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800c718:	bf00      	nop
 800c71a:	e000      	b.n	800c71e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800c71c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d169      	bne.n	800c7f8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c724:	4b37      	ldr	r3, [pc, #220]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a36      	ldr	r2, [pc, #216]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c72a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c72e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c730:	f7fc fa7e 	bl	8008c30 <HAL_GetTick>
 800c734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c736:	e00f      	b.n	800c758 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c738:	f7fc fa7a 	bl	8008c30 <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b02      	cmp	r3, #2
 800c744:	d908      	bls.n	800c758 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c746:	4b2f      	ldr	r3, [pc, #188]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d009      	beq.n	800c766 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800c752:	2303      	movs	r3, #3
 800c754:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c756:	e006      	b.n	800c766 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c758:	4b2a      	ldr	r3, [pc, #168]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e9      	bne.n	800c738 <RCCEx_PLLSAI2_Config+0x84>
 800c764:	e000      	b.n	800c768 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800c766:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d144      	bne.n	800c7f8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d115      	bne.n	800c7a0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c774:	4b23      	ldr	r3, [pc, #140]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c776:	695a      	ldr	r2, [r3, #20]
 800c778:	4b23      	ldr	r3, [pc, #140]	; (800c808 <RCCEx_PLLSAI2_Config+0x154>)
 800c77a:	4013      	ands	r3, r2
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6892      	ldr	r2, [r2, #8]
 800c780:	0211      	lsls	r1, r2, #8
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	68d2      	ldr	r2, [r2, #12]
 800c786:	06d2      	lsls	r2, r2, #27
 800c788:	4311      	orrs	r1, r2
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	6852      	ldr	r2, [r2, #4]
 800c78e:	3a01      	subs	r2, #1
 800c790:	0112      	lsls	r2, r2, #4
 800c792:	4311      	orrs	r1, r2
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	491a      	ldr	r1, [pc, #104]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c79c:	4313      	orrs	r3, r2
 800c79e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c7a0:	4b18      	ldr	r3, [pc, #96]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a17      	ldr	r2, [pc, #92]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c7a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7ac:	f7fc fa40 	bl	8008c30 <HAL_GetTick>
 800c7b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c7b2:	e00f      	b.n	800c7d4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c7b4:	f7fc fa3c 	bl	8008c30 <HAL_GetTick>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d908      	bls.n	800c7d4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c7c2:	4b10      	ldr	r3, [pc, #64]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d109      	bne.n	800c7e2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800c7d2:	e006      	b.n	800c7e2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c7d4:	4b0b      	ldr	r3, [pc, #44]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0e9      	beq.n	800c7b4 <RCCEx_PLLSAI2_Config+0x100>
 800c7e0:	e000      	b.n	800c7e4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800c7e2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800c7ea:	4b06      	ldr	r3, [pc, #24]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c7ec:	695a      	ldr	r2, [r3, #20]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	691b      	ldr	r3, [r3, #16]
 800c7f2:	4904      	ldr	r1, [pc, #16]	; (800c804 <RCCEx_PLLSAI2_Config+0x150>)
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	40021000 	.word	0x40021000
 800c808:	07ff800c 	.word	0x07ff800c

0800c80c <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 800c816:	4b26      	ldr	r3, [pc, #152]	; (800c8b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800c818:	691b      	ldr	r3, [r3, #16]
 800c81a:	f003 0303 	and.w	r3, r3, #3
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d02d      	beq.n	800c87e <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 800c822:	2b03      	cmp	r3, #3
 800c824:	d835      	bhi.n	800c892 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 800c826:	2b01      	cmp	r3, #1
 800c828:	d002      	beq.n	800c830 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d01d      	beq.n	800c86a <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800c82e:	e030      	b.n	800c892 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c830:	4b1f      	ldr	r3, [pc, #124]	; (800c8b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 0302 	and.w	r3, r3, #2
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d12c      	bne.n	800c896 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c83c:	4b1c      	ldr	r3, [pc, #112]	; (800c8b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 0308 	and.w	r3, r3, #8
 800c844:	2b00      	cmp	r3, #0
 800c846:	d005      	beq.n	800c854 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 800c848:	4b19      	ldr	r3, [pc, #100]	; (800c8b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	091b      	lsrs	r3, r3, #4
 800c84e:	f003 030f 	and.w	r3, r3, #15
 800c852:	e005      	b.n	800c860 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 800c854:	4b16      	ldr	r3, [pc, #88]	; (800c8b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800c856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c85a:	0a1b      	lsrs	r3, r3, #8
 800c85c:	f003 030f 	and.w	r3, r3, #15
 800c860:	4a14      	ldr	r2, [pc, #80]	; (800c8b4 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 800c862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c866:	607b      	str	r3, [r7, #4]
      break;
 800c868:	e015      	b.n	800c896 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c86a:	4b11      	ldr	r3, [pc, #68]	; (800c8b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c876:	d110      	bne.n	800c89a <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 800c878:	4b0f      	ldr	r3, [pc, #60]	; (800c8b8 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 800c87a:	607b      	str	r3, [r7, #4]
      break;
 800c87c:	e00d      	b.n	800c89a <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c87e:	4b0c      	ldr	r3, [pc, #48]	; (800c8b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c88a:	d108      	bne.n	800c89e <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 800c88c:	4b0b      	ldr	r3, [pc, #44]	; (800c8bc <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 800c88e:	607b      	str	r3, [r7, #4]
      break;
 800c890:	e005      	b.n	800c89e <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 800c892:	bf00      	nop
 800c894:	e004      	b.n	800c8a0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800c896:	bf00      	nop
 800c898:	e002      	b.n	800c8a0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800c89a:	bf00      	nop
 800c89c:	e000      	b.n	800c8a0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800c89e:	bf00      	nop
  }

  return pllvco;
 800c8a0:	687b      	ldr	r3, [r7, #4]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	370c      	adds	r7, #12
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	40021000 	.word	0x40021000
 800c8b4:	080133fc 	.word	0x080133fc
 800c8b8:	00f42400 	.word	0x00f42400
 800c8bc:	02dc6c00 	.word	0x02dc6c00

0800c8c0 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 800c8ca:	4b26      	ldr	r3, [pc, #152]	; (800c964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d02d      	beq.n	800c932 <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d835      	bhi.n	800c946 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d002      	beq.n	800c8e4 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d01d      	beq.n	800c91e <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800c8e2:	e030      	b.n	800c946 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c8e4:	4b1f      	ldr	r3, [pc, #124]	; (800c964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0302 	and.w	r3, r3, #2
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d12c      	bne.n	800c94a <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c8f0:	4b1c      	ldr	r3, [pc, #112]	; (800c964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 0308 	and.w	r3, r3, #8
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d005      	beq.n	800c908 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 800c8fc:	4b19      	ldr	r3, [pc, #100]	; (800c964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	091b      	lsrs	r3, r3, #4
 800c902:	f003 030f 	and.w	r3, r3, #15
 800c906:	e005      	b.n	800c914 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 800c908:	4b16      	ldr	r3, [pc, #88]	; (800c964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800c90a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c90e:	0a1b      	lsrs	r3, r3, #8
 800c910:	f003 030f 	and.w	r3, r3, #15
 800c914:	4a14      	ldr	r2, [pc, #80]	; (800c968 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 800c916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c91a:	607b      	str	r3, [r7, #4]
      break;
 800c91c:	e015      	b.n	800c94a <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c91e:	4b11      	ldr	r3, [pc, #68]	; (800c964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c92a:	d110      	bne.n	800c94e <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 800c92c:	4b0f      	ldr	r3, [pc, #60]	; (800c96c <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 800c92e:	607b      	str	r3, [r7, #4]
      break;
 800c930:	e00d      	b.n	800c94e <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c932:	4b0c      	ldr	r3, [pc, #48]	; (800c964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c93a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c93e:	d108      	bne.n	800c952 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 800c940:	4b0b      	ldr	r3, [pc, #44]	; (800c970 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 800c942:	607b      	str	r3, [r7, #4]
      break;
 800c944:	e005      	b.n	800c952 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 800c946:	bf00      	nop
 800c948:	e004      	b.n	800c954 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 800c94a:	bf00      	nop
 800c94c:	e002      	b.n	800c954 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 800c94e:	bf00      	nop
 800c950:	e000      	b.n	800c954 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 800c952:	bf00      	nop
  }

  return pllvco;
 800c954:	687b      	ldr	r3, [r7, #4]
}
 800c956:	4618      	mov	r0, r3
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	40021000 	.word	0x40021000
 800c968:	080133fc 	.word	0x080133fc
 800c96c:	00f42400 	.word	0x00f42400
 800c970:	02dc6c00 	.word	0x02dc6c00

0800c974 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b088      	sub	sp, #32
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c988:	d10c      	bne.n	800c9a4 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c98a:	4b78      	ldr	r3, [pc, #480]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800c98c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c990:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800c994:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b60      	cmp	r3, #96	; 0x60
 800c99a:	d110      	bne.n	800c9be <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c99c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	e00c      	b.n	800c9be <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c9a4:	4b71      	ldr	r3, [pc, #452]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800c9a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c9aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9ae:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9b6:	d102      	bne.n	800c9be <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800c9b8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c9bc:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f040 80cd 	bne.w	800cb60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	2b40      	cmp	r3, #64	; 0x40
 800c9ce:	d003      	beq.n	800c9d8 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d6:	d13b      	bne.n	800ca50 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c9d8:	4b64      	ldr	r3, [pc, #400]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9e4:	f040 80bb 	bne.w	800cb5e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800c9e8:	4b60      	ldr	r3, [pc, #384]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f000 80b4 	beq.w	800cb5e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c9f6:	4b5d      	ldr	r3, [pc, #372]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	091b      	lsrs	r3, r3, #4
 800c9fc:	f003 030f 	and.w	r3, r3, #15
 800ca00:	3301      	adds	r3, #1
 800ca02:	693a      	ldr	r2, [r7, #16]
 800ca04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca08:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ca0a:	4b58      	ldr	r3, [pc, #352]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	0a1b      	lsrs	r3, r3, #8
 800ca10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca14:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ca16:	4b55      	ldr	r3, [pc, #340]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	0edb      	lsrs	r3, r3, #27
 800ca1c:	f003 031f 	and.w	r3, r3, #31
 800ca20:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ca28:	4b50      	ldr	r3, [pc, #320]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 800ca34:	2311      	movs	r3, #17
 800ca36:	617b      	str	r3, [r7, #20]
 800ca38:	e001      	b.n	800ca3e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 800ca3a:	2307      	movs	r3, #7
 800ca3c:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	fb03 f202 	mul.w	r2, r3, r2
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca4c:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ca4e:	e086      	b.n	800cb5e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	2b80      	cmp	r3, #128	; 0x80
 800ca54:	d003      	beq.n	800ca5e <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca5c:	d109      	bne.n	800ca72 <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca5e:	4b43      	ldr	r3, [pc, #268]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca6a:	d179      	bne.n	800cb60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 800ca6c:	4b40      	ldr	r3, [pc, #256]	; (800cb70 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800ca6e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca70:	e076      	b.n	800cb60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d135      	bne.n	800cae4 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800ca78:	4b3c      	ldr	r3, [pc, #240]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d06d      	beq.n	800cb60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800ca84:	f7ff fec2 	bl	800c80c <RCCEx_PLLSAI1_GetVCOFreq>
 800ca88:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ca8a:	4b38      	ldr	r3, [pc, #224]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	091b      	lsrs	r3, r3, #4
 800ca90:	f003 030f 	and.w	r3, r3, #15
 800ca94:	3301      	adds	r3, #1
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca9c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ca9e:	4b33      	ldr	r3, [pc, #204]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	0a1b      	lsrs	r3, r3, #8
 800caa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa8:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800caaa:	4b30      	ldr	r3, [pc, #192]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	0edb      	lsrs	r3, r3, #27
 800cab0:	f003 031f 	and.w	r3, r3, #31
 800cab4:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10a      	bne.n	800cad2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800cabc:	4b2b      	ldr	r3, [pc, #172]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 800cac8:	2311      	movs	r3, #17
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	e001      	b.n	800cad2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 800cace:	2307      	movs	r3, #7
 800cad0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	fb03 f202 	mul.w	r2, r3, r2
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cae0:	61fb      	str	r3, [r7, #28]
 800cae2:	e03d      	b.n	800cb60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	d003      	beq.n	800caf2 <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caf0:	d136      	bne.n	800cb60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 800caf2:	4b1e      	ldr	r3, [pc, #120]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800caf4:	695b      	ldr	r3, [r3, #20]
 800caf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d030      	beq.n	800cb60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 800cafe:	f7ff fedf 	bl	800c8c0 <RCCEx_PLLSAI2_GetVCOFreq>
 800cb02:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800cb04:	4b19      	ldr	r3, [pc, #100]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800cb06:	695b      	ldr	r3, [r3, #20]
 800cb08:	091b      	lsrs	r3, r3, #4
 800cb0a:	f003 030f 	and.w	r3, r3, #15
 800cb0e:	3301      	adds	r3, #1
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb16:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800cb18:	4b14      	ldr	r3, [pc, #80]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800cb1a:	695b      	ldr	r3, [r3, #20]
 800cb1c:	0a1b      	lsrs	r3, r3, #8
 800cb1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb22:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800cb24:	4b11      	ldr	r3, [pc, #68]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	0edb      	lsrs	r3, r3, #27
 800cb2a:	f003 031f 	and.w	r3, r3, #31
 800cb2e:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10a      	bne.n	800cb4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800cb36:	4b0d      	ldr	r3, [pc, #52]	; (800cb6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800cb38:	695b      	ldr	r3, [r3, #20]
 800cb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800cb42:	2311      	movs	r3, #17
 800cb44:	617b      	str	r3, [r7, #20]
 800cb46:	e001      	b.n	800cb4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800cb48:	2307      	movs	r3, #7
 800cb4a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	fb03 f202 	mul.w	r2, r3, r2
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb5a:	61fb      	str	r3, [r7, #28]
 800cb5c:	e000      	b.n	800cb60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800cb5e:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 800cb60:	69fb      	ldr	r3, [r7, #28]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3720      	adds	r7, #32
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	40021000 	.word	0x40021000
 800cb70:	00f42400 	.word	0x00f42400

0800cb74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d066      	beq.n	800cc54 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d106      	bne.n	800cba0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7fb f9ce 	bl	8007f3c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2202      	movs	r2, #2
 800cba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f003 0310 	and.w	r3, r3, #16
 800cbb2:	2b10      	cmp	r3, #16
 800cbb4:	d045      	beq.n	800cc42 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbb6:	4b2a      	ldr	r3, [pc, #168]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cbb8:	22ca      	movs	r2, #202	; 0xca
 800cbba:	625a      	str	r2, [r3, #36]	; 0x24
 800cbbc:	4b28      	ldr	r3, [pc, #160]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cbbe:	2253      	movs	r2, #83	; 0x53
 800cbc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f872 	bl	800ccac <RTC_EnterInitMode>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800cbcc:	7bfb      	ldrb	r3, [r7, #15]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d121      	bne.n	800cc16 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800cbd2:	4b23      	ldr	r3, [pc, #140]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	4a22      	ldr	r2, [pc, #136]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cbd8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800cbdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbe0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800cbe2:	4b1f      	ldr	r3, [pc, #124]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cbe4:	699a      	ldr	r2, [r3, #24]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6859      	ldr	r1, [r3, #4]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	4319      	orrs	r1, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	430b      	orrs	r3, r1
 800cbf6:	491a      	ldr	r1, [pc, #104]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	68da      	ldr	r2, [r3, #12]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	689b      	ldr	r3, [r3, #8]
 800cc04:	041b      	lsls	r3, r3, #16
 800cc06:	4916      	ldr	r1, [pc, #88]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 f881 	bl	800cd14 <RTC_ExitInitMode>
 800cc12:	4603      	mov	r3, r0
 800cc14:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10e      	bne.n	800cc3a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800cc1c:	4b10      	ldr	r3, [pc, #64]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cc1e:	699b      	ldr	r3, [r3, #24]
 800cc20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a19      	ldr	r1, [r3, #32]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	69db      	ldr	r3, [r3, #28]
 800cc2c:	4319      	orrs	r1, r3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	430b      	orrs	r3, r1
 800cc34:	490a      	ldr	r1, [pc, #40]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cc36:	4313      	orrs	r3, r2
 800cc38:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc3a:	4b09      	ldr	r3, [pc, #36]	; (800cc60 <HAL_RTC_Init+0xec>)
 800cc3c:	22ff      	movs	r2, #255	; 0xff
 800cc3e:	625a      	str	r2, [r3, #36]	; 0x24
 800cc40:	e001      	b.n	800cc46 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d103      	bne.n	800cc54 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	40002800 	.word	0x40002800

0800cc64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <HAL_RTC_WaitForSynchro+0x40>)
 800cc6e:	4a0e      	ldr	r2, [pc, #56]	; (800cca8 <HAL_RTC_WaitForSynchro+0x44>)
 800cc70:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800cc72:	f7fb ffdd 	bl	8008c30 <HAL_GetTick>
 800cc76:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cc78:	e009      	b.n	800cc8e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cc7a:	f7fb ffd9 	bl	8008c30 <HAL_GetTick>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc88:	d901      	bls.n	800cc8e <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	e006      	b.n	800cc9c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cc8e:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <HAL_RTC_WaitForSynchro+0x40>)
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	f003 0320 	and.w	r3, r3, #32
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0ef      	beq.n	800cc7a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	40002800 	.word	0x40002800
 800cca8:	0001005c 	.word	0x0001005c

0800ccac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ccb8:	4b15      	ldr	r3, [pc, #84]	; (800cd10 <RTC_EnterInitMode+0x64>)
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d120      	bne.n	800cd06 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ccc4:	4b12      	ldr	r3, [pc, #72]	; (800cd10 <RTC_EnterInitMode+0x64>)
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	4a11      	ldr	r2, [pc, #68]	; (800cd10 <RTC_EnterInitMode+0x64>)
 800ccca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccce:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ccd0:	f7fb ffae 	bl	8008c30 <HAL_GetTick>
 800ccd4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ccd6:	e00d      	b.n	800ccf4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ccd8:	f7fb ffaa 	bl	8008c30 <HAL_GetTick>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cce6:	d905      	bls.n	800ccf4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cce8:	2303      	movs	r3, #3
 800ccea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2203      	movs	r2, #3
 800ccf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ccf4:	4b06      	ldr	r3, [pc, #24]	; (800cd10 <RTC_EnterInitMode+0x64>)
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <RTC_EnterInitMode+0x5a>
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
 800cd02:	2b03      	cmp	r3, #3
 800cd04:	d1e8      	bne.n	800ccd8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	40002800 	.word	0x40002800

0800cd14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cd20:	4b1a      	ldr	r3, [pc, #104]	; (800cd8c <RTC_ExitInitMode+0x78>)
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	4a19      	ldr	r2, [pc, #100]	; (800cd8c <RTC_ExitInitMode+0x78>)
 800cd26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd2a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cd2c:	4b17      	ldr	r3, [pc, #92]	; (800cd8c <RTC_ExitInitMode+0x78>)
 800cd2e:	699b      	ldr	r3, [r3, #24]
 800cd30:	f003 0320 	and.w	r3, r3, #32
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10c      	bne.n	800cd52 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff ff93 	bl	800cc64 <HAL_RTC_WaitForSynchro>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d01e      	beq.n	800cd82 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2203      	movs	r2, #3
 800cd48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	73fb      	strb	r3, [r7, #15]
 800cd50:	e017      	b.n	800cd82 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cd52:	4b0e      	ldr	r3, [pc, #56]	; (800cd8c <RTC_ExitInitMode+0x78>)
 800cd54:	699b      	ldr	r3, [r3, #24]
 800cd56:	4a0d      	ldr	r2, [pc, #52]	; (800cd8c <RTC_ExitInitMode+0x78>)
 800cd58:	f023 0320 	bic.w	r3, r3, #32
 800cd5c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff ff80 	bl	800cc64 <HAL_RTC_WaitForSynchro>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2203      	movs	r2, #3
 800cd6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800cd72:	2303      	movs	r3, #3
 800cd74:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cd76:	4b05      	ldr	r3, [pc, #20]	; (800cd8c <RTC_ExitInitMode+0x78>)
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	4a04      	ldr	r2, [pc, #16]	; (800cd8c <RTC_ExitInitMode+0x78>)
 800cd7c:	f043 0320 	orr.w	r3, r3, #32
 800cd80:	6193      	str	r3, [r2, #24]
  }

  return status;
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3710      	adds	r7, #16
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	40002800 	.word	0x40002800

0800cd90 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
 800cd9c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d101      	bne.n	800cdac <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 800cda8:	2302      	movs	r3, #2
 800cdaa:	e06f      	b.n	800ce8c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cdbc:	4b35      	ldr	r3, [pc, #212]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800cdbe:	22ca      	movs	r2, #202	; 0xca
 800cdc0:	625a      	str	r2, [r3, #36]	; 0x24
 800cdc2:	4b34      	ldr	r3, [pc, #208]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800cdc4:	2253      	movs	r2, #83	; 0x53
 800cdc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 800cdc8:	4b32      	ldr	r3, [pc, #200]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	4a31      	ldr	r2, [pc, #196]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800cdce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdd2:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800cdd4:	4b2f      	ldr	r3, [pc, #188]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800cdd6:	2204      	movs	r2, #4
 800cdd8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cdda:	4b2e      	ldr	r3, [pc, #184]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d11e      	bne.n	800ce24 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 800cde6:	f7fb ff23 	bl	8008c30 <HAL_GetTick>
 800cdea:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800cdec:	e014      	b.n	800ce18 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cdee:	f7fb ff1f 	bl	8008c30 <HAL_GetTick>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdfc:	d90c      	bls.n	800ce18 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdfe:	4b25      	ldr	r3, [pc, #148]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ce00:	22ff      	movs	r2, #255	; 0xff
 800ce02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2203      	movs	r2, #3
 800ce08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 800ce14:	2303      	movs	r3, #3
 800ce16:	e039      	b.n	800ce8c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800ce18:	4b1e      	ldr	r3, [pc, #120]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	f003 0304 	and.w	r3, r3, #4
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d0e4      	beq.n	800cdee <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	041a      	lsls	r2, r3, #16
 800ce28:	491a      	ldr	r1, [pc, #104]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800ce30:	4b18      	ldr	r3, [pc, #96]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	f023 0207 	bic.w	r2, r3, #7
 800ce38:	4916      	ldr	r1, [pc, #88]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d008      	beq.n	800ce58 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 800ce46:	4b14      	ldr	r3, [pc, #80]	; (800ce98 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800ce48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce4c:	4a12      	ldr	r2, [pc, #72]	; (800ce98 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800ce4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800ce56:	e007      	b.n	800ce68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ce58:	4b0f      	ldr	r3, [pc, #60]	; (800ce98 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800ce5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce5e:	4a0e      	ldr	r2, [pc, #56]	; (800ce98 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800ce60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800ce68:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	4a09      	ldr	r2, [pc, #36]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ce6e:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800ce72:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce74:	4b07      	ldr	r3, [pc, #28]	; (800ce94 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ce76:	22ff      	movs	r2, #255	; 0xff
 800ce78:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	40002800 	.word	0x40002800
 800ce98:	4002f400 	.word	0x4002f400

0800ce9c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 800cea4:	4b09      	ldr	r3, [pc, #36]	; (800cecc <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800cea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cea8:	f003 0304 	and.w	r3, r3, #4
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800ceb0:	4b06      	ldr	r3, [pc, #24]	; (800cecc <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800ceb2:	2204      	movs	r2, #4
 800ceb4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f80a 	bl	800ced0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2201      	movs	r2, #1
 800cec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800cec4:	bf00      	nop
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	40002800 	.word	0x40002800

0800ced0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800ced8:	bf00      	nop
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	490f      	ldr	r1, [pc, #60]	; (800cf34 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800cef8:	4313      	orrs	r3, r2
 800cefa:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	490c      	ldr	r1, [pc, #48]	; (800cf38 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800cf0a:	4b0b      	ldr	r3, [pc, #44]	; (800cf38 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	6919      	ldr	r1, [r3, #16]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	041b      	lsls	r3, r3, #16
 800cf1c:	430b      	orrs	r3, r1
 800cf1e:	4906      	ldr	r1, [pc, #24]	; (800cf38 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cf20:	4313      	orrs	r3, r2
 800cf22:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	370c      	adds	r7, #12
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop
 800cf34:	40002800 	.word	0x40002800
 800cf38:	40003400 	.word	0x40003400

0800cf3c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
 800cf48:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d904      	bls.n	800cf5a <HAL_SAI_InitProtocol+0x1e>
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	3b03      	subs	r3, #3
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d812      	bhi.n	800cf7e <HAL_SAI_InitProtocol+0x42>
 800cf58:	e008      	b.n	800cf6c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	68b9      	ldr	r1, [r7, #8]
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f000 fa0d 	bl	800d380 <SAI_InitI2S>
 800cf66:	4603      	mov	r3, r0
 800cf68:	75fb      	strb	r3, [r7, #23]
      break;
 800cf6a:	e00b      	b.n	800cf84 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	68b9      	ldr	r1, [r7, #8]
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f000 fab6 	bl	800d4e4 <SAI_InitPCM>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	75fb      	strb	r3, [r7, #23]
      break;
 800cf7c:	e002      	b.n	800cf84 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	75fb      	strb	r3, [r7, #23]
      break;
 800cf82:	bf00      	nop
  }

  if (status == HAL_OK)
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d104      	bne.n	800cf94 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f000 f808 	bl	800cfa0 <HAL_SAI_Init>
 800cf90:	4603      	mov	r3, r0
 800cf92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b08a      	sub	sp, #40	; 0x28
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e1da      	b.n	800d368 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d10e      	bne.n	800cfda <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a87      	ldr	r2, [pc, #540]	; (800d1e0 <HAL_SAI_Init+0x240>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d107      	bne.n	800cfd6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d103      	bne.n	800cfd6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e1c6      	b.n	800d368 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7fb f84c 	bl	800808c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 faf7 	bl	800d5e8 <SAI_Disable>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e1b1      	b.n	800d368 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2202      	movs	r2, #2
 800d008:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2b02      	cmp	r3, #2
 800d012:	d00c      	beq.n	800d02e <HAL_SAI_Init+0x8e>
 800d014:	2b02      	cmp	r3, #2
 800d016:	d80d      	bhi.n	800d034 <HAL_SAI_Init+0x94>
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <HAL_SAI_Init+0x82>
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d003      	beq.n	800d028 <HAL_SAI_Init+0x88>
 800d020:	e008      	b.n	800d034 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d026:	e008      	b.n	800d03a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d028:	2310      	movs	r3, #16
 800d02a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d02c:	e005      	b.n	800d03a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d02e:	2320      	movs	r3, #32
 800d030:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d032:	e002      	b.n	800d03a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800d034:	2300      	movs	r3, #0
 800d036:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d038:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	2b03      	cmp	r3, #3
 800d040:	d81d      	bhi.n	800d07e <HAL_SAI_Init+0xde>
 800d042:	a201      	add	r2, pc, #4	; (adr r2, 800d048 <HAL_SAI_Init+0xa8>)
 800d044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d048:	0800d059 	.word	0x0800d059
 800d04c:	0800d05f 	.word	0x0800d05f
 800d050:	0800d067 	.word	0x0800d067
 800d054:	0800d06f 	.word	0x0800d06f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	61fb      	str	r3, [r7, #28]
      break;
 800d05c:	e012      	b.n	800d084 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d062:	61fb      	str	r3, [r7, #28]
      break;
 800d064:	e00e      	b.n	800d084 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d06a:	61fb      	str	r3, [r7, #28]
      break;
 800d06c:	e00a      	b.n	800d084 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d06e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d072:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	f043 0301 	orr.w	r3, r3, #1
 800d07a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d07c:	e002      	b.n	800d084 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 800d07e:	2300      	movs	r3, #0
 800d080:	61fb      	str	r3, [r7, #28]
      break;
 800d082:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a55      	ldr	r2, [pc, #340]	; (800d1e0 <HAL_SAI_Init+0x240>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d004      	beq.n	800d098 <HAL_SAI_Init+0xf8>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a54      	ldr	r2, [pc, #336]	; (800d1e4 <HAL_SAI_Init+0x244>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d103      	bne.n	800d0a0 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800d098:	4a53      	ldr	r2, [pc, #332]	; (800d1e8 <HAL_SAI_Init+0x248>)
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	e002      	b.n	800d0a6 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d0a0:	4a52      	ldr	r2, [pc, #328]	; (800d1ec <HAL_SAI_Init+0x24c>)
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a1b      	ldr	r3, [r3, #32]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d07e      	beq.n	800d1ac <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a4a      	ldr	r2, [pc, #296]	; (800d1e0 <HAL_SAI_Init+0x240>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d004      	beq.n	800d0c6 <HAL_SAI_Init+0x126>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a48      	ldr	r2, [pc, #288]	; (800d1e4 <HAL_SAI_Init+0x244>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d104      	bne.n	800d0d0 <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d0c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d0ca:	f7fe fa6b 	bl	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d0ce:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a46      	ldr	r2, [pc, #280]	; (800d1f0 <HAL_SAI_Init+0x250>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d004      	beq.n	800d0e4 <HAL_SAI_Init+0x144>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a45      	ldr	r2, [pc, #276]	; (800d1f4 <HAL_SAI_Init+0x254>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d104      	bne.n	800d0ee <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d0e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d0e8:	f7fe fa5c 	bl	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d0ec:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d0f6:	d120      	bne.n	800d13a <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0fc:	2b04      	cmp	r3, #4
 800d0fe:	d102      	bne.n	800d106 <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800d100:	2340      	movs	r3, #64	; 0x40
 800d102:	613b      	str	r3, [r7, #16]
 800d104:	e00a      	b.n	800d11c <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d10a:	2b08      	cmp	r3, #8
 800d10c:	d103      	bne.n	800d116 <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800d10e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d112:	613b      	str	r3, [r7, #16]
 800d114:	e002      	b.n	800d11c <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d11a:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800d11c:	69ba      	ldr	r2, [r7, #24]
 800d11e:	4613      	mov	r3, r2
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	4413      	add	r3, r2
 800d124:	005b      	lsls	r3, r3, #1
 800d126:	4619      	mov	r1, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a1b      	ldr	r3, [r3, #32]
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	fb02 f303 	mul.w	r3, r2, r3
 800d132:	fbb1 f3f3 	udiv	r3, r1, r3
 800d136:	617b      	str	r3, [r7, #20]
 800d138:	e017      	b.n	800d16a <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d13e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d142:	d101      	bne.n	800d148 <HAL_SAI_Init+0x1a8>
 800d144:	2302      	movs	r3, #2
 800d146:	e000      	b.n	800d14a <HAL_SAI_Init+0x1aa>
 800d148:	2301      	movs	r3, #1
 800d14a:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d14c:	69ba      	ldr	r2, [r7, #24]
 800d14e:	4613      	mov	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	005b      	lsls	r3, r3, #1
 800d156:	4619      	mov	r1, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6a1b      	ldr	r3, [r3, #32]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	fb02 f303 	mul.w	r3, r2, r3
 800d162:	021b      	lsls	r3, r3, #8
 800d164:	fbb1 f3f3 	udiv	r3, r1, r3
 800d168:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	4a22      	ldr	r2, [pc, #136]	; (800d1f8 <HAL_SAI_Init+0x258>)
 800d16e:	fba2 2303 	umull	r2, r3, r2, r3
 800d172:	08da      	lsrs	r2, r3, #3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d178:	6979      	ldr	r1, [r7, #20]
 800d17a:	4b1f      	ldr	r3, [pc, #124]	; (800d1f8 <HAL_SAI_Init+0x258>)
 800d17c:	fba3 2301 	umull	r2, r3, r3, r1
 800d180:	08da      	lsrs	r2, r3, #3
 800d182:	4613      	mov	r3, r2
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	4413      	add	r3, r2
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	1aca      	subs	r2, r1, r3
 800d18c:	2a08      	cmp	r2, #8
 800d18e:	d904      	bls.n	800d19a <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d19e:	2b04      	cmp	r3, #4
 800d1a0:	d104      	bne.n	800d1ac <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	085a      	lsrs	r2, r3, #1
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <HAL_SAI_Init+0x21c>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	2b02      	cmp	r3, #2
 800d1ba:	d109      	bne.n	800d1d0 <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d101      	bne.n	800d1c8 <HAL_SAI_Init+0x228>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e001      	b.n	800d1cc <HAL_SAI_Init+0x22c>
 800d1c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1cc:	623b      	str	r3, [r7, #32]
 800d1ce:	e017      	b.n	800d200 <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d111      	bne.n	800d1fc <HAL_SAI_Init+0x25c>
 800d1d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1dc:	e00f      	b.n	800d1fe <HAL_SAI_Init+0x25e>
 800d1de:	bf00      	nop
 800d1e0:	40015404 	.word	0x40015404
 800d1e4:	40015424 	.word	0x40015424
 800d1e8:	40015400 	.word	0x40015400
 800d1ec:	40015800 	.word	0x40015800
 800d1f0:	40015804 	.word	0x40015804
 800d1f4:	40015824 	.word	0x40015824
 800d1f8:	cccccccd 	.word	0xcccccccd
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6819      	ldr	r1, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	4b59      	ldr	r3, [pc, #356]	; (800d370 <HAL_SAI_Init+0x3d0>)
 800d20c:	400b      	ands	r3, r1
 800d20e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	6819      	ldr	r1, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685a      	ldr	r2, [r3, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d21e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d224:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d22a:	431a      	orrs	r2, r3
 800d22c:	6a3b      	ldr	r3, [r7, #32]
 800d22e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800d238:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d244:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	051b      	lsls	r3, r3, #20
 800d24c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d252:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	430a      	orrs	r2, r1
 800d260:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	6812      	ldr	r2, [r2, #0]
 800d26c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d270:	f023 030f 	bic.w	r3, r3, #15
 800d274:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6859      	ldr	r1, [r3, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	69da      	ldr	r2, [r3, #28]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d284:	431a      	orrs	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28a:	431a      	orrs	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	430a      	orrs	r2, r1
 800d292:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	6899      	ldr	r1, [r3, #8]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	4b35      	ldr	r3, [pc, #212]	; (800d374 <HAL_SAI_Init+0x3d4>)
 800d2a0:	400b      	ands	r3, r1
 800d2a2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	6899      	ldr	r1, [r3, #8]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2ae:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d2b4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800d2ba:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800d2c0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d2ca:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	68d9      	ldr	r1, [r3, #12]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	f24f 0320 	movw	r3, #61472	; 0xf020
 800d2e2:	400b      	ands	r3, r1
 800d2e4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68d9      	ldr	r1, [r3, #12]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2fa:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d2fc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d302:	3b01      	subs	r3, #1
 800d304:	021b      	lsls	r3, r3, #8
 800d306:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	430a      	orrs	r2, r1
 800d30e:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a18      	ldr	r2, [pc, #96]	; (800d378 <HAL_SAI_Init+0x3d8>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d119      	bne.n	800d34e <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800d31a:	4b18      	ldr	r3, [pc, #96]	; (800d37c <HAL_SAI_Init+0x3dc>)
 800d31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d31e:	4a17      	ldr	r2, [pc, #92]	; (800d37c <HAL_SAI_Init+0x3dc>)
 800d320:	f023 0301 	bic.w	r3, r3, #1
 800d324:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d10e      	bne.n	800d34e <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d338:	3b01      	subs	r3, #1
 800d33a:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d33c:	490f      	ldr	r1, [pc, #60]	; (800d37c <HAL_SAI_Init+0x3dc>)
 800d33e:	4313      	orrs	r3, r2
 800d340:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800d342:	4b0e      	ldr	r3, [pc, #56]	; (800d37c <HAL_SAI_Init+0x3dc>)
 800d344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d346:	4a0d      	ldr	r2, [pc, #52]	; (800d37c <HAL_SAI_Init+0x3dc>)
 800d348:	f043 0301 	orr.w	r3, r3, #1
 800d34c:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3728      	adds	r7, #40	; 0x28
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	f005c010 	.word	0xf005c010
 800d374:	fff88000 	.word	0xfff88000
 800d378:	40015404 	.word	0x40015404
 800d37c:	40015400 	.word	0x40015400

0800d380 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d380:	b480      	push	{r7}
 800d382:	b087      	sub	sp, #28
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d003      	beq.n	800d3ae <SAI_InitI2S+0x2e>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d103      	bne.n	800d3b6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	651a      	str	r2, [r3, #80]	; 0x50
 800d3b4:	e002      	b.n	800d3bc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d3c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3ca:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	683a      	ldr	r2, [r7, #0]
 800d3d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	f003 0301 	and.w	r3, r3, #1
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e077      	b.n	800d4d6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d107      	bne.n	800d3fc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d3f8:	665a      	str	r2, [r3, #100]	; 0x64
 800d3fa:	e006      	b.n	800d40a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d402:	661a      	str	r2, [r3, #96]	; 0x60
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	d84f      	bhi.n	800d4b0 <SAI_InitI2S+0x130>
 800d410:	a201      	add	r2, pc, #4	; (adr r2, 800d418 <SAI_InitI2S+0x98>)
 800d412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d416:	bf00      	nop
 800d418:	0800d429 	.word	0x0800d429
 800d41c:	0800d44b 	.word	0x0800d44b
 800d420:	0800d46d 	.word	0x0800d46d
 800d424:	0800d48f 	.word	0x0800d48f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2280      	movs	r2, #128	; 0x80
 800d42c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	085b      	lsrs	r3, r3, #1
 800d432:	015a      	lsls	r2, r3, #5
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	085b      	lsrs	r3, r3, #1
 800d43c:	011a      	lsls	r2, r3, #4
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2240      	movs	r2, #64	; 0x40
 800d446:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d448:	e035      	b.n	800d4b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2280      	movs	r2, #128	; 0x80
 800d44e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	085b      	lsrs	r3, r3, #1
 800d454:	019a      	lsls	r2, r3, #6
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	085b      	lsrs	r3, r3, #1
 800d45e:	015a      	lsls	r2, r3, #5
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2280      	movs	r2, #128	; 0x80
 800d468:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d46a:	e024      	b.n	800d4b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	22c0      	movs	r2, #192	; 0xc0
 800d470:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	085b      	lsrs	r3, r3, #1
 800d476:	019a      	lsls	r2, r3, #6
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	085b      	lsrs	r3, r3, #1
 800d480:	015a      	lsls	r2, r3, #5
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2280      	movs	r2, #128	; 0x80
 800d48a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d48c:	e013      	b.n	800d4b6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	22e0      	movs	r2, #224	; 0xe0
 800d492:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	085b      	lsrs	r3, r3, #1
 800d498:	019a      	lsls	r2, r3, #6
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	085b      	lsrs	r3, r3, #1
 800d4a2:	015a      	lsls	r2, r3, #5
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2280      	movs	r2, #128	; 0x80
 800d4ac:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d4ae:	e002      	b.n	800d4b6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	75fb      	strb	r3, [r7, #23]
      break;
 800d4b4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d10b      	bne.n	800d4d4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d102      	bne.n	800d4c8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2210      	movs	r2, #16
 800d4c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d102      	bne.n	800d4d4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2208      	movs	r2, #8
 800d4d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800d4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	371c      	adds	r7, #28
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop

0800d4e4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b087      	sub	sp, #28
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d003      	beq.n	800d512 <SAI_InitPCM+0x2e>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	2b02      	cmp	r3, #2
 800d510:	d103      	bne.n	800d51a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2201      	movs	r2, #1
 800d516:	651a      	str	r2, [r3, #80]	; 0x50
 800d518:	e002      	b.n	800d520 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2200      	movs	r2, #0
 800d51e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800d52c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d534:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d548:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	d103      	bne.n	800d558 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2201      	movs	r2, #1
 800d554:	659a      	str	r2, [r3, #88]	; 0x58
 800d556:	e002      	b.n	800d55e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	220d      	movs	r2, #13
 800d55c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b03      	cmp	r3, #3
 800d562:	d837      	bhi.n	800d5d4 <SAI_InitPCM+0xf0>
 800d564:	a201      	add	r2, pc, #4	; (adr r2, 800d56c <SAI_InitPCM+0x88>)
 800d566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56a:	bf00      	nop
 800d56c:	0800d57d 	.word	0x0800d57d
 800d570:	0800d593 	.word	0x0800d593
 800d574:	0800d5a9 	.word	0x0800d5a9
 800d578:	0800d5bf 	.word	0x0800d5bf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2280      	movs	r2, #128	; 0x80
 800d580:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	011a      	lsls	r2, r3, #4
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2240      	movs	r2, #64	; 0x40
 800d58e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d590:	e023      	b.n	800d5da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2280      	movs	r2, #128	; 0x80
 800d596:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	015a      	lsls	r2, r3, #5
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2280      	movs	r2, #128	; 0x80
 800d5a4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d5a6:	e018      	b.n	800d5da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	22c0      	movs	r2, #192	; 0xc0
 800d5ac:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	015a      	lsls	r2, r3, #5
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2280      	movs	r2, #128	; 0x80
 800d5ba:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d5bc:	e00d      	b.n	800d5da <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	22e0      	movs	r2, #224	; 0xe0
 800d5c2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	015a      	lsls	r2, r3, #5
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2280      	movs	r2, #128	; 0x80
 800d5d0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800d5d2:	e002      	b.n	800d5da <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	75fb      	strb	r3, [r7, #23]
      break;
 800d5d8:	bf00      	nop
  }

  return status;
 800d5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	371c      	adds	r7, #28
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d5f0:	4b18      	ldr	r3, [pc, #96]	; (800d654 <SAI_Disable+0x6c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a18      	ldr	r2, [pc, #96]	; (800d658 <SAI_Disable+0x70>)
 800d5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5fa:	0b1b      	lsrs	r3, r3, #12
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d612:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d10a      	bne.n	800d630 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d620:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800d62a:	2303      	movs	r3, #3
 800d62c:	72fb      	strb	r3, [r7, #11]
      break;
 800d62e:	e009      	b.n	800d644 <SAI_Disable+0x5c>
    }
    count--;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	3b01      	subs	r3, #1
 800d634:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1e7      	bne.n	800d614 <SAI_Disable+0x2c>

  return status;
 800d644:	7afb      	ldrb	r3, [r7, #11]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	20000000 	.word	0x20000000
 800d658:	95cbec1b 	.word	0x95cbec1b

0800d65c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d101      	bne.n	800d66e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	e095      	b.n	800d79a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d672:	2b00      	cmp	r3, #0
 800d674:	d108      	bne.n	800d688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d67e:	d009      	beq.n	800d694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	61da      	str	r2, [r3, #28]
 800d686:	e005      	b.n	800d694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d106      	bne.n	800d6b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7fa fc8a 	bl	8007fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2202      	movs	r2, #2
 800d6b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6d4:	d902      	bls.n	800d6dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	60fb      	str	r3, [r7, #12]
 800d6da:	e002      	b.n	800d6e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d6dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d6ea:	d007      	beq.n	800d6fc <HAL_SPI_Init+0xa0>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6f4:	d002      	beq.n	800d6fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d70c:	431a      	orrs	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	f003 0302 	and.w	r3, r3, #2
 800d716:	431a      	orrs	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	f003 0301 	and.w	r3, r3, #1
 800d720:	431a      	orrs	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d72a:	431a      	orrs	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	69db      	ldr	r3, [r3, #28]
 800d730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d734:	431a      	orrs	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a1b      	ldr	r3, [r3, #32]
 800d73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d73e:	ea42 0103 	orr.w	r1, r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d746:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	430a      	orrs	r2, r1
 800d750:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	699b      	ldr	r3, [r3, #24]
 800d756:	0c1b      	lsrs	r3, r3, #16
 800d758:	f003 0204 	and.w	r2, r3, #4
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d760:	f003 0310 	and.w	r3, r3, #16
 800d764:	431a      	orrs	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d76a:	f003 0308 	and.w	r3, r3, #8
 800d76e:	431a      	orrs	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d778:	ea42 0103 	orr.w	r1, r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	430a      	orrs	r2, r1
 800d788:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3710      	adds	r7, #16
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b082      	sub	sp, #8
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e01a      	b.n	800d7ea <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2202      	movs	r2, #2
 800d7b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7ca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7fa fc3f 	bl	8008050 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b088      	sub	sp, #32
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60f8      	str	r0, [r7, #12]
 800d7fa:	60b9      	str	r1, [r7, #8]
 800d7fc:	603b      	str	r3, [r7, #0]
 800d7fe:	4613      	mov	r3, r2
 800d800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d101      	bne.n	800d814 <HAL_SPI_Transmit+0x22>
 800d810:	2302      	movs	r3, #2
 800d812:	e158      	b.n	800dac6 <HAL_SPI_Transmit+0x2d4>
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d81c:	f7fb fa08 	bl	8008c30 <HAL_GetTick>
 800d820:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d822:	88fb      	ldrh	r3, [r7, #6]
 800d824:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d002      	beq.n	800d838 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d832:	2302      	movs	r3, #2
 800d834:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d836:	e13d      	b.n	800dab4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d002      	beq.n	800d844 <HAL_SPI_Transmit+0x52>
 800d83e:	88fb      	ldrh	r3, [r7, #6]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d102      	bne.n	800d84a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d848:	e134      	b.n	800dab4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2203      	movs	r2, #3
 800d84e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2200      	movs	r2, #0
 800d856:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	68ba      	ldr	r2, [r7, #8]
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	88fa      	ldrh	r2, [r7, #6]
 800d862:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	88fa      	ldrh	r2, [r7, #6]
 800d868:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2200      	movs	r2, #0
 800d874:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2200      	movs	r2, #0
 800d87c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2200      	movs	r2, #0
 800d884:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2200      	movs	r2, #0
 800d88a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d894:	d10f      	bne.n	800d8b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d8a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d8b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c0:	2b40      	cmp	r3, #64	; 0x40
 800d8c2:	d007      	beq.n	800d8d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d8dc:	d94b      	bls.n	800d976 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <HAL_SPI_Transmit+0xfa>
 800d8e6:	8afb      	ldrh	r3, [r7, #22]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d13e      	bne.n	800d96a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f0:	881a      	ldrh	r2, [r3, #0]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fc:	1c9a      	adds	r2, r3, #2
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d906:	b29b      	uxth	r3, r3
 800d908:	3b01      	subs	r3, #1
 800d90a:	b29a      	uxth	r2, r3
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d910:	e02b      	b.n	800d96a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	f003 0302 	and.w	r3, r3, #2
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	d112      	bne.n	800d946 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d924:	881a      	ldrh	r2, [r3, #0]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d930:	1c9a      	adds	r2, r3, #2
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	3b01      	subs	r3, #1
 800d93e:	b29a      	uxth	r2, r3
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d944:	e011      	b.n	800d96a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d946:	f7fb f973 	bl	8008c30 <HAL_GetTick>
 800d94a:	4602      	mov	r2, r0
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	683a      	ldr	r2, [r7, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d803      	bhi.n	800d95e <HAL_SPI_Transmit+0x16c>
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d95c:	d102      	bne.n	800d964 <HAL_SPI_Transmit+0x172>
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d102      	bne.n	800d96a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800d964:	2303      	movs	r3, #3
 800d966:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d968:	e0a4      	b.n	800dab4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d96e:	b29b      	uxth	r3, r3
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1ce      	bne.n	800d912 <HAL_SPI_Transmit+0x120>
 800d974:	e07c      	b.n	800da70 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d002      	beq.n	800d984 <HAL_SPI_Transmit+0x192>
 800d97e:	8afb      	ldrh	r3, [r7, #22]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d170      	bne.n	800da66 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d988:	b29b      	uxth	r3, r3
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d912      	bls.n	800d9b4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d992:	881a      	ldrh	r2, [r3, #0]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99e:	1c9a      	adds	r2, r3, #2
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	3b02      	subs	r3, #2
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d9b2:	e058      	b.n	800da66 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	330c      	adds	r3, #12
 800d9be:	7812      	ldrb	r2, [r2, #0]
 800d9c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d9da:	e044      	b.n	800da66 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d12b      	bne.n	800da42 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d912      	bls.n	800da1a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f8:	881a      	ldrh	r2, [r3, #0]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da04:	1c9a      	adds	r2, r3, #2
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da0e:	b29b      	uxth	r3, r3
 800da10:	3b02      	subs	r3, #2
 800da12:	b29a      	uxth	r2, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da18:	e025      	b.n	800da66 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	330c      	adds	r3, #12
 800da24:	7812      	ldrb	r2, [r2, #0]
 800da26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2c:	1c5a      	adds	r2, r3, #1
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da36:	b29b      	uxth	r3, r3
 800da38:	3b01      	subs	r3, #1
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800da40:	e011      	b.n	800da66 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da42:	f7fb f8f5 	bl	8008c30 <HAL_GetTick>
 800da46:	4602      	mov	r2, r0
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	683a      	ldr	r2, [r7, #0]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d803      	bhi.n	800da5a <HAL_SPI_Transmit+0x268>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da58:	d102      	bne.n	800da60 <HAL_SPI_Transmit+0x26e>
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d102      	bne.n	800da66 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	77fb      	strb	r3, [r7, #31]
          goto error;
 800da64:	e026      	b.n	800dab4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1b5      	bne.n	800d9dc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da70:	69ba      	ldr	r2, [r7, #24]
 800da72:	6839      	ldr	r1, [r7, #0]
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 fce3 	bl	800e440 <SPI_EndRxTxTransaction>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2220      	movs	r2, #32
 800da84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10a      	bne.n	800daa4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da8e:	2300      	movs	r3, #0
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	613b      	str	r3, [r7, #16]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	613b      	str	r3, [r7, #16]
 800daa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800daac:	2301      	movs	r3, #1
 800daae:	77fb      	strb	r3, [r7, #31]
 800dab0:	e000      	b.n	800dab4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800dab2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dac4:	7ffb      	ldrb	r3, [r7, #31]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3720      	adds	r7, #32
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b088      	sub	sp, #32
 800dad2:	af02      	add	r7, sp, #8
 800dad4:	60f8      	str	r0, [r7, #12]
 800dad6:	60b9      	str	r1, [r7, #8]
 800dad8:	603b      	str	r3, [r7, #0]
 800dada:	4613      	mov	r3, r2
 800dadc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800daea:	d112      	bne.n	800db12 <HAL_SPI_Receive+0x44>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10e      	bne.n	800db12 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2204      	movs	r2, #4
 800daf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dafc:	88fa      	ldrh	r2, [r7, #6]
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	4613      	mov	r3, r2
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	68b9      	ldr	r1, [r7, #8]
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f000 f910 	bl	800dd2e <HAL_SPI_TransmitReceive>
 800db0e:	4603      	mov	r3, r0
 800db10:	e109      	b.n	800dd26 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d101      	bne.n	800db20 <HAL_SPI_Receive+0x52>
 800db1c:	2302      	movs	r3, #2
 800db1e:	e102      	b.n	800dd26 <HAL_SPI_Receive+0x258>
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db28:	f7fb f882 	bl	8008c30 <HAL_GetTick>
 800db2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b01      	cmp	r3, #1
 800db38:	d002      	beq.n	800db40 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800db3a:	2302      	movs	r3, #2
 800db3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800db3e:	e0e9      	b.n	800dd14 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d002      	beq.n	800db4c <HAL_SPI_Receive+0x7e>
 800db46:	88fb      	ldrh	r3, [r7, #6]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d102      	bne.n	800db52 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800db50:	e0e0      	b.n	800dd14 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2204      	movs	r2, #4
 800db56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	88fa      	ldrh	r2, [r7, #6]
 800db6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	88fa      	ldrh	r2, [r7, #6]
 800db72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2200      	movs	r2, #0
 800db80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2200      	movs	r2, #0
 800db92:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800db9c:	d908      	bls.n	800dbb0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	685a      	ldr	r2, [r3, #4]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dbac:	605a      	str	r2, [r3, #4]
 800dbae:	e007      	b.n	800dbc0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	685a      	ldr	r2, [r3, #4]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dbbe:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbc8:	d10f      	bne.n	800dbea <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dbd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dbe8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbf4:	2b40      	cmp	r3, #64	; 0x40
 800dbf6:	d007      	beq.n	800dc08 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc10:	d867      	bhi.n	800dce2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800dc12:	e030      	b.n	800dc76 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	f003 0301 	and.w	r3, r3, #1
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d117      	bne.n	800dc52 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f103 020c 	add.w	r2, r3, #12
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2e:	7812      	ldrb	r2, [r2, #0]
 800dc30:	b2d2      	uxtb	r2, r2
 800dc32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc38:	1c5a      	adds	r2, r3, #1
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	3b01      	subs	r3, #1
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dc50:	e011      	b.n	800dc76 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc52:	f7fa ffed 	bl	8008c30 <HAL_GetTick>
 800dc56:	4602      	mov	r2, r0
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	1ad3      	subs	r3, r2, r3
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d803      	bhi.n	800dc6a <HAL_SPI_Receive+0x19c>
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc68:	d102      	bne.n	800dc70 <HAL_SPI_Receive+0x1a2>
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800dc70:	2303      	movs	r3, #3
 800dc72:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dc74:	e04e      	b.n	800dd14 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d1c8      	bne.n	800dc14 <HAL_SPI_Receive+0x146>
 800dc82:	e034      	b.n	800dcee <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	f003 0301 	and.w	r3, r3, #1
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d115      	bne.n	800dcbe <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	68da      	ldr	r2, [r3, #12]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9c:	b292      	uxth	r2, r2
 800dc9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca4:	1c9a      	adds	r2, r3, #2
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dcbc:	e011      	b.n	800dce2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcbe:	f7fa ffb7 	bl	8008c30 <HAL_GetTick>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	683a      	ldr	r2, [r7, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d803      	bhi.n	800dcd6 <HAL_SPI_Receive+0x208>
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcd4:	d102      	bne.n	800dcdc <HAL_SPI_Receive+0x20e>
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d102      	bne.n	800dce2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800dcdc:	2303      	movs	r3, #3
 800dcde:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dce0:	e018      	b.n	800dd14 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d1ca      	bne.n	800dc84 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dcee:	693a      	ldr	r2, [r7, #16]
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f000 fb4c 	bl	800e390 <SPI_EndRxTransaction>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d002      	beq.n	800dd04 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2220      	movs	r2, #32
 800dd02:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	75fb      	strb	r3, [r7, #23]
 800dd10:	e000      	b.n	800dd14 <HAL_SPI_Receive+0x246>
  }

error :
 800dd12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dd24:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b08a      	sub	sp, #40	; 0x28
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	60f8      	str	r0, [r7, #12]
 800dd36:	60b9      	str	r1, [r7, #8]
 800dd38:	607a      	str	r2, [r7, #4]
 800dd3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d101      	bne.n	800dd54 <HAL_SPI_TransmitReceive+0x26>
 800dd50:	2302      	movs	r3, #2
 800dd52:	e1fb      	b.n	800e14c <HAL_SPI_TransmitReceive+0x41e>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2201      	movs	r2, #1
 800dd58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd5c:	f7fa ff68 	bl	8008c30 <HAL_GetTick>
 800dd60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dd68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800dd70:	887b      	ldrh	r3, [r7, #2]
 800dd72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800dd74:	887b      	ldrh	r3, [r7, #2]
 800dd76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dd78:	7efb      	ldrb	r3, [r7, #27]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d00e      	beq.n	800dd9c <HAL_SPI_TransmitReceive+0x6e>
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd84:	d106      	bne.n	800dd94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <HAL_SPI_TransmitReceive+0x66>
 800dd8e:	7efb      	ldrb	r3, [r7, #27]
 800dd90:	2b04      	cmp	r3, #4
 800dd92:	d003      	beq.n	800dd9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800dd94:	2302      	movs	r3, #2
 800dd96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dd9a:	e1cd      	b.n	800e138 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d005      	beq.n	800ddae <HAL_SPI_TransmitReceive+0x80>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <HAL_SPI_TransmitReceive+0x80>
 800dda8:	887b      	ldrh	r3, [r7, #2]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d103      	bne.n	800ddb6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800ddb4:	e1c0      	b.n	800e138 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	2b04      	cmp	r3, #4
 800ddc0:	d003      	beq.n	800ddca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2205      	movs	r2, #5
 800ddc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	887a      	ldrh	r2, [r7, #2]
 800ddda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	887a      	ldrh	r2, [r7, #2]
 800dde2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	887a      	ldrh	r2, [r7, #2]
 800ddf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	887a      	ldrh	r2, [r7, #2]
 800ddf6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de0c:	d802      	bhi.n	800de14 <HAL_SPI_TransmitReceive+0xe6>
 800de0e:	8a3b      	ldrh	r3, [r7, #16]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d908      	bls.n	800de26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	685a      	ldr	r2, [r3, #4]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800de22:	605a      	str	r2, [r3, #4]
 800de24:	e007      	b.n	800de36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de40:	2b40      	cmp	r3, #64	; 0x40
 800de42:	d007      	beq.n	800de54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de5c:	d97c      	bls.n	800df58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <HAL_SPI_TransmitReceive+0x13e>
 800de66:	8a7b      	ldrh	r3, [r7, #18]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d169      	bne.n	800df40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de70:	881a      	ldrh	r2, [r3, #0]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de7c:	1c9a      	adds	r2, r3, #2
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de86:	b29b      	uxth	r3, r3
 800de88:	3b01      	subs	r3, #1
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de90:	e056      	b.n	800df40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	f003 0302 	and.w	r3, r3, #2
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d11b      	bne.n	800ded8 <HAL_SPI_TransmitReceive+0x1aa>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d016      	beq.n	800ded8 <HAL_SPI_TransmitReceive+0x1aa>
 800deaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deac:	2b01      	cmp	r3, #1
 800deae:	d113      	bne.n	800ded8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb4:	881a      	ldrh	r2, [r3, #0]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec0:	1c9a      	adds	r2, r3, #2
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deca:	b29b      	uxth	r3, r3
 800decc:	3b01      	subs	r3, #1
 800dece:	b29a      	uxth	r2, r3
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ded4:	2300      	movs	r3, #0
 800ded6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	f003 0301 	and.w	r3, r3, #1
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d11c      	bne.n	800df20 <HAL_SPI_TransmitReceive+0x1f2>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800deec:	b29b      	uxth	r3, r3
 800deee:	2b00      	cmp	r3, #0
 800def0:	d016      	beq.n	800df20 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	68da      	ldr	r2, [r3, #12]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defc:	b292      	uxth	r2, r2
 800defe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df04:	1c9a      	adds	r2, r3, #2
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df10:	b29b      	uxth	r3, r3
 800df12:	3b01      	subs	r3, #1
 800df14:	b29a      	uxth	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800df1c:	2301      	movs	r3, #1
 800df1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800df20:	f7fa fe86 	bl	8008c30 <HAL_GetTick>
 800df24:	4602      	mov	r2, r0
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d807      	bhi.n	800df40 <HAL_SPI_TransmitReceive+0x212>
 800df30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df36:	d003      	beq.n	800df40 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800df38:	2303      	movs	r3, #3
 800df3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800df3e:	e0fb      	b.n	800e138 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df44:	b29b      	uxth	r3, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1a3      	bne.n	800de92 <HAL_SPI_TransmitReceive+0x164>
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df50:	b29b      	uxth	r3, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d19d      	bne.n	800de92 <HAL_SPI_TransmitReceive+0x164>
 800df56:	e0df      	b.n	800e118 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d003      	beq.n	800df68 <HAL_SPI_TransmitReceive+0x23a>
 800df60:	8a7b      	ldrh	r3, [r7, #18]
 800df62:	2b01      	cmp	r3, #1
 800df64:	f040 80cb 	bne.w	800e0fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d912      	bls.n	800df98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	881a      	ldrh	r2, [r3, #0]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df82:	1c9a      	adds	r2, r3, #2
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	3b02      	subs	r3, #2
 800df90:	b29a      	uxth	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	87da      	strh	r2, [r3, #62]	; 0x3e
 800df96:	e0b2      	b.n	800e0fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	330c      	adds	r3, #12
 800dfa2:	7812      	ldrb	r2, [r2, #0]
 800dfa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dfbe:	e09e      	b.n	800e0fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	689b      	ldr	r3, [r3, #8]
 800dfc6:	f003 0302 	and.w	r3, r3, #2
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	d134      	bne.n	800e038 <HAL_SPI_TransmitReceive+0x30a>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d02f      	beq.n	800e038 <HAL_SPI_TransmitReceive+0x30a>
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d12c      	bne.n	800e038 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d912      	bls.n	800e00e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfec:	881a      	ldrh	r2, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dff8:	1c9a      	adds	r2, r3, #2
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e002:	b29b      	uxth	r3, r3
 800e004:	3b02      	subs	r3, #2
 800e006:	b29a      	uxth	r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e00c:	e012      	b.n	800e034 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	330c      	adds	r3, #12
 800e018:	7812      	ldrb	r2, [r2, #0]
 800e01a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e020:	1c5a      	adds	r2, r3, #1
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	3b01      	subs	r3, #1
 800e02e:	b29a      	uxth	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e034:	2300      	movs	r3, #0
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b01      	cmp	r3, #1
 800e044:	d148      	bne.n	800e0d8 <HAL_SPI_TransmitReceive+0x3aa>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d042      	beq.n	800e0d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e058:	b29b      	uxth	r3, r3
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d923      	bls.n	800e0a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68da      	ldr	r2, [r3, #12]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e068:	b292      	uxth	r2, r2
 800e06a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e070:	1c9a      	adds	r2, r3, #2
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	3b02      	subs	r3, #2
 800e080:	b29a      	uxth	r2, r3
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e08e:	b29b      	uxth	r3, r3
 800e090:	2b01      	cmp	r3, #1
 800e092:	d81f      	bhi.n	800e0d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	685a      	ldr	r2, [r3, #4]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e0a2:	605a      	str	r2, [r3, #4]
 800e0a4:	e016      	b.n	800e0d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f103 020c 	add.w	r2, r3, #12
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b2:	7812      	ldrb	r2, [r2, #0]
 800e0b4:	b2d2      	uxtb	r2, r2
 800e0b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0bc:	1c5a      	adds	r2, r3, #1
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e0d8:	f7fa fdaa 	bl	8008c30 <HAL_GetTick>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d803      	bhi.n	800e0f0 <HAL_SPI_TransmitReceive+0x3c2>
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0ee:	d102      	bne.n	800e0f6 <HAL_SPI_TransmitReceive+0x3c8>
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d103      	bne.n	800e0fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e0fc:	e01c      	b.n	800e138 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e102:	b29b      	uxth	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	f47f af5b 	bne.w	800dfc0 <HAL_SPI_TransmitReceive+0x292>
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e110:	b29b      	uxth	r3, r3
 800e112:	2b00      	cmp	r3, #0
 800e114:	f47f af54 	bne.w	800dfc0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e118:	69fa      	ldr	r2, [r7, #28]
 800e11a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f000 f98f 	bl	800e440 <SPI_EndRxTxTransaction>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d006      	beq.n	800e136 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2220      	movs	r2, #32
 800e132:	661a      	str	r2, [r3, #96]	; 0x60
 800e134:	e000      	b.n	800e138 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3728      	adds	r7, #40	; 0x28
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b088      	sub	sp, #32
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	603b      	str	r3, [r7, #0]
 800e160:	4613      	mov	r3, r2
 800e162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e164:	f7fa fd64 	bl	8008c30 <HAL_GetTick>
 800e168:	4602      	mov	r2, r0
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	1a9b      	subs	r3, r3, r2
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	4413      	add	r3, r2
 800e172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e174:	f7fa fd5c 	bl	8008c30 <HAL_GetTick>
 800e178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e17a:	4b39      	ldr	r3, [pc, #228]	; (800e260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	015b      	lsls	r3, r3, #5
 800e180:	0d1b      	lsrs	r3, r3, #20
 800e182:	69fa      	ldr	r2, [r7, #28]
 800e184:	fb02 f303 	mul.w	r3, r2, r3
 800e188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e18a:	e054      	b.n	800e236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e192:	d050      	beq.n	800e236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e194:	f7fa fd4c 	bl	8008c30 <HAL_GetTick>
 800e198:	4602      	mov	r2, r0
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	69fa      	ldr	r2, [r7, #28]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d902      	bls.n	800e1aa <SPI_WaitFlagStateUntilTimeout+0x56>
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d13d      	bne.n	800e226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e1b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e1c2:	d111      	bne.n	800e1e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1cc:	d004      	beq.n	800e1d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e1d6:	d107      	bne.n	800e1e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1f0:	d10f      	bne.n	800e212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e200:	601a      	str	r2, [r3, #0]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2200      	movs	r2, #0
 800e21e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e222:	2303      	movs	r3, #3
 800e224:	e017      	b.n	800e256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d101      	bne.n	800e230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e22c:	2300      	movs	r3, #0
 800e22e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	3b01      	subs	r3, #1
 800e234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	689a      	ldr	r2, [r3, #8]
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	4013      	ands	r3, r2
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	429a      	cmp	r2, r3
 800e244:	bf0c      	ite	eq
 800e246:	2301      	moveq	r3, #1
 800e248:	2300      	movne	r3, #0
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	461a      	mov	r2, r3
 800e24e:	79fb      	ldrb	r3, [r7, #7]
 800e250:	429a      	cmp	r2, r3
 800e252:	d19b      	bne.n	800e18c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3720      	adds	r7, #32
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	20000000 	.word	0x20000000

0800e264 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08a      	sub	sp, #40	; 0x28
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e276:	f7fa fcdb 	bl	8008c30 <HAL_GetTick>
 800e27a:	4602      	mov	r2, r0
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	1a9b      	subs	r3, r3, r2
 800e280:	683a      	ldr	r2, [r7, #0]
 800e282:	4413      	add	r3, r2
 800e284:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800e286:	f7fa fcd3 	bl	8008c30 <HAL_GetTick>
 800e28a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	330c      	adds	r3, #12
 800e292:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e294:	4b3d      	ldr	r3, [pc, #244]	; (800e38c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	4613      	mov	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4413      	add	r3, r2
 800e29e:	00da      	lsls	r2, r3, #3
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	0d1b      	lsrs	r3, r3, #20
 800e2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a6:	fb02 f303 	mul.w	r3, r2, r3
 800e2aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e2ac:	e060      	b.n	800e370 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e2b4:	d107      	bne.n	800e2c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d104      	bne.n	800e2c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e2c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2cc:	d050      	beq.n	800e370 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e2ce:	f7fa fcaf 	bl	8008c30 <HAL_GetTick>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	6a3b      	ldr	r3, [r7, #32]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d902      	bls.n	800e2e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d13d      	bne.n	800e360 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685a      	ldr	r2, [r3, #4]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e2f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2fc:	d111      	bne.n	800e322 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e306:	d004      	beq.n	800e312 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e310:	d107      	bne.n	800e322 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e320:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e32a:	d10f      	bne.n	800e34c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e34a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2201      	movs	r2, #1
 800e350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2200      	movs	r2, #0
 800e358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e35c:	2303      	movs	r3, #3
 800e35e:	e010      	b.n	800e382 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d101      	bne.n	800e36a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e366:	2300      	movs	r3, #0
 800e368:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	3b01      	subs	r3, #1
 800e36e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	689a      	ldr	r2, [r3, #8]
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	4013      	ands	r3, r2
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d196      	bne.n	800e2ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3728      	adds	r7, #40	; 0x28
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	20000000 	.word	0x20000000

0800e390 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b086      	sub	sp, #24
 800e394:	af02      	add	r7, sp, #8
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3a4:	d111      	bne.n	800e3ca <SPI_EndRxTransaction+0x3a>
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3ae:	d004      	beq.n	800e3ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3b8:	d107      	bne.n	800e3ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	2180      	movs	r1, #128	; 0x80
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f7ff febd 	bl	800e154 <SPI_WaitFlagStateUntilTimeout>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d007      	beq.n	800e3f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3e4:	f043 0220 	orr.w	r2, r3, #32
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	e023      	b.n	800e438 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3f8:	d11d      	bne.n	800e436 <SPI_EndRxTransaction+0xa6>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e402:	d004      	beq.n	800e40e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e40c:	d113      	bne.n	800e436 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2200      	movs	r2, #0
 800e416:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f7ff ff22 	bl	800e264 <SPI_WaitFifoStateUntilTimeout>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d007      	beq.n	800e436 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e42a:	f043 0220 	orr.w	r2, r3, #32
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e432:	2303      	movs	r3, #3
 800e434:	e000      	b.n	800e438 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af02      	add	r7, sp, #8
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2200      	movs	r2, #0
 800e454:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f7ff ff03 	bl	800e264 <SPI_WaitFifoStateUntilTimeout>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d007      	beq.n	800e474 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e468:	f043 0220 	orr.w	r2, r3, #32
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e470:	2303      	movs	r3, #3
 800e472:	e027      	b.n	800e4c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	2200      	movs	r2, #0
 800e47c:	2180      	movs	r1, #128	; 0x80
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f7ff fe68 	bl	800e154 <SPI_WaitFlagStateUntilTimeout>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d007      	beq.n	800e49a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e48e:	f043 0220 	orr.w	r2, r3, #32
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e496:	2303      	movs	r3, #3
 800e498:	e014      	b.n	800e4c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f7ff fedc 	bl	800e264 <SPI_WaitFifoStateUntilTimeout>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d007      	beq.n	800e4c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4b6:	f043 0220 	orr.w	r2, r3, #32
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	e000      	b.n	800e4c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e4c2:	2300      	movs	r3, #0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e049      	b.n	800e572 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d106      	bne.n	800e4f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f841 	bl	800e57a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2202      	movs	r2, #2
 800e4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3304      	adds	r3, #4
 800e508:	4619      	mov	r1, r3
 800e50a:	4610      	mov	r0, r2
 800e50c:	f000 f9f8 	bl	800e900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2201      	movs	r2, #1
 800e514:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e57a:	b480      	push	{r7}
 800e57c:	b083      	sub	sp, #12
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e582:	bf00      	nop
 800e584:	370c      	adds	r7, #12
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
	...

0800e590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d001      	beq.n	800e5a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e04f      	b.n	800e648 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2202      	movs	r2, #2
 800e5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68da      	ldr	r2, [r3, #12]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f042 0201 	orr.w	r2, r2, #1
 800e5be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a23      	ldr	r2, [pc, #140]	; (800e654 <HAL_TIM_Base_Start_IT+0xc4>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d01d      	beq.n	800e606 <HAL_TIM_Base_Start_IT+0x76>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5d2:	d018      	beq.n	800e606 <HAL_TIM_Base_Start_IT+0x76>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a1f      	ldr	r2, [pc, #124]	; (800e658 <HAL_TIM_Base_Start_IT+0xc8>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d013      	beq.n	800e606 <HAL_TIM_Base_Start_IT+0x76>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4a1e      	ldr	r2, [pc, #120]	; (800e65c <HAL_TIM_Base_Start_IT+0xcc>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d00e      	beq.n	800e606 <HAL_TIM_Base_Start_IT+0x76>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a1c      	ldr	r2, [pc, #112]	; (800e660 <HAL_TIM_Base_Start_IT+0xd0>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d009      	beq.n	800e606 <HAL_TIM_Base_Start_IT+0x76>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a1b      	ldr	r2, [pc, #108]	; (800e664 <HAL_TIM_Base_Start_IT+0xd4>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d004      	beq.n	800e606 <HAL_TIM_Base_Start_IT+0x76>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4a19      	ldr	r2, [pc, #100]	; (800e668 <HAL_TIM_Base_Start_IT+0xd8>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d115      	bne.n	800e632 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	689a      	ldr	r2, [r3, #8]
 800e60c:	4b17      	ldr	r3, [pc, #92]	; (800e66c <HAL_TIM_Base_Start_IT+0xdc>)
 800e60e:	4013      	ands	r3, r2
 800e610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b06      	cmp	r3, #6
 800e616:	d015      	beq.n	800e644 <HAL_TIM_Base_Start_IT+0xb4>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e61e:	d011      	beq.n	800e644 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f042 0201 	orr.w	r2, r2, #1
 800e62e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e630:	e008      	b.n	800e644 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f042 0201 	orr.w	r2, r2, #1
 800e640:	601a      	str	r2, [r3, #0]
 800e642:	e000      	b.n	800e646 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e644:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3714      	adds	r7, #20
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	40012c00 	.word	0x40012c00
 800e658:	40000400 	.word	0x40000400
 800e65c:	40000800 	.word	0x40000800
 800e660:	40000c00 	.word	0x40000c00
 800e664:	40013400 	.word	0x40013400
 800e668:	40014000 	.word	0x40014000
 800e66c:	00010007 	.word	0x00010007

0800e670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	f003 0302 	and.w	r3, r3, #2
 800e682:	2b02      	cmp	r3, #2
 800e684:	d122      	bne.n	800e6cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	f003 0302 	and.w	r3, r3, #2
 800e690:	2b02      	cmp	r3, #2
 800e692:	d11b      	bne.n	800e6cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f06f 0202 	mvn.w	r2, #2
 800e69c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	699b      	ldr	r3, [r3, #24]
 800e6aa:	f003 0303 	and.w	r3, r3, #3
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d003      	beq.n	800e6ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 f905 	bl	800e8c2 <HAL_TIM_IC_CaptureCallback>
 800e6b8:	e005      	b.n	800e6c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f8f7 	bl	800e8ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 f908 	bl	800e8d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	691b      	ldr	r3, [r3, #16]
 800e6d2:	f003 0304 	and.w	r3, r3, #4
 800e6d6:	2b04      	cmp	r3, #4
 800e6d8:	d122      	bne.n	800e720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	f003 0304 	and.w	r3, r3, #4
 800e6e4:	2b04      	cmp	r3, #4
 800e6e6:	d11b      	bne.n	800e720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f06f 0204 	mvn.w	r2, #4
 800e6f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	699b      	ldr	r3, [r3, #24]
 800e6fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e702:	2b00      	cmp	r3, #0
 800e704:	d003      	beq.n	800e70e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f8db 	bl	800e8c2 <HAL_TIM_IC_CaptureCallback>
 800e70c:	e005      	b.n	800e71a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f8cd 	bl	800e8ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f8de 	bl	800e8d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	f003 0308 	and.w	r3, r3, #8
 800e72a:	2b08      	cmp	r3, #8
 800e72c:	d122      	bne.n	800e774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	f003 0308 	and.w	r3, r3, #8
 800e738:	2b08      	cmp	r3, #8
 800e73a:	d11b      	bne.n	800e774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f06f 0208 	mvn.w	r2, #8
 800e744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2204      	movs	r2, #4
 800e74a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	69db      	ldr	r3, [r3, #28]
 800e752:	f003 0303 	and.w	r3, r3, #3
 800e756:	2b00      	cmp	r3, #0
 800e758:	d003      	beq.n	800e762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f000 f8b1 	bl	800e8c2 <HAL_TIM_IC_CaptureCallback>
 800e760:	e005      	b.n	800e76e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 f8a3 	bl	800e8ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f8b4 	bl	800e8d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	f003 0310 	and.w	r3, r3, #16
 800e77e:	2b10      	cmp	r3, #16
 800e780:	d122      	bne.n	800e7c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	f003 0310 	and.w	r3, r3, #16
 800e78c:	2b10      	cmp	r3, #16
 800e78e:	d11b      	bne.n	800e7c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f06f 0210 	mvn.w	r2, #16
 800e798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2208      	movs	r2, #8
 800e79e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	69db      	ldr	r3, [r3, #28]
 800e7a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d003      	beq.n	800e7b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 f887 	bl	800e8c2 <HAL_TIM_IC_CaptureCallback>
 800e7b4:	e005      	b.n	800e7c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 f879 	bl	800e8ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 f88a 	bl	800e8d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d10e      	bne.n	800e7f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	f003 0301 	and.w	r3, r3, #1
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d107      	bne.n	800e7f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f06f 0201 	mvn.w	r2, #1
 800e7ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7f9 fa32 	bl	8007c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7fe:	2b80      	cmp	r3, #128	; 0x80
 800e800:	d10e      	bne.n	800e820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e80c:	2b80      	cmp	r3, #128	; 0x80
 800e80e:	d107      	bne.n	800e820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f914 	bl	800ea48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e82a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e82e:	d10e      	bne.n	800e84e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e83a:	2b80      	cmp	r3, #128	; 0x80
 800e83c:	d107      	bne.n	800e84e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f907 	bl	800ea5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	691b      	ldr	r3, [r3, #16]
 800e854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e858:	2b40      	cmp	r3, #64	; 0x40
 800e85a:	d10e      	bne.n	800e87a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e866:	2b40      	cmp	r3, #64	; 0x40
 800e868:	d107      	bne.n	800e87a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f838 	bl	800e8ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	f003 0320 	and.w	r3, r3, #32
 800e884:	2b20      	cmp	r3, #32
 800e886:	d10e      	bne.n	800e8a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	f003 0320 	and.w	r3, r3, #32
 800e892:	2b20      	cmp	r3, #32
 800e894:	d107      	bne.n	800e8a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f06f 0220 	mvn.w	r2, #32
 800e89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 f8c7 	bl	800ea34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e8a6:	bf00      	nop
 800e8a8:	3708      	adds	r7, #8
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8ae:	b480      	push	{r7}
 800e8b0:	b083      	sub	sp, #12
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8b6:	bf00      	nop
 800e8b8:	370c      	adds	r7, #12
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8c2:	b480      	push	{r7}
 800e8c4:	b083      	sub	sp, #12
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8ca:	bf00      	nop
 800e8cc:	370c      	adds	r7, #12
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b083      	sub	sp, #12
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8de:	bf00      	nop
 800e8e0:	370c      	adds	r7, #12
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr

0800e8ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8ea:	b480      	push	{r7}
 800e8ec:	b083      	sub	sp, #12
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e8f2:	bf00      	nop
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
	...

0800e900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a40      	ldr	r2, [pc, #256]	; (800ea14 <TIM_Base_SetConfig+0x114>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d013      	beq.n	800e940 <TIM_Base_SetConfig+0x40>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e91e:	d00f      	beq.n	800e940 <TIM_Base_SetConfig+0x40>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a3d      	ldr	r2, [pc, #244]	; (800ea18 <TIM_Base_SetConfig+0x118>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d00b      	beq.n	800e940 <TIM_Base_SetConfig+0x40>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a3c      	ldr	r2, [pc, #240]	; (800ea1c <TIM_Base_SetConfig+0x11c>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d007      	beq.n	800e940 <TIM_Base_SetConfig+0x40>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a3b      	ldr	r2, [pc, #236]	; (800ea20 <TIM_Base_SetConfig+0x120>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d003      	beq.n	800e940 <TIM_Base_SetConfig+0x40>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4a3a      	ldr	r2, [pc, #232]	; (800ea24 <TIM_Base_SetConfig+0x124>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d108      	bne.n	800e952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	68fa      	ldr	r2, [r7, #12]
 800e94e:	4313      	orrs	r3, r2
 800e950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a2f      	ldr	r2, [pc, #188]	; (800ea14 <TIM_Base_SetConfig+0x114>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d01f      	beq.n	800e99a <TIM_Base_SetConfig+0x9a>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e960:	d01b      	beq.n	800e99a <TIM_Base_SetConfig+0x9a>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a2c      	ldr	r2, [pc, #176]	; (800ea18 <TIM_Base_SetConfig+0x118>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d017      	beq.n	800e99a <TIM_Base_SetConfig+0x9a>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a2b      	ldr	r2, [pc, #172]	; (800ea1c <TIM_Base_SetConfig+0x11c>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d013      	beq.n	800e99a <TIM_Base_SetConfig+0x9a>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a2a      	ldr	r2, [pc, #168]	; (800ea20 <TIM_Base_SetConfig+0x120>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d00f      	beq.n	800e99a <TIM_Base_SetConfig+0x9a>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a29      	ldr	r2, [pc, #164]	; (800ea24 <TIM_Base_SetConfig+0x124>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d00b      	beq.n	800e99a <TIM_Base_SetConfig+0x9a>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4a28      	ldr	r2, [pc, #160]	; (800ea28 <TIM_Base_SetConfig+0x128>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d007      	beq.n	800e99a <TIM_Base_SetConfig+0x9a>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4a27      	ldr	r2, [pc, #156]	; (800ea2c <TIM_Base_SetConfig+0x12c>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d003      	beq.n	800e99a <TIM_Base_SetConfig+0x9a>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4a26      	ldr	r2, [pc, #152]	; (800ea30 <TIM_Base_SetConfig+0x130>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d108      	bne.n	800e9ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	695b      	ldr	r3, [r3, #20]
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	689a      	ldr	r2, [r3, #8]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a10      	ldr	r2, [pc, #64]	; (800ea14 <TIM_Base_SetConfig+0x114>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d00f      	beq.n	800e9f8 <TIM_Base_SetConfig+0xf8>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a12      	ldr	r2, [pc, #72]	; (800ea24 <TIM_Base_SetConfig+0x124>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d00b      	beq.n	800e9f8 <TIM_Base_SetConfig+0xf8>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a11      	ldr	r2, [pc, #68]	; (800ea28 <TIM_Base_SetConfig+0x128>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d007      	beq.n	800e9f8 <TIM_Base_SetConfig+0xf8>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a10      	ldr	r2, [pc, #64]	; (800ea2c <TIM_Base_SetConfig+0x12c>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d003      	beq.n	800e9f8 <TIM_Base_SetConfig+0xf8>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	4a0f      	ldr	r2, [pc, #60]	; (800ea30 <TIM_Base_SetConfig+0x130>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d103      	bne.n	800ea00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	691a      	ldr	r2, [r3, #16]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	615a      	str	r2, [r3, #20]
}
 800ea06:	bf00      	nop
 800ea08:	3714      	adds	r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop
 800ea14:	40012c00 	.word	0x40012c00
 800ea18:	40000400 	.word	0x40000400
 800ea1c:	40000800 	.word	0x40000800
 800ea20:	40000c00 	.word	0x40000c00
 800ea24:	40013400 	.word	0x40013400
 800ea28:	40014000 	.word	0x40014000
 800ea2c:	40014400 	.word	0x40014400
 800ea30:	40014800 	.word	0x40014800

0800ea34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea3c:	bf00      	nop
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea50:	bf00      	nop
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea64:	bf00      	nop
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d101      	bne.n	800ea82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e042      	b.n	800eb08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d106      	bne.n	800ea9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7f9 f97b 	bl	8007d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2224      	movs	r2, #36	; 0x24
 800ea9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f022 0201 	bic.w	r2, r2, #1
 800eab0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 fbfa 	bl	800f2ac <UART_SetConfig>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b01      	cmp	r3, #1
 800eabc:	d101      	bne.n	800eac2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eabe:	2301      	movs	r3, #1
 800eac0:	e022      	b.n	800eb08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 feee 	bl	800f8ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685a      	ldr	r2, [r3, #4]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	689a      	ldr	r2, [r3, #8]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eaee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f042 0201 	orr.w	r2, r2, #1
 800eafe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 ff75 	bl	800f9f0 <UART_CheckIdleState>
 800eb06:	4603      	mov	r3, r0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b08a      	sub	sp, #40	; 0x28
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb24:	2b20      	cmp	r3, #32
 800eb26:	d167      	bne.n	800ebf8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d002      	beq.n	800eb34 <HAL_UART_Transmit_DMA+0x24>
 800eb2e:	88fb      	ldrh	r3, [r7, #6]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d101      	bne.n	800eb38 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800eb34:	2301      	movs	r3, #1
 800eb36:	e060      	b.n	800ebfa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	88fa      	ldrh	r2, [r7, #6]
 800eb42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	88fa      	ldrh	r2, [r7, #6]
 800eb4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2221      	movs	r2, #33	; 0x21
 800eb5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d028      	beq.n	800ebb8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb6a:	4a26      	ldr	r2, [pc, #152]	; (800ec04 <HAL_UART_Transmit_DMA+0xf4>)
 800eb6c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb72:	4a25      	ldr	r2, [pc, #148]	; (800ec08 <HAL_UART_Transmit_DMA+0xf8>)
 800eb74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb7a:	4a24      	ldr	r2, [pc, #144]	; (800ec0c <HAL_UART_Transmit_DMA+0xfc>)
 800eb7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb82:	2200      	movs	r2, #0
 800eb84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb8e:	4619      	mov	r1, r3
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	3328      	adds	r3, #40	; 0x28
 800eb96:	461a      	mov	r2, r3
 800eb98:	88fb      	ldrh	r3, [r7, #6]
 800eb9a:	f7fa fa01 	bl	8008fa0 <HAL_DMA_Start_IT>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d009      	beq.n	800ebb8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2210      	movs	r2, #16
 800eba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2220      	movs	r2, #32
 800ebb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e020      	b.n	800ebfa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2240      	movs	r2, #64	; 0x40
 800ebbe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	e853 3f00 	ldrex	r3, [r3]
 800ebce:	613b      	str	r3, [r7, #16]
   return(result);
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebd6:	627b      	str	r3, [r7, #36]	; 0x24
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	3308      	adds	r3, #8
 800ebde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebe0:	623a      	str	r2, [r7, #32]
 800ebe2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe4:	69f9      	ldr	r1, [r7, #28]
 800ebe6:	6a3a      	ldr	r2, [r7, #32]
 800ebe8:	e841 2300 	strex	r3, r2, [r1]
 800ebec:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d1e5      	bne.n	800ebc0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e000      	b.n	800ebfa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ebf8:	2302      	movs	r3, #2
  }
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3728      	adds	r7, #40	; 0x28
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	0800fd61 	.word	0x0800fd61
 800ec08:	0800fdfb 	.word	0x0800fdfb
 800ec0c:	0800fe17 	.word	0x0800fe17

0800ec10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b0ba      	sub	sp, #232	; 0xe8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	69db      	ldr	r3, [r3, #28]
 800ec1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	689b      	ldr	r3, [r3, #8]
 800ec32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ec36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ec3a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ec3e:	4013      	ands	r3, r2
 800ec40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ec44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d11b      	bne.n	800ec84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec50:	f003 0320 	and.w	r3, r3, #32
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d015      	beq.n	800ec84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec5c:	f003 0320 	and.w	r3, r3, #32
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d105      	bne.n	800ec70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ec64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d009      	beq.n	800ec84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f000 82e3 	beq.w	800f240 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	4798      	blx	r3
      }
      return;
 800ec82:	e2dd      	b.n	800f240 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ec84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f000 8123 	beq.w	800eed4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ec8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ec92:	4b8d      	ldr	r3, [pc, #564]	; (800eec8 <HAL_UART_IRQHandler+0x2b8>)
 800ec94:	4013      	ands	r3, r2
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d106      	bne.n	800eca8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ec9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ec9e:	4b8b      	ldr	r3, [pc, #556]	; (800eecc <HAL_UART_IRQHandler+0x2bc>)
 800eca0:	4013      	ands	r3, r2
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f000 8116 	beq.w	800eed4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecac:	f003 0301 	and.w	r3, r3, #1
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d011      	beq.n	800ecd8 <HAL_UART_IRQHandler+0xc8>
 800ecb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00b      	beq.n	800ecd8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecce:	f043 0201 	orr.w	r2, r3, #1
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ecd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecdc:	f003 0302 	and.w	r3, r3, #2
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d011      	beq.n	800ed08 <HAL_UART_IRQHandler+0xf8>
 800ece4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00b      	beq.n	800ed08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2202      	movs	r2, #2
 800ecf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecfe:	f043 0204 	orr.w	r2, r3, #4
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed0c:	f003 0304 	and.w	r3, r3, #4
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d011      	beq.n	800ed38 <HAL_UART_IRQHandler+0x128>
 800ed14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed18:	f003 0301 	and.w	r3, r3, #1
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d00b      	beq.n	800ed38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	2204      	movs	r2, #4
 800ed26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed2e:	f043 0202 	orr.w	r2, r3, #2
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ed38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed3c:	f003 0308 	and.w	r3, r3, #8
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d017      	beq.n	800ed74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed48:	f003 0320 	and.w	r3, r3, #32
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d105      	bne.n	800ed5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ed50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed54:	4b5c      	ldr	r3, [pc, #368]	; (800eec8 <HAL_UART_IRQHandler+0x2b8>)
 800ed56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00b      	beq.n	800ed74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2208      	movs	r2, #8
 800ed62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed6a:	f043 0208 	orr.w	r2, r3, #8
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ed74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d012      	beq.n	800eda6 <HAL_UART_IRQHandler+0x196>
 800ed80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00c      	beq.n	800eda6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed9c:	f043 0220 	orr.w	r2, r3, #32
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edac:	2b00      	cmp	r3, #0
 800edae:	f000 8249 	beq.w	800f244 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800edb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edb6:	f003 0320 	and.w	r3, r3, #32
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d013      	beq.n	800ede6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800edbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edc2:	f003 0320 	and.w	r3, r3, #32
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d105      	bne.n	800edd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800edca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d007      	beq.n	800ede6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d003      	beq.n	800ede6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edfa:	2b40      	cmp	r3, #64	; 0x40
 800edfc:	d005      	beq.n	800ee0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800edfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d054      	beq.n	800eeb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 ff42 	bl	800fc94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	689b      	ldr	r3, [r3, #8]
 800ee16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee1a:	2b40      	cmp	r3, #64	; 0x40
 800ee1c:	d146      	bne.n	800eeac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3308      	adds	r3, #8
 800ee24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ee2c:	e853 3f00 	ldrex	r3, [r3]
 800ee30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ee34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ee38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	3308      	adds	r3, #8
 800ee46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ee4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ee4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ee56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee5a:	e841 2300 	strex	r3, r2, [r1]
 800ee5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ee62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1d9      	bne.n	800ee1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d017      	beq.n	800eea4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee7a:	4a15      	ldr	r2, [pc, #84]	; (800eed0 <HAL_UART_IRQHandler+0x2c0>)
 800ee7c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fa f962 	bl	800914e <HAL_DMA_Abort_IT>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d019      	beq.n	800eec4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ee9e:	4610      	mov	r0, r2
 800eea0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eea2:	e00f      	b.n	800eec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 f9eb 	bl	800f280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeaa:	e00b      	b.n	800eec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f9e7 	bl	800f280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eeb2:	e007      	b.n	800eec4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 f9e3 	bl	800f280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800eec2:	e1bf      	b.n	800f244 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eec4:	bf00      	nop
    return;
 800eec6:	e1bd      	b.n	800f244 <HAL_UART_IRQHandler+0x634>
 800eec8:	10000001 	.word	0x10000001
 800eecc:	04000120 	.word	0x04000120
 800eed0:	0800fe97 	.word	0x0800fe97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	f040 8153 	bne.w	800f184 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eee2:	f003 0310 	and.w	r3, r3, #16
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 814c 	beq.w	800f184 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eeec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eef0:	f003 0310 	and.w	r3, r3, #16
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f000 8145 	beq.w	800f184 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2210      	movs	r2, #16
 800ef00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef0c:	2b40      	cmp	r3, #64	; 0x40
 800ef0e:	f040 80bb 	bne.w	800f088 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ef20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f000 818f 	beq.w	800f248 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ef34:	429a      	cmp	r2, r3
 800ef36:	f080 8187 	bcs.w	800f248 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ef40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f003 0320 	and.w	r3, r3, #32
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f040 8087 	bne.w	800f066 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef64:	e853 3f00 	ldrex	r3, [r3]
 800ef68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ef6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ef86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ef8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ef92:	e841 2300 	strex	r3, r2, [r1]
 800ef96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ef9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d1da      	bne.n	800ef58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	3308      	adds	r3, #8
 800efa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efac:	e853 3f00 	ldrex	r3, [r3]
 800efb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800efb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efb4:	f023 0301 	bic.w	r3, r3, #1
 800efb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3308      	adds	r3, #8
 800efc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800efc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800efca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800efce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800efd2:	e841 2300 	strex	r3, r2, [r1]
 800efd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800efd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1e1      	bne.n	800efa2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	3308      	adds	r3, #8
 800efe4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800efe8:	e853 3f00 	ldrex	r3, [r3]
 800efec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800efee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	3308      	adds	r3, #8
 800effe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f002:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f004:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f006:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f008:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f00a:	e841 2300 	strex	r3, r2, [r1]
 800f00e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1e3      	bne.n	800efde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2220      	movs	r2, #32
 800f01a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f02c:	e853 3f00 	ldrex	r3, [r3]
 800f030:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f034:	f023 0310 	bic.w	r3, r3, #16
 800f038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	461a      	mov	r2, r3
 800f042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f046:	65bb      	str	r3, [r7, #88]	; 0x58
 800f048:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f04c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f04e:	e841 2300 	strex	r3, r2, [r1]
 800f052:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1e4      	bne.n	800f024 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f060:	4618      	mov	r0, r3
 800f062:	f7fa f818 	bl	8009096 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2202      	movs	r2, #2
 800f06a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f078:	b29b      	uxth	r3, r3
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	4619      	mov	r1, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 f907 	bl	800f294 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f086:	e0df      	b.n	800f248 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f094:	b29b      	uxth	r3, r3
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f000 80d1 	beq.w	800f24c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800f0aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 80cc 	beq.w	800f24c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0bc:	e853 3f00 	ldrex	r3, [r3]
 800f0c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f0c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f0d6:	647b      	str	r3, [r7, #68]	; 0x44
 800f0d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0de:	e841 2300 	strex	r3, r2, [r1]
 800f0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d1e4      	bne.n	800f0b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	3308      	adds	r3, #8
 800f0f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f4:	e853 3f00 	ldrex	r3, [r3]
 800f0f8:	623b      	str	r3, [r7, #32]
   return(result);
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f100:	f023 0301 	bic.w	r3, r3, #1
 800f104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	3308      	adds	r3, #8
 800f10e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f112:	633a      	str	r2, [r7, #48]	; 0x30
 800f114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f11a:	e841 2300 	strex	r3, r2, [r1]
 800f11e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f122:	2b00      	cmp	r3, #0
 800f124:	d1e1      	bne.n	800f0ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2220      	movs	r2, #32
 800f12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	e853 3f00 	ldrex	r3, [r3]
 800f146:	60fb      	str	r3, [r7, #12]
   return(result);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f023 0310 	bic.w	r3, r3, #16
 800f14e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	461a      	mov	r2, r3
 800f158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f15c:	61fb      	str	r3, [r7, #28]
 800f15e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f160:	69b9      	ldr	r1, [r7, #24]
 800f162:	69fa      	ldr	r2, [r7, #28]
 800f164:	e841 2300 	strex	r3, r2, [r1]
 800f168:	617b      	str	r3, [r7, #20]
   return(result);
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d1e4      	bne.n	800f13a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2202      	movs	r2, #2
 800f174:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 f889 	bl	800f294 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f182:	e063      	b.n	800f24c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d00e      	beq.n	800f1ae <HAL_UART_IRQHandler+0x59e>
 800f190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d008      	beq.n	800f1ae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f1a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	f000 feb6 	bl	800ff18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1ac:	e051      	b.n	800f252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d014      	beq.n	800f1e4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d105      	bne.n	800f1d2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f1c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d008      	beq.n	800f1e4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d03a      	beq.n	800f250 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	4798      	blx	r3
    }
    return;
 800f1e2:	e035      	b.n	800f250 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d009      	beq.n	800f204 <HAL_UART_IRQHandler+0x5f4>
 800f1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d003      	beq.n	800f204 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 fe60 	bl	800fec2 <UART_EndTransmit_IT>
    return;
 800f202:	e026      	b.n	800f252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d009      	beq.n	800f224 <HAL_UART_IRQHandler+0x614>
 800f210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d003      	beq.n	800f224 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fe8f 	bl	800ff40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f222:	e016      	b.n	800f252 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d010      	beq.n	800f252 <HAL_UART_IRQHandler+0x642>
 800f230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f234:	2b00      	cmp	r3, #0
 800f236:	da0c      	bge.n	800f252 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fe77 	bl	800ff2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f23e:	e008      	b.n	800f252 <HAL_UART_IRQHandler+0x642>
      return;
 800f240:	bf00      	nop
 800f242:	e006      	b.n	800f252 <HAL_UART_IRQHandler+0x642>
    return;
 800f244:	bf00      	nop
 800f246:	e004      	b.n	800f252 <HAL_UART_IRQHandler+0x642>
      return;
 800f248:	bf00      	nop
 800f24a:	e002      	b.n	800f252 <HAL_UART_IRQHandler+0x642>
      return;
 800f24c:	bf00      	nop
 800f24e:	e000      	b.n	800f252 <HAL_UART_IRQHandler+0x642>
    return;
 800f250:	bf00      	nop
  }
}
 800f252:	37e8      	adds	r7, #232	; 0xe8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f260:	bf00      	nop
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr

0800f26c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f288:	bf00      	nop
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	460b      	mov	r3, r1
 800f29e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2b0:	b08c      	sub	sp, #48	; 0x30
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	689a      	ldr	r2, [r3, #8]
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	431a      	orrs	r2, r3
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	695b      	ldr	r3, [r3, #20]
 800f2ca:	431a      	orrs	r2, r3
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	69db      	ldr	r3, [r3, #28]
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	4baa      	ldr	r3, [pc, #680]	; (800f584 <UART_SetConfig+0x2d8>)
 800f2dc:	4013      	ands	r3, r2
 800f2de:	697a      	ldr	r2, [r7, #20]
 800f2e0:	6812      	ldr	r2, [r2, #0]
 800f2e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2e4:	430b      	orrs	r3, r1
 800f2e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	68da      	ldr	r2, [r3, #12]
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	430a      	orrs	r2, r1
 800f2fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	699b      	ldr	r3, [r3, #24]
 800f302:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a9f      	ldr	r2, [pc, #636]	; (800f588 <UART_SetConfig+0x2dc>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d004      	beq.n	800f318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	6a1b      	ldr	r3, [r3, #32]
 800f312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f314:	4313      	orrs	r3, r2
 800f316:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	689b      	ldr	r3, [r3, #8]
 800f31e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f322:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f326:	697a      	ldr	r2, [r7, #20]
 800f328:	6812      	ldr	r2, [r2, #0]
 800f32a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f32c:	430b      	orrs	r3, r1
 800f32e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f336:	f023 010f 	bic.w	r1, r3, #15
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	430a      	orrs	r2, r1
 800f344:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a90      	ldr	r2, [pc, #576]	; (800f58c <UART_SetConfig+0x2e0>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d125      	bne.n	800f39c <UART_SetConfig+0xf0>
 800f350:	4b8f      	ldr	r3, [pc, #572]	; (800f590 <UART_SetConfig+0x2e4>)
 800f352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f356:	f003 0303 	and.w	r3, r3, #3
 800f35a:	2b03      	cmp	r3, #3
 800f35c:	d81a      	bhi.n	800f394 <UART_SetConfig+0xe8>
 800f35e:	a201      	add	r2, pc, #4	; (adr r2, 800f364 <UART_SetConfig+0xb8>)
 800f360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f364:	0800f375 	.word	0x0800f375
 800f368:	0800f385 	.word	0x0800f385
 800f36c:	0800f37d 	.word	0x0800f37d
 800f370:	0800f38d 	.word	0x0800f38d
 800f374:	2301      	movs	r3, #1
 800f376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f37a:	e116      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f37c:	2302      	movs	r3, #2
 800f37e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f382:	e112      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f384:	2304      	movs	r3, #4
 800f386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f38a:	e10e      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f38c:	2308      	movs	r3, #8
 800f38e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f392:	e10a      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f394:	2310      	movs	r3, #16
 800f396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f39a:	e106      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a7c      	ldr	r2, [pc, #496]	; (800f594 <UART_SetConfig+0x2e8>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d138      	bne.n	800f418 <UART_SetConfig+0x16c>
 800f3a6:	4b7a      	ldr	r3, [pc, #488]	; (800f590 <UART_SetConfig+0x2e4>)
 800f3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3ac:	f003 030c 	and.w	r3, r3, #12
 800f3b0:	2b0c      	cmp	r3, #12
 800f3b2:	d82d      	bhi.n	800f410 <UART_SetConfig+0x164>
 800f3b4:	a201      	add	r2, pc, #4	; (adr r2, 800f3bc <UART_SetConfig+0x110>)
 800f3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3ba:	bf00      	nop
 800f3bc:	0800f3f1 	.word	0x0800f3f1
 800f3c0:	0800f411 	.word	0x0800f411
 800f3c4:	0800f411 	.word	0x0800f411
 800f3c8:	0800f411 	.word	0x0800f411
 800f3cc:	0800f401 	.word	0x0800f401
 800f3d0:	0800f411 	.word	0x0800f411
 800f3d4:	0800f411 	.word	0x0800f411
 800f3d8:	0800f411 	.word	0x0800f411
 800f3dc:	0800f3f9 	.word	0x0800f3f9
 800f3e0:	0800f411 	.word	0x0800f411
 800f3e4:	0800f411 	.word	0x0800f411
 800f3e8:	0800f411 	.word	0x0800f411
 800f3ec:	0800f409 	.word	0x0800f409
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3f6:	e0d8      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f3f8:	2302      	movs	r3, #2
 800f3fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f3fe:	e0d4      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f400:	2304      	movs	r3, #4
 800f402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f406:	e0d0      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f408:	2308      	movs	r3, #8
 800f40a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f40e:	e0cc      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f410:	2310      	movs	r3, #16
 800f412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f416:	e0c8      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a5e      	ldr	r2, [pc, #376]	; (800f598 <UART_SetConfig+0x2ec>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d125      	bne.n	800f46e <UART_SetConfig+0x1c2>
 800f422:	4b5b      	ldr	r3, [pc, #364]	; (800f590 <UART_SetConfig+0x2e4>)
 800f424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f428:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f42c:	2b30      	cmp	r3, #48	; 0x30
 800f42e:	d016      	beq.n	800f45e <UART_SetConfig+0x1b2>
 800f430:	2b30      	cmp	r3, #48	; 0x30
 800f432:	d818      	bhi.n	800f466 <UART_SetConfig+0x1ba>
 800f434:	2b20      	cmp	r3, #32
 800f436:	d00a      	beq.n	800f44e <UART_SetConfig+0x1a2>
 800f438:	2b20      	cmp	r3, #32
 800f43a:	d814      	bhi.n	800f466 <UART_SetConfig+0x1ba>
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d002      	beq.n	800f446 <UART_SetConfig+0x19a>
 800f440:	2b10      	cmp	r3, #16
 800f442:	d008      	beq.n	800f456 <UART_SetConfig+0x1aa>
 800f444:	e00f      	b.n	800f466 <UART_SetConfig+0x1ba>
 800f446:	2300      	movs	r3, #0
 800f448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f44c:	e0ad      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f44e:	2302      	movs	r3, #2
 800f450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f454:	e0a9      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f456:	2304      	movs	r3, #4
 800f458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f45c:	e0a5      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f45e:	2308      	movs	r3, #8
 800f460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f464:	e0a1      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f466:	2310      	movs	r3, #16
 800f468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f46c:	e09d      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a4a      	ldr	r2, [pc, #296]	; (800f59c <UART_SetConfig+0x2f0>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d125      	bne.n	800f4c4 <UART_SetConfig+0x218>
 800f478:	4b45      	ldr	r3, [pc, #276]	; (800f590 <UART_SetConfig+0x2e4>)
 800f47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f47e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f482:	2bc0      	cmp	r3, #192	; 0xc0
 800f484:	d016      	beq.n	800f4b4 <UART_SetConfig+0x208>
 800f486:	2bc0      	cmp	r3, #192	; 0xc0
 800f488:	d818      	bhi.n	800f4bc <UART_SetConfig+0x210>
 800f48a:	2b80      	cmp	r3, #128	; 0x80
 800f48c:	d00a      	beq.n	800f4a4 <UART_SetConfig+0x1f8>
 800f48e:	2b80      	cmp	r3, #128	; 0x80
 800f490:	d814      	bhi.n	800f4bc <UART_SetConfig+0x210>
 800f492:	2b00      	cmp	r3, #0
 800f494:	d002      	beq.n	800f49c <UART_SetConfig+0x1f0>
 800f496:	2b40      	cmp	r3, #64	; 0x40
 800f498:	d008      	beq.n	800f4ac <UART_SetConfig+0x200>
 800f49a:	e00f      	b.n	800f4bc <UART_SetConfig+0x210>
 800f49c:	2300      	movs	r3, #0
 800f49e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4a2:	e082      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f4a4:	2302      	movs	r3, #2
 800f4a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4aa:	e07e      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f4ac:	2304      	movs	r3, #4
 800f4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4b2:	e07a      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f4b4:	2308      	movs	r3, #8
 800f4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4ba:	e076      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f4bc:	2310      	movs	r3, #16
 800f4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f4c2:	e072      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a35      	ldr	r2, [pc, #212]	; (800f5a0 <UART_SetConfig+0x2f4>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d12a      	bne.n	800f524 <UART_SetConfig+0x278>
 800f4ce:	4b30      	ldr	r3, [pc, #192]	; (800f590 <UART_SetConfig+0x2e4>)
 800f4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f4d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4dc:	d01a      	beq.n	800f514 <UART_SetConfig+0x268>
 800f4de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4e2:	d81b      	bhi.n	800f51c <UART_SetConfig+0x270>
 800f4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4e8:	d00c      	beq.n	800f504 <UART_SetConfig+0x258>
 800f4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4ee:	d815      	bhi.n	800f51c <UART_SetConfig+0x270>
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d003      	beq.n	800f4fc <UART_SetConfig+0x250>
 800f4f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4f8:	d008      	beq.n	800f50c <UART_SetConfig+0x260>
 800f4fa:	e00f      	b.n	800f51c <UART_SetConfig+0x270>
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f502:	e052      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f504:	2302      	movs	r3, #2
 800f506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f50a:	e04e      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f50c:	2304      	movs	r3, #4
 800f50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f512:	e04a      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f514:	2308      	movs	r3, #8
 800f516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f51a:	e046      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f51c:	2310      	movs	r3, #16
 800f51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f522:	e042      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4a17      	ldr	r2, [pc, #92]	; (800f588 <UART_SetConfig+0x2dc>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d13a      	bne.n	800f5a4 <UART_SetConfig+0x2f8>
 800f52e:	4b18      	ldr	r3, [pc, #96]	; (800f590 <UART_SetConfig+0x2e4>)
 800f530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f538:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f53c:	d01a      	beq.n	800f574 <UART_SetConfig+0x2c8>
 800f53e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f542:	d81b      	bhi.n	800f57c <UART_SetConfig+0x2d0>
 800f544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f548:	d00c      	beq.n	800f564 <UART_SetConfig+0x2b8>
 800f54a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f54e:	d815      	bhi.n	800f57c <UART_SetConfig+0x2d0>
 800f550:	2b00      	cmp	r3, #0
 800f552:	d003      	beq.n	800f55c <UART_SetConfig+0x2b0>
 800f554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f558:	d008      	beq.n	800f56c <UART_SetConfig+0x2c0>
 800f55a:	e00f      	b.n	800f57c <UART_SetConfig+0x2d0>
 800f55c:	2300      	movs	r3, #0
 800f55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f562:	e022      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f564:	2302      	movs	r3, #2
 800f566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f56a:	e01e      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f56c:	2304      	movs	r3, #4
 800f56e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f572:	e01a      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f574:	2308      	movs	r3, #8
 800f576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f57a:	e016      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f57c:	2310      	movs	r3, #16
 800f57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f582:	e012      	b.n	800f5aa <UART_SetConfig+0x2fe>
 800f584:	cfff69f3 	.word	0xcfff69f3
 800f588:	40008000 	.word	0x40008000
 800f58c:	40013800 	.word	0x40013800
 800f590:	40021000 	.word	0x40021000
 800f594:	40004400 	.word	0x40004400
 800f598:	40004800 	.word	0x40004800
 800f59c:	40004c00 	.word	0x40004c00
 800f5a0:	40005000 	.word	0x40005000
 800f5a4:	2310      	movs	r3, #16
 800f5a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4ab0      	ldr	r2, [pc, #704]	; (800f870 <UART_SetConfig+0x5c4>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	f040 809b 	bne.w	800f6ec <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f5b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f5ba:	2b08      	cmp	r3, #8
 800f5bc:	d827      	bhi.n	800f60e <UART_SetConfig+0x362>
 800f5be:	a201      	add	r2, pc, #4	; (adr r2, 800f5c4 <UART_SetConfig+0x318>)
 800f5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c4:	0800f5e9 	.word	0x0800f5e9
 800f5c8:	0800f5f1 	.word	0x0800f5f1
 800f5cc:	0800f5f9 	.word	0x0800f5f9
 800f5d0:	0800f60f 	.word	0x0800f60f
 800f5d4:	0800f5ff 	.word	0x0800f5ff
 800f5d8:	0800f60f 	.word	0x0800f60f
 800f5dc:	0800f60f 	.word	0x0800f60f
 800f5e0:	0800f60f 	.word	0x0800f60f
 800f5e4:	0800f607 	.word	0x0800f607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5e8:	f7fb fb2c 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800f5ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f5ee:	e014      	b.n	800f61a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5f0:	f7fb fb3c 	bl	800ac6c <HAL_RCC_GetPCLK2Freq>
 800f5f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f5f6:	e010      	b.n	800f61a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f5f8:	4b9e      	ldr	r3, [pc, #632]	; (800f874 <UART_SetConfig+0x5c8>)
 800f5fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f5fc:	e00d      	b.n	800f61a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5fe:	f7fb fa6f 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800f602:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f604:	e009      	b.n	800f61a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f60a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f60c:	e005      	b.n	800f61a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800f60e:	2300      	movs	r3, #0
 800f610:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f612:	2301      	movs	r3, #1
 800f614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f618:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f000 8130 	beq.w	800f882 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f626:	4a94      	ldr	r2, [pc, #592]	; (800f878 <UART_SetConfig+0x5cc>)
 800f628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f62c:	461a      	mov	r2, r3
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	fbb3 f3f2 	udiv	r3, r3, r2
 800f634:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	685a      	ldr	r2, [r3, #4]
 800f63a:	4613      	mov	r3, r2
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	4413      	add	r3, r2
 800f640:	69ba      	ldr	r2, [r7, #24]
 800f642:	429a      	cmp	r2, r3
 800f644:	d305      	bcc.n	800f652 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f64c:	69ba      	ldr	r2, [r7, #24]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d903      	bls.n	800f65a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800f652:	2301      	movs	r3, #1
 800f654:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f658:	e113      	b.n	800f882 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65c:	2200      	movs	r2, #0
 800f65e:	60bb      	str	r3, [r7, #8]
 800f660:	60fa      	str	r2, [r7, #12]
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f666:	4a84      	ldr	r2, [pc, #528]	; (800f878 <UART_SetConfig+0x5cc>)
 800f668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	2200      	movs	r2, #0
 800f670:	603b      	str	r3, [r7, #0]
 800f672:	607a      	str	r2, [r7, #4]
 800f674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f67c:	f7f0 fde2 	bl	8000244 <__aeabi_uldivmod>
 800f680:	4602      	mov	r2, r0
 800f682:	460b      	mov	r3, r1
 800f684:	4610      	mov	r0, r2
 800f686:	4619      	mov	r1, r3
 800f688:	f04f 0200 	mov.w	r2, #0
 800f68c:	f04f 0300 	mov.w	r3, #0
 800f690:	020b      	lsls	r3, r1, #8
 800f692:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f696:	0202      	lsls	r2, r0, #8
 800f698:	6979      	ldr	r1, [r7, #20]
 800f69a:	6849      	ldr	r1, [r1, #4]
 800f69c:	0849      	lsrs	r1, r1, #1
 800f69e:	2000      	movs	r0, #0
 800f6a0:	460c      	mov	r4, r1
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	eb12 0804 	adds.w	r8, r2, r4
 800f6a8:	eb43 0905 	adc.w	r9, r3, r5
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	469a      	mov	sl, r3
 800f6b4:	4693      	mov	fp, r2
 800f6b6:	4652      	mov	r2, sl
 800f6b8:	465b      	mov	r3, fp
 800f6ba:	4640      	mov	r0, r8
 800f6bc:	4649      	mov	r1, r9
 800f6be:	f7f0 fdc1 	bl	8000244 <__aeabi_uldivmod>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f6ca:	6a3b      	ldr	r3, [r7, #32]
 800f6cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f6d0:	d308      	bcc.n	800f6e4 <UART_SetConfig+0x438>
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6d8:	d204      	bcs.n	800f6e4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	6a3a      	ldr	r2, [r7, #32]
 800f6e0:	60da      	str	r2, [r3, #12]
 800f6e2:	e0ce      	b.n	800f882 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f6ea:	e0ca      	b.n	800f882 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	69db      	ldr	r3, [r3, #28]
 800f6f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6f4:	d166      	bne.n	800f7c4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800f6f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f6fa:	2b08      	cmp	r3, #8
 800f6fc:	d827      	bhi.n	800f74e <UART_SetConfig+0x4a2>
 800f6fe:	a201      	add	r2, pc, #4	; (adr r2, 800f704 <UART_SetConfig+0x458>)
 800f700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f704:	0800f729 	.word	0x0800f729
 800f708:	0800f731 	.word	0x0800f731
 800f70c:	0800f739 	.word	0x0800f739
 800f710:	0800f74f 	.word	0x0800f74f
 800f714:	0800f73f 	.word	0x0800f73f
 800f718:	0800f74f 	.word	0x0800f74f
 800f71c:	0800f74f 	.word	0x0800f74f
 800f720:	0800f74f 	.word	0x0800f74f
 800f724:	0800f747 	.word	0x0800f747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f728:	f7fb fa8c 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800f72c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f72e:	e014      	b.n	800f75a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f730:	f7fb fa9c 	bl	800ac6c <HAL_RCC_GetPCLK2Freq>
 800f734:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f736:	e010      	b.n	800f75a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f738:	4b4e      	ldr	r3, [pc, #312]	; (800f874 <UART_SetConfig+0x5c8>)
 800f73a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f73c:	e00d      	b.n	800f75a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f73e:	f7fb f9cf 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800f742:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f744:	e009      	b.n	800f75a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f74a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f74c:	e005      	b.n	800f75a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800f74e:	2300      	movs	r3, #0
 800f750:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f752:	2301      	movs	r3, #1
 800f754:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	f000 8090 	beq.w	800f882 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f766:	4a44      	ldr	r2, [pc, #272]	; (800f878 <UART_SetConfig+0x5cc>)
 800f768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f76c:	461a      	mov	r2, r3
 800f76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f770:	fbb3 f3f2 	udiv	r3, r3, r2
 800f774:	005a      	lsls	r2, r3, #1
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	085b      	lsrs	r3, r3, #1
 800f77c:	441a      	add	r2, r3
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	fbb2 f3f3 	udiv	r3, r2, r3
 800f786:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f788:	6a3b      	ldr	r3, [r7, #32]
 800f78a:	2b0f      	cmp	r3, #15
 800f78c:	d916      	bls.n	800f7bc <UART_SetConfig+0x510>
 800f78e:	6a3b      	ldr	r3, [r7, #32]
 800f790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f794:	d212      	bcs.n	800f7bc <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f796:	6a3b      	ldr	r3, [r7, #32]
 800f798:	b29b      	uxth	r3, r3
 800f79a:	f023 030f 	bic.w	r3, r3, #15
 800f79e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f7a0:	6a3b      	ldr	r3, [r7, #32]
 800f7a2:	085b      	lsrs	r3, r3, #1
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	f003 0307 	and.w	r3, r3, #7
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	8bfb      	ldrh	r3, [r7, #30]
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	8bfa      	ldrh	r2, [r7, #30]
 800f7b8:	60da      	str	r2, [r3, #12]
 800f7ba:	e062      	b.n	800f882 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f7c2:	e05e      	b.n	800f882 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f7c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f7c8:	2b08      	cmp	r3, #8
 800f7ca:	d828      	bhi.n	800f81e <UART_SetConfig+0x572>
 800f7cc:	a201      	add	r2, pc, #4	; (adr r2, 800f7d4 <UART_SetConfig+0x528>)
 800f7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d2:	bf00      	nop
 800f7d4:	0800f7f9 	.word	0x0800f7f9
 800f7d8:	0800f801 	.word	0x0800f801
 800f7dc:	0800f809 	.word	0x0800f809
 800f7e0:	0800f81f 	.word	0x0800f81f
 800f7e4:	0800f80f 	.word	0x0800f80f
 800f7e8:	0800f81f 	.word	0x0800f81f
 800f7ec:	0800f81f 	.word	0x0800f81f
 800f7f0:	0800f81f 	.word	0x0800f81f
 800f7f4:	0800f817 	.word	0x0800f817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7f8:	f7fb fa24 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800f7fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f7fe:	e014      	b.n	800f82a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f800:	f7fb fa34 	bl	800ac6c <HAL_RCC_GetPCLK2Freq>
 800f804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f806:	e010      	b.n	800f82a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f808:	4b1a      	ldr	r3, [pc, #104]	; (800f874 <UART_SetConfig+0x5c8>)
 800f80a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f80c:	e00d      	b.n	800f82a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f80e:	f7fb f967 	bl	800aae0 <HAL_RCC_GetSysClockFreq>
 800f812:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f814:	e009      	b.n	800f82a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f81a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f81c:	e005      	b.n	800f82a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800f81e:	2300      	movs	r3, #0
 800f820:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f822:	2301      	movs	r3, #1
 800f824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f828:	bf00      	nop
    }

    if (pclk != 0U)
 800f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d028      	beq.n	800f882 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f834:	4a10      	ldr	r2, [pc, #64]	; (800f878 <UART_SetConfig+0x5cc>)
 800f836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f83a:	461a      	mov	r2, r3
 800f83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	085b      	lsrs	r3, r3, #1
 800f848:	441a      	add	r2, r3
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f852:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f854:	6a3b      	ldr	r3, [r7, #32]
 800f856:	2b0f      	cmp	r3, #15
 800f858:	d910      	bls.n	800f87c <UART_SetConfig+0x5d0>
 800f85a:	6a3b      	ldr	r3, [r7, #32]
 800f85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f860:	d20c      	bcs.n	800f87c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f862:	6a3b      	ldr	r3, [r7, #32]
 800f864:	b29a      	uxth	r2, r3
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	60da      	str	r2, [r3, #12]
 800f86c:	e009      	b.n	800f882 <UART_SetConfig+0x5d6>
 800f86e:	bf00      	nop
 800f870:	40008000 	.word	0x40008000
 800f874:	00f42400 	.word	0x00f42400
 800f878:	0801343c 	.word	0x0801343c
      }
      else
      {
        ret = HAL_ERROR;
 800f87c:	2301      	movs	r3, #1
 800f87e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	2201      	movs	r2, #1
 800f886:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	2201      	movs	r2, #1
 800f88e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	2200      	movs	r2, #0
 800f896:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	2200      	movs	r2, #0
 800f89c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f89e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3730      	adds	r7, #48	; 0x30
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f8ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8b8:	f003 0301 	and.w	r3, r3, #1
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00a      	beq.n	800f8d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	430a      	orrs	r2, r1
 800f8d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8da:	f003 0302 	and.w	r3, r3, #2
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00a      	beq.n	800f8f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	430a      	orrs	r2, r1
 800f8f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8fc:	f003 0304 	and.w	r3, r3, #4
 800f900:	2b00      	cmp	r3, #0
 800f902:	d00a      	beq.n	800f91a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	430a      	orrs	r2, r1
 800f918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f91e:	f003 0308 	and.w	r3, r3, #8
 800f922:	2b00      	cmp	r3, #0
 800f924:	d00a      	beq.n	800f93c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	430a      	orrs	r2, r1
 800f93a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f940:	f003 0310 	and.w	r3, r3, #16
 800f944:	2b00      	cmp	r3, #0
 800f946:	d00a      	beq.n	800f95e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	430a      	orrs	r2, r1
 800f95c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f962:	f003 0320 	and.w	r3, r3, #32
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00a      	beq.n	800f980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	430a      	orrs	r2, r1
 800f97e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d01a      	beq.n	800f9c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	430a      	orrs	r2, r1
 800f9a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9aa:	d10a      	bne.n	800f9c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	430a      	orrs	r2, r1
 800f9c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00a      	beq.n	800f9e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	430a      	orrs	r2, r1
 800f9e2:	605a      	str	r2, [r3, #4]
  }
}
 800f9e4:	bf00      	nop
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b098      	sub	sp, #96	; 0x60
 800f9f4:	af02      	add	r7, sp, #8
 800f9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa00:	f7f9 f916 	bl	8008c30 <HAL_GetTick>
 800fa04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f003 0308 	and.w	r3, r3, #8
 800fa10:	2b08      	cmp	r3, #8
 800fa12:	d12f      	bne.n	800fa74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f000 f88e 	bl	800fb44 <UART_WaitOnFlagUntilTimeout>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d022      	beq.n	800fa74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa36:	e853 3f00 	ldrex	r3, [r3]
 800fa3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fa3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa42:	653b      	str	r3, [r7, #80]	; 0x50
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa4c:	647b      	str	r3, [r7, #68]	; 0x44
 800fa4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa54:	e841 2300 	strex	r3, r2, [r1]
 800fa58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d1e6      	bne.n	800fa2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2220      	movs	r2, #32
 800fa64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa70:	2303      	movs	r3, #3
 800fa72:	e063      	b.n	800fb3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f003 0304 	and.w	r3, r3, #4
 800fa7e:	2b04      	cmp	r3, #4
 800fa80:	d149      	bne.n	800fb16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa86:	9300      	str	r3, [sp, #0]
 800fa88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 f857 	bl	800fb44 <UART_WaitOnFlagUntilTimeout>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d03c      	beq.n	800fb16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	e853 3f00 	ldrex	r3, [r3]
 800faa8:	623b      	str	r3, [r7, #32]
   return(result);
 800faaa:	6a3b      	ldr	r3, [r7, #32]
 800faac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fab0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faba:	633b      	str	r3, [r7, #48]	; 0x30
 800fabc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fabe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fac2:	e841 2300 	strex	r3, r2, [r1]
 800fac6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1e6      	bne.n	800fa9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	3308      	adds	r3, #8
 800fad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	e853 3f00 	ldrex	r3, [r3]
 800fadc:	60fb      	str	r3, [r7, #12]
   return(result);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f023 0301 	bic.w	r3, r3, #1
 800fae4:	64bb      	str	r3, [r7, #72]	; 0x48
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	3308      	adds	r3, #8
 800faec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800faee:	61fa      	str	r2, [r7, #28]
 800faf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf2:	69b9      	ldr	r1, [r7, #24]
 800faf4:	69fa      	ldr	r2, [r7, #28]
 800faf6:	e841 2300 	strex	r3, r2, [r1]
 800fafa:	617b      	str	r3, [r7, #20]
   return(result);
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d1e5      	bne.n	800face <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2220      	movs	r2, #32
 800fb06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb12:	2303      	movs	r3, #3
 800fb14:	e012      	b.n	800fb3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2220      	movs	r2, #32
 800fb1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2220      	movs	r2, #32
 800fb22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2200      	movs	r2, #0
 800fb36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fb3a:	2300      	movs	r3, #0
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3758      	adds	r7, #88	; 0x58
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	60b9      	str	r1, [r7, #8]
 800fb4e:	603b      	str	r3, [r7, #0]
 800fb50:	4613      	mov	r3, r2
 800fb52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb54:	e049      	b.n	800fbea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb5c:	d045      	beq.n	800fbea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb5e:	f7f9 f867 	bl	8008c30 <HAL_GetTick>
 800fb62:	4602      	mov	r2, r0
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	69ba      	ldr	r2, [r7, #24]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d302      	bcc.n	800fb74 <UART_WaitOnFlagUntilTimeout+0x30>
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d101      	bne.n	800fb78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fb74:	2303      	movs	r3, #3
 800fb76:	e048      	b.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f003 0304 	and.w	r3, r3, #4
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d031      	beq.n	800fbea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	69db      	ldr	r3, [r3, #28]
 800fb8c:	f003 0308 	and.w	r3, r3, #8
 800fb90:	2b08      	cmp	r3, #8
 800fb92:	d110      	bne.n	800fbb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2208      	movs	r2, #8
 800fb9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f000 f879 	bl	800fc94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2208      	movs	r2, #8
 800fba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e029      	b.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	69db      	ldr	r3, [r3, #28]
 800fbbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fbc4:	d111      	bne.n	800fbea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fbce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbd0:	68f8      	ldr	r0, [r7, #12]
 800fbd2:	f000 f85f 	bl	800fc94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2220      	movs	r2, #32
 800fbda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fbe6:	2303      	movs	r3, #3
 800fbe8:	e00f      	b.n	800fc0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	69da      	ldr	r2, [r3, #28]
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	4013      	ands	r3, r2
 800fbf4:	68ba      	ldr	r2, [r7, #8]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	bf0c      	ite	eq
 800fbfa:	2301      	moveq	r3, #1
 800fbfc:	2300      	movne	r3, #0
 800fbfe:	b2db      	uxtb	r3, r3
 800fc00:	461a      	mov	r2, r3
 800fc02:	79fb      	ldrb	r3, [r7, #7]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d0a6      	beq.n	800fb56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3710      	adds	r7, #16
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}

0800fc12 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fc12:	b480      	push	{r7}
 800fc14:	b08f      	sub	sp, #60	; 0x3c
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	e853 3f00 	ldrex	r3, [r3]
 800fc26:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fc2e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	461a      	mov	r2, r3
 800fc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc3a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc40:	e841 2300 	strex	r3, r2, [r1]
 800fc44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d1e6      	bne.n	800fc1a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	3308      	adds	r3, #8
 800fc52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	e853 3f00 	ldrex	r3, [r3]
 800fc5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fc62:	633b      	str	r3, [r7, #48]	; 0x30
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	3308      	adds	r3, #8
 800fc6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc6c:	61ba      	str	r2, [r7, #24]
 800fc6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc70:	6979      	ldr	r1, [r7, #20]
 800fc72:	69ba      	ldr	r2, [r7, #24]
 800fc74:	e841 2300 	strex	r3, r2, [r1]
 800fc78:	613b      	str	r3, [r7, #16]
   return(result);
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d1e5      	bne.n	800fc4c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2220      	movs	r2, #32
 800fc84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800fc88:	bf00      	nop
 800fc8a:	373c      	adds	r7, #60	; 0x3c
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b095      	sub	sp, #84	; 0x54
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca4:	e853 3f00 	ldrex	r3, [r3]
 800fca8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fcb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcba:	643b      	str	r3, [r7, #64]	; 0x40
 800fcbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcc2:	e841 2300 	strex	r3, r2, [r1]
 800fcc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1e6      	bne.n	800fc9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	3308      	adds	r3, #8
 800fcd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd6:	6a3b      	ldr	r3, [r7, #32]
 800fcd8:	e853 3f00 	ldrex	r3, [r3]
 800fcdc:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fce4:	f023 0301 	bic.w	r3, r3, #1
 800fce8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	3308      	adds	r3, #8
 800fcf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fcf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fcf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fcf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcfa:	e841 2300 	strex	r3, r2, [r1]
 800fcfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d1e3      	bne.n	800fcce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d118      	bne.n	800fd40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	e853 3f00 	ldrex	r3, [r3]
 800fd1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	f023 0310 	bic.w	r3, r3, #16
 800fd22:	647b      	str	r3, [r7, #68]	; 0x44
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	461a      	mov	r2, r3
 800fd2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd2c:	61bb      	str	r3, [r7, #24]
 800fd2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd30:	6979      	ldr	r1, [r7, #20]
 800fd32:	69ba      	ldr	r2, [r7, #24]
 800fd34:	e841 2300 	strex	r3, r2, [r1]
 800fd38:	613b      	str	r3, [r7, #16]
   return(result);
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1e6      	bne.n	800fd0e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2220      	movs	r2, #32
 800fd44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fd54:	bf00      	nop
 800fd56:	3754      	adds	r7, #84	; 0x54
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b090      	sub	sp, #64	; 0x40
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd6c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f003 0320 	and.w	r3, r3, #32
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d137      	bne.n	800fdec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800fd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd7e:	2200      	movs	r2, #0
 800fd80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	3308      	adds	r3, #8
 800fd8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8e:	e853 3f00 	ldrex	r3, [r3]
 800fd92:	623b      	str	r3, [r7, #32]
   return(result);
 800fd94:	6a3b      	ldr	r3, [r7, #32]
 800fd96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd9a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3308      	adds	r3, #8
 800fda2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fda4:	633a      	str	r2, [r7, #48]	; 0x30
 800fda6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdac:	e841 2300 	strex	r3, r2, [r1]
 800fdb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d1e5      	bne.n	800fd84 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fdb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	e853 3f00 	ldrex	r3, [r3]
 800fdc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdcc:	637b      	str	r3, [r7, #52]	; 0x34
 800fdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdd6:	61fb      	str	r3, [r7, #28]
 800fdd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdda:	69b9      	ldr	r1, [r7, #24]
 800fddc:	69fa      	ldr	r2, [r7, #28]
 800fdde:	e841 2300 	strex	r3, r2, [r1]
 800fde2:	617b      	str	r3, [r7, #20]
   return(result);
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1e6      	bne.n	800fdb8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdea:	e002      	b.n	800fdf2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800fdec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fdee:	f7ff fa33 	bl	800f258 <HAL_UART_TxCpltCallback>
}
 800fdf2:	bf00      	nop
 800fdf4:	3740      	adds	r7, #64	; 0x40
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdfa:	b580      	push	{r7, lr}
 800fdfc:	b084      	sub	sp, #16
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe06:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fe08:	68f8      	ldr	r0, [r7, #12]
 800fe0a:	f7ff fa2f 	bl	800f26c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe0e:	bf00      	nop
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}

0800fe16 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe16:	b580      	push	{r7, lr}
 800fe18:	b086      	sub	sp, #24
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe22:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe3e:	2b80      	cmp	r3, #128	; 0x80
 800fe40:	d109      	bne.n	800fe56 <UART_DMAError+0x40>
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	2b21      	cmp	r3, #33	; 0x21
 800fe46:	d106      	bne.n	800fe56 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fe50:	6978      	ldr	r0, [r7, #20]
 800fe52:	f7ff fede 	bl	800fc12 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe60:	2b40      	cmp	r3, #64	; 0x40
 800fe62:	d109      	bne.n	800fe78 <UART_DMAError+0x62>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2b22      	cmp	r3, #34	; 0x22
 800fe68:	d106      	bne.n	800fe78 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fe72:	6978      	ldr	r0, [r7, #20]
 800fe74:	f7ff ff0e 	bl	800fc94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe7e:	f043 0210 	orr.w	r2, r3, #16
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe88:	6978      	ldr	r0, [r7, #20]
 800fe8a:	f7ff f9f9 	bl	800f280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe8e:	bf00      	nop
 800fe90:	3718      	adds	r7, #24
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b084      	sub	sp, #16
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2200      	movs	r2, #0
 800fea8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2200      	movs	r2, #0
 800feb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	f7ff f9e3 	bl	800f280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800feba:	bf00      	nop
 800febc:	3710      	adds	r7, #16
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b088      	sub	sp, #32
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	e853 3f00 	ldrex	r3, [r3]
 800fed6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fede:	61fb      	str	r3, [r7, #28]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	69fb      	ldr	r3, [r7, #28]
 800fee8:	61bb      	str	r3, [r7, #24]
 800feea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feec:	6979      	ldr	r1, [r7, #20]
 800feee:	69ba      	ldr	r2, [r7, #24]
 800fef0:	e841 2300 	strex	r3, r2, [r1]
 800fef4:	613b      	str	r3, [r7, #16]
   return(result);
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1e6      	bne.n	800feca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2220      	movs	r2, #32
 800ff00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f7ff f9a4 	bl	800f258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff10:	bf00      	nop
 800ff12:	3720      	adds	r7, #32
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff34:	bf00      	nop
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b085      	sub	sp, #20
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d101      	bne.n	800ff6a <HAL_UARTEx_DisableFifoMode+0x16>
 800ff66:	2302      	movs	r3, #2
 800ff68:	e027      	b.n	800ffba <HAL_UARTEx_DisableFifoMode+0x66>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2224      	movs	r2, #36	; 0x24
 800ff76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f022 0201 	bic.w	r2, r2, #1
 800ff90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2220      	movs	r2, #32
 800ffac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ffb8:	2300      	movs	r3, #0
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3714      	adds	r7, #20
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr

0800ffc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b084      	sub	sp, #16
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d101      	bne.n	800ffde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ffda:	2302      	movs	r3, #2
 800ffdc:	e02d      	b.n	801003a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2224      	movs	r2, #36	; 0x24
 800ffea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f022 0201 	bic.w	r2, r2, #1
 8010004:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	683a      	ldr	r2, [r7, #0]
 8010016:	430a      	orrs	r2, r1
 8010018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 f850 	bl	80100c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2220      	movs	r2, #32
 801002c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3710      	adds	r7, #16
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b084      	sub	sp, #16
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
 801004a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010052:	2b01      	cmp	r3, #1
 8010054:	d101      	bne.n	801005a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010056:	2302      	movs	r3, #2
 8010058:	e02d      	b.n	80100b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2224      	movs	r2, #36	; 0x24
 8010066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f022 0201 	bic.w	r2, r2, #1
 8010080:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	689b      	ldr	r3, [r3, #8]
 8010088:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	683a      	ldr	r2, [r7, #0]
 8010092:	430a      	orrs	r2, r1
 8010094:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 f812 	bl	80100c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	68fa      	ldr	r2, [r7, #12]
 80100a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2220      	movs	r2, #32
 80100a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2200      	movs	r2, #0
 80100b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80100b4:	2300      	movs	r3, #0
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3710      	adds	r7, #16
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
	...

080100c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b085      	sub	sp, #20
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d108      	bne.n	80100e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2201      	movs	r2, #1
 80100d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2201      	movs	r2, #1
 80100dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100e0:	e031      	b.n	8010146 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100e2:	2308      	movs	r3, #8
 80100e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100e6:	2308      	movs	r3, #8
 80100e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	0e5b      	lsrs	r3, r3, #25
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	f003 0307 	and.w	r3, r3, #7
 80100f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	0f5b      	lsrs	r3, r3, #29
 8010102:	b2db      	uxtb	r3, r3
 8010104:	f003 0307 	and.w	r3, r3, #7
 8010108:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801010a:	7bbb      	ldrb	r3, [r7, #14]
 801010c:	7b3a      	ldrb	r2, [r7, #12]
 801010e:	4911      	ldr	r1, [pc, #68]	; (8010154 <UARTEx_SetNbDataToProcess+0x94>)
 8010110:	5c8a      	ldrb	r2, [r1, r2]
 8010112:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010116:	7b3a      	ldrb	r2, [r7, #12]
 8010118:	490f      	ldr	r1, [pc, #60]	; (8010158 <UARTEx_SetNbDataToProcess+0x98>)
 801011a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801011c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010120:	b29a      	uxth	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010128:	7bfb      	ldrb	r3, [r7, #15]
 801012a:	7b7a      	ldrb	r2, [r7, #13]
 801012c:	4909      	ldr	r1, [pc, #36]	; (8010154 <UARTEx_SetNbDataToProcess+0x94>)
 801012e:	5c8a      	ldrb	r2, [r1, r2]
 8010130:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010134:	7b7a      	ldrb	r2, [r7, #13]
 8010136:	4908      	ldr	r1, [pc, #32]	; (8010158 <UARTEx_SetNbDataToProcess+0x98>)
 8010138:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801013a:	fb93 f3f2 	sdiv	r3, r3, r2
 801013e:	b29a      	uxth	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010146:	bf00      	nop
 8010148:	3714      	adds	r7, #20
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	08013454 	.word	0x08013454
 8010158:	0801345c 	.word	0x0801345c

0801015c <__assert_func>:
 801015c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801015e:	4614      	mov	r4, r2
 8010160:	461a      	mov	r2, r3
 8010162:	4b09      	ldr	r3, [pc, #36]	; (8010188 <__assert_func+0x2c>)
 8010164:	4605      	mov	r5, r0
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	68d8      	ldr	r0, [r3, #12]
 801016a:	b14c      	cbz	r4, 8010180 <__assert_func+0x24>
 801016c:	4b07      	ldr	r3, [pc, #28]	; (801018c <__assert_func+0x30>)
 801016e:	9100      	str	r1, [sp, #0]
 8010170:	4907      	ldr	r1, [pc, #28]	; (8010190 <__assert_func+0x34>)
 8010172:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010176:	462b      	mov	r3, r5
 8010178:	f000 f814 	bl	80101a4 <fiprintf>
 801017c:	f000 fd84 	bl	8010c88 <abort>
 8010180:	4b04      	ldr	r3, [pc, #16]	; (8010194 <__assert_func+0x38>)
 8010182:	461c      	mov	r4, r3
 8010184:	e7f3      	b.n	801016e <__assert_func+0x12>
 8010186:	bf00      	nop
 8010188:	2000000c 	.word	0x2000000c
 801018c:	08013464 	.word	0x08013464
 8010190:	08013471 	.word	0x08013471
 8010194:	0801349f 	.word	0x0801349f

08010198 <__errno>:
 8010198:	4b01      	ldr	r3, [pc, #4]	; (80101a0 <__errno+0x8>)
 801019a:	6818      	ldr	r0, [r3, #0]
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop
 80101a0:	2000000c 	.word	0x2000000c

080101a4 <fiprintf>:
 80101a4:	b40e      	push	{r1, r2, r3}
 80101a6:	b503      	push	{r0, r1, lr}
 80101a8:	ab03      	add	r3, sp, #12
 80101aa:	4601      	mov	r1, r0
 80101ac:	4805      	ldr	r0, [pc, #20]	; (80101c4 <fiprintf+0x20>)
 80101ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80101b2:	6800      	ldr	r0, [r0, #0]
 80101b4:	9301      	str	r3, [sp, #4]
 80101b6:	f000 f96b 	bl	8010490 <_vfiprintf_r>
 80101ba:	b002      	add	sp, #8
 80101bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80101c0:	b003      	add	sp, #12
 80101c2:	4770      	bx	lr
 80101c4:	2000000c 	.word	0x2000000c

080101c8 <__libc_init_array>:
 80101c8:	b570      	push	{r4, r5, r6, lr}
 80101ca:	4d0d      	ldr	r5, [pc, #52]	; (8010200 <__libc_init_array+0x38>)
 80101cc:	2600      	movs	r6, #0
 80101ce:	4c0d      	ldr	r4, [pc, #52]	; (8010204 <__libc_init_array+0x3c>)
 80101d0:	1b64      	subs	r4, r4, r5
 80101d2:	10a4      	asrs	r4, r4, #2
 80101d4:	42a6      	cmp	r6, r4
 80101d6:	d109      	bne.n	80101ec <__libc_init_array+0x24>
 80101d8:	4d0b      	ldr	r5, [pc, #44]	; (8010208 <__libc_init_array+0x40>)
 80101da:	2600      	movs	r6, #0
 80101dc:	4c0b      	ldr	r4, [pc, #44]	; (801020c <__libc_init_array+0x44>)
 80101de:	f001 fa2f 	bl	8011640 <_init>
 80101e2:	1b64      	subs	r4, r4, r5
 80101e4:	10a4      	asrs	r4, r4, #2
 80101e6:	42a6      	cmp	r6, r4
 80101e8:	d105      	bne.n	80101f6 <__libc_init_array+0x2e>
 80101ea:	bd70      	pop	{r4, r5, r6, pc}
 80101ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80101f0:	3601      	adds	r6, #1
 80101f2:	4798      	blx	r3
 80101f4:	e7ee      	b.n	80101d4 <__libc_init_array+0xc>
 80101f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80101fa:	3601      	adds	r6, #1
 80101fc:	4798      	blx	r3
 80101fe:	e7f2      	b.n	80101e6 <__libc_init_array+0x1e>
 8010200:	08013540 	.word	0x08013540
 8010204:	08013540 	.word	0x08013540
 8010208:	08013540 	.word	0x08013540
 801020c:	08013544 	.word	0x08013544

08010210 <malloc>:
 8010210:	4b02      	ldr	r3, [pc, #8]	; (801021c <malloc+0xc>)
 8010212:	4601      	mov	r1, r0
 8010214:	6818      	ldr	r0, [r3, #0]
 8010216:	f000 b89d 	b.w	8010354 <_malloc_r>
 801021a:	bf00      	nop
 801021c:	2000000c 	.word	0x2000000c

08010220 <free>:
 8010220:	4b02      	ldr	r3, [pc, #8]	; (801022c <free+0xc>)
 8010222:	4601      	mov	r1, r0
 8010224:	6818      	ldr	r0, [r3, #0]
 8010226:	f000 b829 	b.w	801027c <_free_r>
 801022a:	bf00      	nop
 801022c:	2000000c 	.word	0x2000000c

08010230 <memcmp>:
 8010230:	3901      	subs	r1, #1
 8010232:	4402      	add	r2, r0
 8010234:	b510      	push	{r4, lr}
 8010236:	4290      	cmp	r0, r2
 8010238:	d101      	bne.n	801023e <memcmp+0xe>
 801023a:	2000      	movs	r0, #0
 801023c:	e005      	b.n	801024a <memcmp+0x1a>
 801023e:	7803      	ldrb	r3, [r0, #0]
 8010240:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010244:	42a3      	cmp	r3, r4
 8010246:	d001      	beq.n	801024c <memcmp+0x1c>
 8010248:	1b18      	subs	r0, r3, r4
 801024a:	bd10      	pop	{r4, pc}
 801024c:	3001      	adds	r0, #1
 801024e:	e7f2      	b.n	8010236 <memcmp+0x6>

08010250 <memcpy>:
 8010250:	440a      	add	r2, r1
 8010252:	1e43      	subs	r3, r0, #1
 8010254:	4291      	cmp	r1, r2
 8010256:	d100      	bne.n	801025a <memcpy+0xa>
 8010258:	4770      	bx	lr
 801025a:	b510      	push	{r4, lr}
 801025c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010260:	4291      	cmp	r1, r2
 8010262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010266:	d1f9      	bne.n	801025c <memcpy+0xc>
 8010268:	bd10      	pop	{r4, pc}

0801026a <memset>:
 801026a:	4402      	add	r2, r0
 801026c:	4603      	mov	r3, r0
 801026e:	4293      	cmp	r3, r2
 8010270:	d100      	bne.n	8010274 <memset+0xa>
 8010272:	4770      	bx	lr
 8010274:	f803 1b01 	strb.w	r1, [r3], #1
 8010278:	e7f9      	b.n	801026e <memset+0x4>
	...

0801027c <_free_r>:
 801027c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801027e:	2900      	cmp	r1, #0
 8010280:	d043      	beq.n	801030a <_free_r+0x8e>
 8010282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010286:	1f0c      	subs	r4, r1, #4
 8010288:	9001      	str	r0, [sp, #4]
 801028a:	2b00      	cmp	r3, #0
 801028c:	bfb8      	it	lt
 801028e:	18e4      	addlt	r4, r4, r3
 8010290:	f000 ff48 	bl	8011124 <__malloc_lock>
 8010294:	4a1e      	ldr	r2, [pc, #120]	; (8010310 <_free_r+0x94>)
 8010296:	9801      	ldr	r0, [sp, #4]
 8010298:	6813      	ldr	r3, [r2, #0]
 801029a:	b933      	cbnz	r3, 80102aa <_free_r+0x2e>
 801029c:	6063      	str	r3, [r4, #4]
 801029e:	6014      	str	r4, [r2, #0]
 80102a0:	b003      	add	sp, #12
 80102a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102a6:	f000 bf43 	b.w	8011130 <__malloc_unlock>
 80102aa:	42a3      	cmp	r3, r4
 80102ac:	d908      	bls.n	80102c0 <_free_r+0x44>
 80102ae:	6825      	ldr	r5, [r4, #0]
 80102b0:	1961      	adds	r1, r4, r5
 80102b2:	428b      	cmp	r3, r1
 80102b4:	bf01      	itttt	eq
 80102b6:	6819      	ldreq	r1, [r3, #0]
 80102b8:	685b      	ldreq	r3, [r3, #4]
 80102ba:	1949      	addeq	r1, r1, r5
 80102bc:	6021      	streq	r1, [r4, #0]
 80102be:	e7ed      	b.n	801029c <_free_r+0x20>
 80102c0:	461a      	mov	r2, r3
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	b10b      	cbz	r3, 80102ca <_free_r+0x4e>
 80102c6:	42a3      	cmp	r3, r4
 80102c8:	d9fa      	bls.n	80102c0 <_free_r+0x44>
 80102ca:	6811      	ldr	r1, [r2, #0]
 80102cc:	1855      	adds	r5, r2, r1
 80102ce:	42a5      	cmp	r5, r4
 80102d0:	d10b      	bne.n	80102ea <_free_r+0x6e>
 80102d2:	6824      	ldr	r4, [r4, #0]
 80102d4:	4421      	add	r1, r4
 80102d6:	1854      	adds	r4, r2, r1
 80102d8:	6011      	str	r1, [r2, #0]
 80102da:	42a3      	cmp	r3, r4
 80102dc:	d1e0      	bne.n	80102a0 <_free_r+0x24>
 80102de:	681c      	ldr	r4, [r3, #0]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	4421      	add	r1, r4
 80102e4:	6053      	str	r3, [r2, #4]
 80102e6:	6011      	str	r1, [r2, #0]
 80102e8:	e7da      	b.n	80102a0 <_free_r+0x24>
 80102ea:	d902      	bls.n	80102f2 <_free_r+0x76>
 80102ec:	230c      	movs	r3, #12
 80102ee:	6003      	str	r3, [r0, #0]
 80102f0:	e7d6      	b.n	80102a0 <_free_r+0x24>
 80102f2:	6825      	ldr	r5, [r4, #0]
 80102f4:	1961      	adds	r1, r4, r5
 80102f6:	428b      	cmp	r3, r1
 80102f8:	bf02      	ittt	eq
 80102fa:	6819      	ldreq	r1, [r3, #0]
 80102fc:	685b      	ldreq	r3, [r3, #4]
 80102fe:	1949      	addeq	r1, r1, r5
 8010300:	6063      	str	r3, [r4, #4]
 8010302:	bf08      	it	eq
 8010304:	6021      	streq	r1, [r4, #0]
 8010306:	6054      	str	r4, [r2, #4]
 8010308:	e7ca      	b.n	80102a0 <_free_r+0x24>
 801030a:	b003      	add	sp, #12
 801030c:	bd30      	pop	{r4, r5, pc}
 801030e:	bf00      	nop
 8010310:	20000780 	.word	0x20000780

08010314 <sbrk_aligned>:
 8010314:	b570      	push	{r4, r5, r6, lr}
 8010316:	4e0e      	ldr	r6, [pc, #56]	; (8010350 <sbrk_aligned+0x3c>)
 8010318:	460c      	mov	r4, r1
 801031a:	4605      	mov	r5, r0
 801031c:	6831      	ldr	r1, [r6, #0]
 801031e:	b911      	cbnz	r1, 8010326 <sbrk_aligned+0x12>
 8010320:	f000 fb94 	bl	8010a4c <_sbrk_r>
 8010324:	6030      	str	r0, [r6, #0]
 8010326:	4621      	mov	r1, r4
 8010328:	4628      	mov	r0, r5
 801032a:	f000 fb8f 	bl	8010a4c <_sbrk_r>
 801032e:	1c43      	adds	r3, r0, #1
 8010330:	d00a      	beq.n	8010348 <sbrk_aligned+0x34>
 8010332:	1cc4      	adds	r4, r0, #3
 8010334:	f024 0403 	bic.w	r4, r4, #3
 8010338:	42a0      	cmp	r0, r4
 801033a:	d007      	beq.n	801034c <sbrk_aligned+0x38>
 801033c:	1a21      	subs	r1, r4, r0
 801033e:	4628      	mov	r0, r5
 8010340:	f000 fb84 	bl	8010a4c <_sbrk_r>
 8010344:	3001      	adds	r0, #1
 8010346:	d101      	bne.n	801034c <sbrk_aligned+0x38>
 8010348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801034c:	4620      	mov	r0, r4
 801034e:	bd70      	pop	{r4, r5, r6, pc}
 8010350:	20000784 	.word	0x20000784

08010354 <_malloc_r>:
 8010354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010358:	1ccd      	adds	r5, r1, #3
 801035a:	4607      	mov	r7, r0
 801035c:	f025 0503 	bic.w	r5, r5, #3
 8010360:	3508      	adds	r5, #8
 8010362:	2d0c      	cmp	r5, #12
 8010364:	bf38      	it	cc
 8010366:	250c      	movcc	r5, #12
 8010368:	2d00      	cmp	r5, #0
 801036a:	db01      	blt.n	8010370 <_malloc_r+0x1c>
 801036c:	42a9      	cmp	r1, r5
 801036e:	d905      	bls.n	801037c <_malloc_r+0x28>
 8010370:	230c      	movs	r3, #12
 8010372:	2600      	movs	r6, #0
 8010374:	603b      	str	r3, [r7, #0]
 8010376:	4630      	mov	r0, r6
 8010378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801037c:	4e2e      	ldr	r6, [pc, #184]	; (8010438 <_malloc_r+0xe4>)
 801037e:	f000 fed1 	bl	8011124 <__malloc_lock>
 8010382:	6833      	ldr	r3, [r6, #0]
 8010384:	461c      	mov	r4, r3
 8010386:	bb34      	cbnz	r4, 80103d6 <_malloc_r+0x82>
 8010388:	4629      	mov	r1, r5
 801038a:	4638      	mov	r0, r7
 801038c:	f7ff ffc2 	bl	8010314 <sbrk_aligned>
 8010390:	1c43      	adds	r3, r0, #1
 8010392:	4604      	mov	r4, r0
 8010394:	d14d      	bne.n	8010432 <_malloc_r+0xde>
 8010396:	6834      	ldr	r4, [r6, #0]
 8010398:	4626      	mov	r6, r4
 801039a:	2e00      	cmp	r6, #0
 801039c:	d140      	bne.n	8010420 <_malloc_r+0xcc>
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	4631      	mov	r1, r6
 80103a2:	4638      	mov	r0, r7
 80103a4:	eb04 0803 	add.w	r8, r4, r3
 80103a8:	f000 fb50 	bl	8010a4c <_sbrk_r>
 80103ac:	4580      	cmp	r8, r0
 80103ae:	d13a      	bne.n	8010426 <_malloc_r+0xd2>
 80103b0:	6821      	ldr	r1, [r4, #0]
 80103b2:	3503      	adds	r5, #3
 80103b4:	4638      	mov	r0, r7
 80103b6:	1a6d      	subs	r5, r5, r1
 80103b8:	f025 0503 	bic.w	r5, r5, #3
 80103bc:	3508      	adds	r5, #8
 80103be:	2d0c      	cmp	r5, #12
 80103c0:	bf38      	it	cc
 80103c2:	250c      	movcc	r5, #12
 80103c4:	4629      	mov	r1, r5
 80103c6:	f7ff ffa5 	bl	8010314 <sbrk_aligned>
 80103ca:	3001      	adds	r0, #1
 80103cc:	d02b      	beq.n	8010426 <_malloc_r+0xd2>
 80103ce:	6823      	ldr	r3, [r4, #0]
 80103d0:	442b      	add	r3, r5
 80103d2:	6023      	str	r3, [r4, #0]
 80103d4:	e00e      	b.n	80103f4 <_malloc_r+0xa0>
 80103d6:	6822      	ldr	r2, [r4, #0]
 80103d8:	1b52      	subs	r2, r2, r5
 80103da:	d41e      	bmi.n	801041a <_malloc_r+0xc6>
 80103dc:	2a0b      	cmp	r2, #11
 80103de:	d916      	bls.n	801040e <_malloc_r+0xba>
 80103e0:	1961      	adds	r1, r4, r5
 80103e2:	42a3      	cmp	r3, r4
 80103e4:	6025      	str	r5, [r4, #0]
 80103e6:	bf18      	it	ne
 80103e8:	6059      	strne	r1, [r3, #4]
 80103ea:	6863      	ldr	r3, [r4, #4]
 80103ec:	bf08      	it	eq
 80103ee:	6031      	streq	r1, [r6, #0]
 80103f0:	5162      	str	r2, [r4, r5]
 80103f2:	604b      	str	r3, [r1, #4]
 80103f4:	f104 060b 	add.w	r6, r4, #11
 80103f8:	4638      	mov	r0, r7
 80103fa:	f000 fe99 	bl	8011130 <__malloc_unlock>
 80103fe:	1d23      	adds	r3, r4, #4
 8010400:	f026 0607 	bic.w	r6, r6, #7
 8010404:	1af2      	subs	r2, r6, r3
 8010406:	d0b6      	beq.n	8010376 <_malloc_r+0x22>
 8010408:	1b9b      	subs	r3, r3, r6
 801040a:	50a3      	str	r3, [r4, r2]
 801040c:	e7b3      	b.n	8010376 <_malloc_r+0x22>
 801040e:	6862      	ldr	r2, [r4, #4]
 8010410:	42a3      	cmp	r3, r4
 8010412:	bf0c      	ite	eq
 8010414:	6032      	streq	r2, [r6, #0]
 8010416:	605a      	strne	r2, [r3, #4]
 8010418:	e7ec      	b.n	80103f4 <_malloc_r+0xa0>
 801041a:	4623      	mov	r3, r4
 801041c:	6864      	ldr	r4, [r4, #4]
 801041e:	e7b2      	b.n	8010386 <_malloc_r+0x32>
 8010420:	4634      	mov	r4, r6
 8010422:	6876      	ldr	r6, [r6, #4]
 8010424:	e7b9      	b.n	801039a <_malloc_r+0x46>
 8010426:	230c      	movs	r3, #12
 8010428:	4638      	mov	r0, r7
 801042a:	603b      	str	r3, [r7, #0]
 801042c:	f000 fe80 	bl	8011130 <__malloc_unlock>
 8010430:	e7a1      	b.n	8010376 <_malloc_r+0x22>
 8010432:	6025      	str	r5, [r4, #0]
 8010434:	e7de      	b.n	80103f4 <_malloc_r+0xa0>
 8010436:	bf00      	nop
 8010438:	20000780 	.word	0x20000780

0801043c <__sfputc_r>:
 801043c:	6893      	ldr	r3, [r2, #8]
 801043e:	3b01      	subs	r3, #1
 8010440:	2b00      	cmp	r3, #0
 8010442:	6093      	str	r3, [r2, #8]
 8010444:	b410      	push	{r4}
 8010446:	da08      	bge.n	801045a <__sfputc_r+0x1e>
 8010448:	6994      	ldr	r4, [r2, #24]
 801044a:	42a3      	cmp	r3, r4
 801044c:	db01      	blt.n	8010452 <__sfputc_r+0x16>
 801044e:	290a      	cmp	r1, #10
 8010450:	d103      	bne.n	801045a <__sfputc_r+0x1e>
 8010452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010456:	f000 bb57 	b.w	8010b08 <__swbuf_r>
 801045a:	6813      	ldr	r3, [r2, #0]
 801045c:	1c58      	adds	r0, r3, #1
 801045e:	6010      	str	r0, [r2, #0]
 8010460:	4608      	mov	r0, r1
 8010462:	7019      	strb	r1, [r3, #0]
 8010464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010468:	4770      	bx	lr

0801046a <__sfputs_r>:
 801046a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046c:	4606      	mov	r6, r0
 801046e:	460f      	mov	r7, r1
 8010470:	4614      	mov	r4, r2
 8010472:	18d5      	adds	r5, r2, r3
 8010474:	42ac      	cmp	r4, r5
 8010476:	d101      	bne.n	801047c <__sfputs_r+0x12>
 8010478:	2000      	movs	r0, #0
 801047a:	e007      	b.n	801048c <__sfputs_r+0x22>
 801047c:	463a      	mov	r2, r7
 801047e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010482:	4630      	mov	r0, r6
 8010484:	f7ff ffda 	bl	801043c <__sfputc_r>
 8010488:	1c43      	adds	r3, r0, #1
 801048a:	d1f3      	bne.n	8010474 <__sfputs_r+0xa>
 801048c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010490 <_vfiprintf_r>:
 8010490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010494:	460d      	mov	r5, r1
 8010496:	b09d      	sub	sp, #116	; 0x74
 8010498:	4614      	mov	r4, r2
 801049a:	4698      	mov	r8, r3
 801049c:	4606      	mov	r6, r0
 801049e:	b118      	cbz	r0, 80104a8 <_vfiprintf_r+0x18>
 80104a0:	6983      	ldr	r3, [r0, #24]
 80104a2:	b90b      	cbnz	r3, 80104a8 <_vfiprintf_r+0x18>
 80104a4:	f000 fd10 	bl	8010ec8 <__sinit>
 80104a8:	4b89      	ldr	r3, [pc, #548]	; (80106d0 <_vfiprintf_r+0x240>)
 80104aa:	429d      	cmp	r5, r3
 80104ac:	d11b      	bne.n	80104e6 <_vfiprintf_r+0x56>
 80104ae:	6875      	ldr	r5, [r6, #4]
 80104b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104b2:	07d9      	lsls	r1, r3, #31
 80104b4:	d405      	bmi.n	80104c2 <_vfiprintf_r+0x32>
 80104b6:	89ab      	ldrh	r3, [r5, #12]
 80104b8:	059a      	lsls	r2, r3, #22
 80104ba:	d402      	bmi.n	80104c2 <_vfiprintf_r+0x32>
 80104bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104be:	f000 fda1 	bl	8011004 <__retarget_lock_acquire_recursive>
 80104c2:	89ab      	ldrh	r3, [r5, #12]
 80104c4:	071b      	lsls	r3, r3, #28
 80104c6:	d501      	bpl.n	80104cc <_vfiprintf_r+0x3c>
 80104c8:	692b      	ldr	r3, [r5, #16]
 80104ca:	b9eb      	cbnz	r3, 8010508 <_vfiprintf_r+0x78>
 80104cc:	4629      	mov	r1, r5
 80104ce:	4630      	mov	r0, r6
 80104d0:	f000 fb6c 	bl	8010bac <__swsetup_r>
 80104d4:	b1c0      	cbz	r0, 8010508 <_vfiprintf_r+0x78>
 80104d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104d8:	07dc      	lsls	r4, r3, #31
 80104da:	d50e      	bpl.n	80104fa <_vfiprintf_r+0x6a>
 80104dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104e0:	b01d      	add	sp, #116	; 0x74
 80104e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e6:	4b7b      	ldr	r3, [pc, #492]	; (80106d4 <_vfiprintf_r+0x244>)
 80104e8:	429d      	cmp	r5, r3
 80104ea:	d101      	bne.n	80104f0 <_vfiprintf_r+0x60>
 80104ec:	68b5      	ldr	r5, [r6, #8]
 80104ee:	e7df      	b.n	80104b0 <_vfiprintf_r+0x20>
 80104f0:	4b79      	ldr	r3, [pc, #484]	; (80106d8 <_vfiprintf_r+0x248>)
 80104f2:	429d      	cmp	r5, r3
 80104f4:	bf08      	it	eq
 80104f6:	68f5      	ldreq	r5, [r6, #12]
 80104f8:	e7da      	b.n	80104b0 <_vfiprintf_r+0x20>
 80104fa:	89ab      	ldrh	r3, [r5, #12]
 80104fc:	0598      	lsls	r0, r3, #22
 80104fe:	d4ed      	bmi.n	80104dc <_vfiprintf_r+0x4c>
 8010500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010502:	f000 fd80 	bl	8011006 <__retarget_lock_release_recursive>
 8010506:	e7e9      	b.n	80104dc <_vfiprintf_r+0x4c>
 8010508:	2300      	movs	r3, #0
 801050a:	f8cd 800c 	str.w	r8, [sp, #12]
 801050e:	f04f 0901 	mov.w	r9, #1
 8010512:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80106dc <_vfiprintf_r+0x24c>
 8010516:	9309      	str	r3, [sp, #36]	; 0x24
 8010518:	2320      	movs	r3, #32
 801051a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801051e:	2330      	movs	r3, #48	; 0x30
 8010520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010524:	4623      	mov	r3, r4
 8010526:	469a      	mov	sl, r3
 8010528:	f813 2b01 	ldrb.w	r2, [r3], #1
 801052c:	b10a      	cbz	r2, 8010532 <_vfiprintf_r+0xa2>
 801052e:	2a25      	cmp	r2, #37	; 0x25
 8010530:	d1f9      	bne.n	8010526 <_vfiprintf_r+0x96>
 8010532:	ebba 0b04 	subs.w	fp, sl, r4
 8010536:	d00b      	beq.n	8010550 <_vfiprintf_r+0xc0>
 8010538:	465b      	mov	r3, fp
 801053a:	4622      	mov	r2, r4
 801053c:	4629      	mov	r1, r5
 801053e:	4630      	mov	r0, r6
 8010540:	f7ff ff93 	bl	801046a <__sfputs_r>
 8010544:	3001      	adds	r0, #1
 8010546:	f000 80aa 	beq.w	801069e <_vfiprintf_r+0x20e>
 801054a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801054c:	445a      	add	r2, fp
 801054e:	9209      	str	r2, [sp, #36]	; 0x24
 8010550:	f89a 3000 	ldrb.w	r3, [sl]
 8010554:	2b00      	cmp	r3, #0
 8010556:	f000 80a2 	beq.w	801069e <_vfiprintf_r+0x20e>
 801055a:	2300      	movs	r3, #0
 801055c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010560:	f10a 0a01 	add.w	sl, sl, #1
 8010564:	9304      	str	r3, [sp, #16]
 8010566:	9307      	str	r3, [sp, #28]
 8010568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801056c:	931a      	str	r3, [sp, #104]	; 0x68
 801056e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010572:	4654      	mov	r4, sl
 8010574:	2205      	movs	r2, #5
 8010576:	4859      	ldr	r0, [pc, #356]	; (80106dc <_vfiprintf_r+0x24c>)
 8010578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801057c:	f000 fdaa 	bl	80110d4 <memchr>
 8010580:	9a04      	ldr	r2, [sp, #16]
 8010582:	b9d8      	cbnz	r0, 80105bc <_vfiprintf_r+0x12c>
 8010584:	06d1      	lsls	r1, r2, #27
 8010586:	bf44      	itt	mi
 8010588:	2320      	movmi	r3, #32
 801058a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801058e:	0713      	lsls	r3, r2, #28
 8010590:	bf44      	itt	mi
 8010592:	232b      	movmi	r3, #43	; 0x2b
 8010594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010598:	f89a 3000 	ldrb.w	r3, [sl]
 801059c:	2b2a      	cmp	r3, #42	; 0x2a
 801059e:	d015      	beq.n	80105cc <_vfiprintf_r+0x13c>
 80105a0:	9a07      	ldr	r2, [sp, #28]
 80105a2:	4654      	mov	r4, sl
 80105a4:	2000      	movs	r0, #0
 80105a6:	f04f 0c0a 	mov.w	ip, #10
 80105aa:	4621      	mov	r1, r4
 80105ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105b0:	3b30      	subs	r3, #48	; 0x30
 80105b2:	2b09      	cmp	r3, #9
 80105b4:	d94e      	bls.n	8010654 <_vfiprintf_r+0x1c4>
 80105b6:	b1b0      	cbz	r0, 80105e6 <_vfiprintf_r+0x156>
 80105b8:	9207      	str	r2, [sp, #28]
 80105ba:	e014      	b.n	80105e6 <_vfiprintf_r+0x156>
 80105bc:	eba0 0308 	sub.w	r3, r0, r8
 80105c0:	46a2      	mov	sl, r4
 80105c2:	fa09 f303 	lsl.w	r3, r9, r3
 80105c6:	4313      	orrs	r3, r2
 80105c8:	9304      	str	r3, [sp, #16]
 80105ca:	e7d2      	b.n	8010572 <_vfiprintf_r+0xe2>
 80105cc:	9b03      	ldr	r3, [sp, #12]
 80105ce:	1d19      	adds	r1, r3, #4
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	9103      	str	r1, [sp, #12]
 80105d6:	bfbb      	ittet	lt
 80105d8:	425b      	neglt	r3, r3
 80105da:	f042 0202 	orrlt.w	r2, r2, #2
 80105de:	9307      	strge	r3, [sp, #28]
 80105e0:	9307      	strlt	r3, [sp, #28]
 80105e2:	bfb8      	it	lt
 80105e4:	9204      	strlt	r2, [sp, #16]
 80105e6:	7823      	ldrb	r3, [r4, #0]
 80105e8:	2b2e      	cmp	r3, #46	; 0x2e
 80105ea:	d10c      	bne.n	8010606 <_vfiprintf_r+0x176>
 80105ec:	7863      	ldrb	r3, [r4, #1]
 80105ee:	2b2a      	cmp	r3, #42	; 0x2a
 80105f0:	d135      	bne.n	801065e <_vfiprintf_r+0x1ce>
 80105f2:	9b03      	ldr	r3, [sp, #12]
 80105f4:	3402      	adds	r4, #2
 80105f6:	1d1a      	adds	r2, r3, #4
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	9203      	str	r2, [sp, #12]
 80105fe:	bfb8      	it	lt
 8010600:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010604:	9305      	str	r3, [sp, #20]
 8010606:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106ec <_vfiprintf_r+0x25c>
 801060a:	2203      	movs	r2, #3
 801060c:	7821      	ldrb	r1, [r4, #0]
 801060e:	4650      	mov	r0, sl
 8010610:	f000 fd60 	bl	80110d4 <memchr>
 8010614:	b140      	cbz	r0, 8010628 <_vfiprintf_r+0x198>
 8010616:	2340      	movs	r3, #64	; 0x40
 8010618:	eba0 000a 	sub.w	r0, r0, sl
 801061c:	3401      	adds	r4, #1
 801061e:	fa03 f000 	lsl.w	r0, r3, r0
 8010622:	9b04      	ldr	r3, [sp, #16]
 8010624:	4303      	orrs	r3, r0
 8010626:	9304      	str	r3, [sp, #16]
 8010628:	f814 1b01 	ldrb.w	r1, [r4], #1
 801062c:	2206      	movs	r2, #6
 801062e:	482c      	ldr	r0, [pc, #176]	; (80106e0 <_vfiprintf_r+0x250>)
 8010630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010634:	f000 fd4e 	bl	80110d4 <memchr>
 8010638:	2800      	cmp	r0, #0
 801063a:	d03f      	beq.n	80106bc <_vfiprintf_r+0x22c>
 801063c:	4b29      	ldr	r3, [pc, #164]	; (80106e4 <_vfiprintf_r+0x254>)
 801063e:	bb1b      	cbnz	r3, 8010688 <_vfiprintf_r+0x1f8>
 8010640:	9b03      	ldr	r3, [sp, #12]
 8010642:	3307      	adds	r3, #7
 8010644:	f023 0307 	bic.w	r3, r3, #7
 8010648:	3308      	adds	r3, #8
 801064a:	9303      	str	r3, [sp, #12]
 801064c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801064e:	443b      	add	r3, r7
 8010650:	9309      	str	r3, [sp, #36]	; 0x24
 8010652:	e767      	b.n	8010524 <_vfiprintf_r+0x94>
 8010654:	fb0c 3202 	mla	r2, ip, r2, r3
 8010658:	460c      	mov	r4, r1
 801065a:	2001      	movs	r0, #1
 801065c:	e7a5      	b.n	80105aa <_vfiprintf_r+0x11a>
 801065e:	2300      	movs	r3, #0
 8010660:	3401      	adds	r4, #1
 8010662:	f04f 0c0a 	mov.w	ip, #10
 8010666:	4619      	mov	r1, r3
 8010668:	9305      	str	r3, [sp, #20]
 801066a:	4620      	mov	r0, r4
 801066c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010670:	3a30      	subs	r2, #48	; 0x30
 8010672:	2a09      	cmp	r2, #9
 8010674:	d903      	bls.n	801067e <_vfiprintf_r+0x1ee>
 8010676:	2b00      	cmp	r3, #0
 8010678:	d0c5      	beq.n	8010606 <_vfiprintf_r+0x176>
 801067a:	9105      	str	r1, [sp, #20]
 801067c:	e7c3      	b.n	8010606 <_vfiprintf_r+0x176>
 801067e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010682:	4604      	mov	r4, r0
 8010684:	2301      	movs	r3, #1
 8010686:	e7f0      	b.n	801066a <_vfiprintf_r+0x1da>
 8010688:	ab03      	add	r3, sp, #12
 801068a:	462a      	mov	r2, r5
 801068c:	a904      	add	r1, sp, #16
 801068e:	4630      	mov	r0, r6
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	4b15      	ldr	r3, [pc, #84]	; (80106e8 <_vfiprintf_r+0x258>)
 8010694:	e000      	b.n	8010698 <_vfiprintf_r+0x208>
 8010696:	bf00      	nop
 8010698:	4607      	mov	r7, r0
 801069a:	1c78      	adds	r0, r7, #1
 801069c:	d1d6      	bne.n	801064c <_vfiprintf_r+0x1bc>
 801069e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106a0:	07d9      	lsls	r1, r3, #31
 80106a2:	d405      	bmi.n	80106b0 <_vfiprintf_r+0x220>
 80106a4:	89ab      	ldrh	r3, [r5, #12]
 80106a6:	059a      	lsls	r2, r3, #22
 80106a8:	d402      	bmi.n	80106b0 <_vfiprintf_r+0x220>
 80106aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106ac:	f000 fcab 	bl	8011006 <__retarget_lock_release_recursive>
 80106b0:	89ab      	ldrh	r3, [r5, #12]
 80106b2:	065b      	lsls	r3, r3, #25
 80106b4:	f53f af12 	bmi.w	80104dc <_vfiprintf_r+0x4c>
 80106b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106ba:	e711      	b.n	80104e0 <_vfiprintf_r+0x50>
 80106bc:	ab03      	add	r3, sp, #12
 80106be:	462a      	mov	r2, r5
 80106c0:	a904      	add	r1, sp, #16
 80106c2:	4630      	mov	r0, r6
 80106c4:	9300      	str	r3, [sp, #0]
 80106c6:	4b08      	ldr	r3, [pc, #32]	; (80106e8 <_vfiprintf_r+0x258>)
 80106c8:	f000 f882 	bl	80107d0 <_printf_i>
 80106cc:	e7e4      	b.n	8010698 <_vfiprintf_r+0x208>
 80106ce:	bf00      	nop
 80106d0:	080134f8 	.word	0x080134f8
 80106d4:	08013518 	.word	0x08013518
 80106d8:	080134d8 	.word	0x080134d8
 80106dc:	080134a4 	.word	0x080134a4
 80106e0:	080134ae 	.word	0x080134ae
 80106e4:	00000000 	.word	0x00000000
 80106e8:	0801046b 	.word	0x0801046b
 80106ec:	080134aa 	.word	0x080134aa

080106f0 <_printf_common>:
 80106f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106f4:	4616      	mov	r6, r2
 80106f6:	4699      	mov	r9, r3
 80106f8:	688a      	ldr	r2, [r1, #8]
 80106fa:	4607      	mov	r7, r0
 80106fc:	690b      	ldr	r3, [r1, #16]
 80106fe:	460c      	mov	r4, r1
 8010700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010704:	4293      	cmp	r3, r2
 8010706:	bfb8      	it	lt
 8010708:	4613      	movlt	r3, r2
 801070a:	6033      	str	r3, [r6, #0]
 801070c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010710:	b10a      	cbz	r2, 8010716 <_printf_common+0x26>
 8010712:	3301      	adds	r3, #1
 8010714:	6033      	str	r3, [r6, #0]
 8010716:	6823      	ldr	r3, [r4, #0]
 8010718:	0699      	lsls	r1, r3, #26
 801071a:	bf42      	ittt	mi
 801071c:	6833      	ldrmi	r3, [r6, #0]
 801071e:	3302      	addmi	r3, #2
 8010720:	6033      	strmi	r3, [r6, #0]
 8010722:	6825      	ldr	r5, [r4, #0]
 8010724:	f015 0506 	ands.w	r5, r5, #6
 8010728:	d106      	bne.n	8010738 <_printf_common+0x48>
 801072a:	f104 0a19 	add.w	sl, r4, #25
 801072e:	68e3      	ldr	r3, [r4, #12]
 8010730:	6832      	ldr	r2, [r6, #0]
 8010732:	1a9b      	subs	r3, r3, r2
 8010734:	42ab      	cmp	r3, r5
 8010736:	dc29      	bgt.n	801078c <_printf_common+0x9c>
 8010738:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801073c:	1e13      	subs	r3, r2, #0
 801073e:	6822      	ldr	r2, [r4, #0]
 8010740:	bf18      	it	ne
 8010742:	2301      	movne	r3, #1
 8010744:	0692      	lsls	r2, r2, #26
 8010746:	d42e      	bmi.n	80107a6 <_printf_common+0xb6>
 8010748:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801074c:	4649      	mov	r1, r9
 801074e:	4638      	mov	r0, r7
 8010750:	47c0      	blx	r8
 8010752:	3001      	adds	r0, #1
 8010754:	d021      	beq.n	801079a <_printf_common+0xaa>
 8010756:	6823      	ldr	r3, [r4, #0]
 8010758:	341a      	adds	r4, #26
 801075a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801075e:	f003 0306 	and.w	r3, r3, #6
 8010762:	6832      	ldr	r2, [r6, #0]
 8010764:	2600      	movs	r6, #0
 8010766:	2b04      	cmp	r3, #4
 8010768:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801076c:	bf08      	it	eq
 801076e:	1aad      	subeq	r5, r5, r2
 8010770:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010774:	bf14      	ite	ne
 8010776:	2500      	movne	r5, #0
 8010778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801077c:	4293      	cmp	r3, r2
 801077e:	bfc4      	itt	gt
 8010780:	1a9b      	subgt	r3, r3, r2
 8010782:	18ed      	addgt	r5, r5, r3
 8010784:	42b5      	cmp	r5, r6
 8010786:	d11a      	bne.n	80107be <_printf_common+0xce>
 8010788:	2000      	movs	r0, #0
 801078a:	e008      	b.n	801079e <_printf_common+0xae>
 801078c:	2301      	movs	r3, #1
 801078e:	4652      	mov	r2, sl
 8010790:	4649      	mov	r1, r9
 8010792:	4638      	mov	r0, r7
 8010794:	47c0      	blx	r8
 8010796:	3001      	adds	r0, #1
 8010798:	d103      	bne.n	80107a2 <_printf_common+0xb2>
 801079a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801079e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a2:	3501      	adds	r5, #1
 80107a4:	e7c3      	b.n	801072e <_printf_common+0x3e>
 80107a6:	18e1      	adds	r1, r4, r3
 80107a8:	1c5a      	adds	r2, r3, #1
 80107aa:	2030      	movs	r0, #48	; 0x30
 80107ac:	3302      	adds	r3, #2
 80107ae:	4422      	add	r2, r4
 80107b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80107b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80107b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80107bc:	e7c4      	b.n	8010748 <_printf_common+0x58>
 80107be:	2301      	movs	r3, #1
 80107c0:	4622      	mov	r2, r4
 80107c2:	4649      	mov	r1, r9
 80107c4:	4638      	mov	r0, r7
 80107c6:	47c0      	blx	r8
 80107c8:	3001      	adds	r0, #1
 80107ca:	d0e6      	beq.n	801079a <_printf_common+0xaa>
 80107cc:	3601      	adds	r6, #1
 80107ce:	e7d9      	b.n	8010784 <_printf_common+0x94>

080107d0 <_printf_i>:
 80107d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107d4:	7e0f      	ldrb	r7, [r1, #24]
 80107d6:	4691      	mov	r9, r2
 80107d8:	4680      	mov	r8, r0
 80107da:	460c      	mov	r4, r1
 80107dc:	2f78      	cmp	r7, #120	; 0x78
 80107de:	469a      	mov	sl, r3
 80107e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80107e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80107e6:	d807      	bhi.n	80107f8 <_printf_i+0x28>
 80107e8:	2f62      	cmp	r7, #98	; 0x62
 80107ea:	d80a      	bhi.n	8010802 <_printf_i+0x32>
 80107ec:	2f00      	cmp	r7, #0
 80107ee:	f000 80d8 	beq.w	80109a2 <_printf_i+0x1d2>
 80107f2:	2f58      	cmp	r7, #88	; 0x58
 80107f4:	f000 80a3 	beq.w	801093e <_printf_i+0x16e>
 80107f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010800:	e03a      	b.n	8010878 <_printf_i+0xa8>
 8010802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010806:	2b15      	cmp	r3, #21
 8010808:	d8f6      	bhi.n	80107f8 <_printf_i+0x28>
 801080a:	a101      	add	r1, pc, #4	; (adr r1, 8010810 <_printf_i+0x40>)
 801080c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010810:	08010869 	.word	0x08010869
 8010814:	0801087d 	.word	0x0801087d
 8010818:	080107f9 	.word	0x080107f9
 801081c:	080107f9 	.word	0x080107f9
 8010820:	080107f9 	.word	0x080107f9
 8010824:	080107f9 	.word	0x080107f9
 8010828:	0801087d 	.word	0x0801087d
 801082c:	080107f9 	.word	0x080107f9
 8010830:	080107f9 	.word	0x080107f9
 8010834:	080107f9 	.word	0x080107f9
 8010838:	080107f9 	.word	0x080107f9
 801083c:	08010989 	.word	0x08010989
 8010840:	080108ad 	.word	0x080108ad
 8010844:	0801096b 	.word	0x0801096b
 8010848:	080107f9 	.word	0x080107f9
 801084c:	080107f9 	.word	0x080107f9
 8010850:	080109ab 	.word	0x080109ab
 8010854:	080107f9 	.word	0x080107f9
 8010858:	080108ad 	.word	0x080108ad
 801085c:	080107f9 	.word	0x080107f9
 8010860:	080107f9 	.word	0x080107f9
 8010864:	08010973 	.word	0x08010973
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	1d1a      	adds	r2, r3, #4
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	602a      	str	r2, [r5, #0]
 8010870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010878:	2301      	movs	r3, #1
 801087a:	e0a3      	b.n	80109c4 <_printf_i+0x1f4>
 801087c:	6820      	ldr	r0, [r4, #0]
 801087e:	6829      	ldr	r1, [r5, #0]
 8010880:	0606      	lsls	r6, r0, #24
 8010882:	f101 0304 	add.w	r3, r1, #4
 8010886:	d50a      	bpl.n	801089e <_printf_i+0xce>
 8010888:	680e      	ldr	r6, [r1, #0]
 801088a:	602b      	str	r3, [r5, #0]
 801088c:	2e00      	cmp	r6, #0
 801088e:	da03      	bge.n	8010898 <_printf_i+0xc8>
 8010890:	232d      	movs	r3, #45	; 0x2d
 8010892:	4276      	negs	r6, r6
 8010894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010898:	485e      	ldr	r0, [pc, #376]	; (8010a14 <_printf_i+0x244>)
 801089a:	230a      	movs	r3, #10
 801089c:	e019      	b.n	80108d2 <_printf_i+0x102>
 801089e:	680e      	ldr	r6, [r1, #0]
 80108a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80108a4:	602b      	str	r3, [r5, #0]
 80108a6:	bf18      	it	ne
 80108a8:	b236      	sxthne	r6, r6
 80108aa:	e7ef      	b.n	801088c <_printf_i+0xbc>
 80108ac:	682b      	ldr	r3, [r5, #0]
 80108ae:	6820      	ldr	r0, [r4, #0]
 80108b0:	1d19      	adds	r1, r3, #4
 80108b2:	6029      	str	r1, [r5, #0]
 80108b4:	0601      	lsls	r1, r0, #24
 80108b6:	d501      	bpl.n	80108bc <_printf_i+0xec>
 80108b8:	681e      	ldr	r6, [r3, #0]
 80108ba:	e002      	b.n	80108c2 <_printf_i+0xf2>
 80108bc:	0646      	lsls	r6, r0, #25
 80108be:	d5fb      	bpl.n	80108b8 <_printf_i+0xe8>
 80108c0:	881e      	ldrh	r6, [r3, #0]
 80108c2:	2f6f      	cmp	r7, #111	; 0x6f
 80108c4:	4853      	ldr	r0, [pc, #332]	; (8010a14 <_printf_i+0x244>)
 80108c6:	bf0c      	ite	eq
 80108c8:	2308      	moveq	r3, #8
 80108ca:	230a      	movne	r3, #10
 80108cc:	2100      	movs	r1, #0
 80108ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80108d2:	6865      	ldr	r5, [r4, #4]
 80108d4:	2d00      	cmp	r5, #0
 80108d6:	60a5      	str	r5, [r4, #8]
 80108d8:	bfa2      	ittt	ge
 80108da:	6821      	ldrge	r1, [r4, #0]
 80108dc:	f021 0104 	bicge.w	r1, r1, #4
 80108e0:	6021      	strge	r1, [r4, #0]
 80108e2:	b90e      	cbnz	r6, 80108e8 <_printf_i+0x118>
 80108e4:	2d00      	cmp	r5, #0
 80108e6:	d04d      	beq.n	8010984 <_printf_i+0x1b4>
 80108e8:	4615      	mov	r5, r2
 80108ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80108ee:	fb03 6711 	mls	r7, r3, r1, r6
 80108f2:	5dc7      	ldrb	r7, [r0, r7]
 80108f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80108f8:	4637      	mov	r7, r6
 80108fa:	460e      	mov	r6, r1
 80108fc:	42bb      	cmp	r3, r7
 80108fe:	d9f4      	bls.n	80108ea <_printf_i+0x11a>
 8010900:	2b08      	cmp	r3, #8
 8010902:	d10b      	bne.n	801091c <_printf_i+0x14c>
 8010904:	6823      	ldr	r3, [r4, #0]
 8010906:	07de      	lsls	r6, r3, #31
 8010908:	d508      	bpl.n	801091c <_printf_i+0x14c>
 801090a:	6923      	ldr	r3, [r4, #16]
 801090c:	6861      	ldr	r1, [r4, #4]
 801090e:	4299      	cmp	r1, r3
 8010910:	bfde      	ittt	le
 8010912:	2330      	movle	r3, #48	; 0x30
 8010914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010918:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801091c:	1b52      	subs	r2, r2, r5
 801091e:	6122      	str	r2, [r4, #16]
 8010920:	464b      	mov	r3, r9
 8010922:	aa03      	add	r2, sp, #12
 8010924:	4621      	mov	r1, r4
 8010926:	4640      	mov	r0, r8
 8010928:	f8cd a000 	str.w	sl, [sp]
 801092c:	f7ff fee0 	bl	80106f0 <_printf_common>
 8010930:	3001      	adds	r0, #1
 8010932:	d14c      	bne.n	80109ce <_printf_i+0x1fe>
 8010934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010938:	b004      	add	sp, #16
 801093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801093e:	4835      	ldr	r0, [pc, #212]	; (8010a14 <_printf_i+0x244>)
 8010940:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010944:	6829      	ldr	r1, [r5, #0]
 8010946:	6823      	ldr	r3, [r4, #0]
 8010948:	f851 6b04 	ldr.w	r6, [r1], #4
 801094c:	6029      	str	r1, [r5, #0]
 801094e:	061d      	lsls	r5, r3, #24
 8010950:	d514      	bpl.n	801097c <_printf_i+0x1ac>
 8010952:	07df      	lsls	r7, r3, #31
 8010954:	bf44      	itt	mi
 8010956:	f043 0320 	orrmi.w	r3, r3, #32
 801095a:	6023      	strmi	r3, [r4, #0]
 801095c:	b91e      	cbnz	r6, 8010966 <_printf_i+0x196>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	f023 0320 	bic.w	r3, r3, #32
 8010964:	6023      	str	r3, [r4, #0]
 8010966:	2310      	movs	r3, #16
 8010968:	e7b0      	b.n	80108cc <_printf_i+0xfc>
 801096a:	6823      	ldr	r3, [r4, #0]
 801096c:	f043 0320 	orr.w	r3, r3, #32
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	2378      	movs	r3, #120	; 0x78
 8010974:	4828      	ldr	r0, [pc, #160]	; (8010a18 <_printf_i+0x248>)
 8010976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801097a:	e7e3      	b.n	8010944 <_printf_i+0x174>
 801097c:	0659      	lsls	r1, r3, #25
 801097e:	bf48      	it	mi
 8010980:	b2b6      	uxthmi	r6, r6
 8010982:	e7e6      	b.n	8010952 <_printf_i+0x182>
 8010984:	4615      	mov	r5, r2
 8010986:	e7bb      	b.n	8010900 <_printf_i+0x130>
 8010988:	682b      	ldr	r3, [r5, #0]
 801098a:	6826      	ldr	r6, [r4, #0]
 801098c:	1d18      	adds	r0, r3, #4
 801098e:	6961      	ldr	r1, [r4, #20]
 8010990:	6028      	str	r0, [r5, #0]
 8010992:	0635      	lsls	r5, r6, #24
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	d501      	bpl.n	801099c <_printf_i+0x1cc>
 8010998:	6019      	str	r1, [r3, #0]
 801099a:	e002      	b.n	80109a2 <_printf_i+0x1d2>
 801099c:	0670      	lsls	r0, r6, #25
 801099e:	d5fb      	bpl.n	8010998 <_printf_i+0x1c8>
 80109a0:	8019      	strh	r1, [r3, #0]
 80109a2:	2300      	movs	r3, #0
 80109a4:	4615      	mov	r5, r2
 80109a6:	6123      	str	r3, [r4, #16]
 80109a8:	e7ba      	b.n	8010920 <_printf_i+0x150>
 80109aa:	682b      	ldr	r3, [r5, #0]
 80109ac:	2100      	movs	r1, #0
 80109ae:	1d1a      	adds	r2, r3, #4
 80109b0:	602a      	str	r2, [r5, #0]
 80109b2:	681d      	ldr	r5, [r3, #0]
 80109b4:	6862      	ldr	r2, [r4, #4]
 80109b6:	4628      	mov	r0, r5
 80109b8:	f000 fb8c 	bl	80110d4 <memchr>
 80109bc:	b108      	cbz	r0, 80109c2 <_printf_i+0x1f2>
 80109be:	1b40      	subs	r0, r0, r5
 80109c0:	6060      	str	r0, [r4, #4]
 80109c2:	6863      	ldr	r3, [r4, #4]
 80109c4:	6123      	str	r3, [r4, #16]
 80109c6:	2300      	movs	r3, #0
 80109c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109cc:	e7a8      	b.n	8010920 <_printf_i+0x150>
 80109ce:	6923      	ldr	r3, [r4, #16]
 80109d0:	462a      	mov	r2, r5
 80109d2:	4649      	mov	r1, r9
 80109d4:	4640      	mov	r0, r8
 80109d6:	47d0      	blx	sl
 80109d8:	3001      	adds	r0, #1
 80109da:	d0ab      	beq.n	8010934 <_printf_i+0x164>
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	079b      	lsls	r3, r3, #30
 80109e0:	d413      	bmi.n	8010a0a <_printf_i+0x23a>
 80109e2:	68e0      	ldr	r0, [r4, #12]
 80109e4:	9b03      	ldr	r3, [sp, #12]
 80109e6:	4298      	cmp	r0, r3
 80109e8:	bfb8      	it	lt
 80109ea:	4618      	movlt	r0, r3
 80109ec:	e7a4      	b.n	8010938 <_printf_i+0x168>
 80109ee:	2301      	movs	r3, #1
 80109f0:	4632      	mov	r2, r6
 80109f2:	4649      	mov	r1, r9
 80109f4:	4640      	mov	r0, r8
 80109f6:	47d0      	blx	sl
 80109f8:	3001      	adds	r0, #1
 80109fa:	d09b      	beq.n	8010934 <_printf_i+0x164>
 80109fc:	3501      	adds	r5, #1
 80109fe:	68e3      	ldr	r3, [r4, #12]
 8010a00:	9903      	ldr	r1, [sp, #12]
 8010a02:	1a5b      	subs	r3, r3, r1
 8010a04:	42ab      	cmp	r3, r5
 8010a06:	dcf2      	bgt.n	80109ee <_printf_i+0x21e>
 8010a08:	e7eb      	b.n	80109e2 <_printf_i+0x212>
 8010a0a:	2500      	movs	r5, #0
 8010a0c:	f104 0619 	add.w	r6, r4, #25
 8010a10:	e7f5      	b.n	80109fe <_printf_i+0x22e>
 8010a12:	bf00      	nop
 8010a14:	080134b5 	.word	0x080134b5
 8010a18:	080134c6 	.word	0x080134c6

08010a1c <iprintf>:
 8010a1c:	b40f      	push	{r0, r1, r2, r3}
 8010a1e:	4b0a      	ldr	r3, [pc, #40]	; (8010a48 <iprintf+0x2c>)
 8010a20:	b513      	push	{r0, r1, r4, lr}
 8010a22:	681c      	ldr	r4, [r3, #0]
 8010a24:	b124      	cbz	r4, 8010a30 <iprintf+0x14>
 8010a26:	69a3      	ldr	r3, [r4, #24]
 8010a28:	b913      	cbnz	r3, 8010a30 <iprintf+0x14>
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	f000 fa4c 	bl	8010ec8 <__sinit>
 8010a30:	ab05      	add	r3, sp, #20
 8010a32:	9a04      	ldr	r2, [sp, #16]
 8010a34:	68a1      	ldr	r1, [r4, #8]
 8010a36:	4620      	mov	r0, r4
 8010a38:	9301      	str	r3, [sp, #4]
 8010a3a:	f7ff fd29 	bl	8010490 <_vfiprintf_r>
 8010a3e:	b002      	add	sp, #8
 8010a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a44:	b004      	add	sp, #16
 8010a46:	4770      	bx	lr
 8010a48:	2000000c 	.word	0x2000000c

08010a4c <_sbrk_r>:
 8010a4c:	b538      	push	{r3, r4, r5, lr}
 8010a4e:	2300      	movs	r3, #0
 8010a50:	4d05      	ldr	r5, [pc, #20]	; (8010a68 <_sbrk_r+0x1c>)
 8010a52:	4604      	mov	r4, r0
 8010a54:	4608      	mov	r0, r1
 8010a56:	602b      	str	r3, [r5, #0]
 8010a58:	f7f7 fd58 	bl	800850c <_sbrk>
 8010a5c:	1c43      	adds	r3, r0, #1
 8010a5e:	d102      	bne.n	8010a66 <_sbrk_r+0x1a>
 8010a60:	682b      	ldr	r3, [r5, #0]
 8010a62:	b103      	cbz	r3, 8010a66 <_sbrk_r+0x1a>
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	bd38      	pop	{r3, r4, r5, pc}
 8010a68:	2000078c 	.word	0x2000078c

08010a6c <strchr>:
 8010a6c:	b2c9      	uxtb	r1, r1
 8010a6e:	4603      	mov	r3, r0
 8010a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a74:	b11a      	cbz	r2, 8010a7e <strchr+0x12>
 8010a76:	428a      	cmp	r2, r1
 8010a78:	d1f9      	bne.n	8010a6e <strchr+0x2>
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	4770      	bx	lr
 8010a7e:	2900      	cmp	r1, #0
 8010a80:	bf18      	it	ne
 8010a82:	2300      	movne	r3, #0
 8010a84:	e7f9      	b.n	8010a7a <strchr+0xe>

08010a86 <strcspn>:
 8010a86:	4603      	mov	r3, r0
 8010a88:	b570      	push	{r4, r5, r6, lr}
 8010a8a:	461e      	mov	r6, r3
 8010a8c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010a90:	b144      	cbz	r4, 8010aa4 <strcspn+0x1e>
 8010a92:	1e4a      	subs	r2, r1, #1
 8010a94:	e001      	b.n	8010a9a <strcspn+0x14>
 8010a96:	42a5      	cmp	r5, r4
 8010a98:	d004      	beq.n	8010aa4 <strcspn+0x1e>
 8010a9a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8010a9e:	2d00      	cmp	r5, #0
 8010aa0:	d1f9      	bne.n	8010a96 <strcspn+0x10>
 8010aa2:	e7f2      	b.n	8010a8a <strcspn+0x4>
 8010aa4:	1a30      	subs	r0, r6, r0
 8010aa6:	bd70      	pop	{r4, r5, r6, pc}

08010aa8 <strspn>:
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	b570      	push	{r4, r5, r6, lr}
 8010aac:	461e      	mov	r6, r3
 8010aae:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010ab2:	b13c      	cbz	r4, 8010ac4 <strspn+0x1c>
 8010ab4:	1e4a      	subs	r2, r1, #1
 8010ab6:	e001      	b.n	8010abc <strspn+0x14>
 8010ab8:	42a5      	cmp	r5, r4
 8010aba:	d0f7      	beq.n	8010aac <strspn+0x4>
 8010abc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8010ac0:	2d00      	cmp	r5, #0
 8010ac2:	d1f9      	bne.n	8010ab8 <strspn+0x10>
 8010ac4:	1a30      	subs	r0, r6, r0
 8010ac6:	bd70      	pop	{r4, r5, r6, pc}

08010ac8 <_vsiprintf_r>:
 8010ac8:	b500      	push	{lr}
 8010aca:	b09b      	sub	sp, #108	; 0x6c
 8010acc:	9100      	str	r1, [sp, #0]
 8010ace:	9104      	str	r1, [sp, #16]
 8010ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ad4:	9105      	str	r1, [sp, #20]
 8010ad6:	9102      	str	r1, [sp, #8]
 8010ad8:	4905      	ldr	r1, [pc, #20]	; (8010af0 <_vsiprintf_r+0x28>)
 8010ada:	9103      	str	r1, [sp, #12]
 8010adc:	4669      	mov	r1, sp
 8010ade:	f000 fbb7 	bl	8011250 <_svfiprintf_r>
 8010ae2:	9b00      	ldr	r3, [sp, #0]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	701a      	strb	r2, [r3, #0]
 8010ae8:	b01b      	add	sp, #108	; 0x6c
 8010aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aee:	bf00      	nop
 8010af0:	ffff0208 	.word	0xffff0208

08010af4 <vsiprintf>:
 8010af4:	4613      	mov	r3, r2
 8010af6:	460a      	mov	r2, r1
 8010af8:	4601      	mov	r1, r0
 8010afa:	4802      	ldr	r0, [pc, #8]	; (8010b04 <vsiprintf+0x10>)
 8010afc:	6800      	ldr	r0, [r0, #0]
 8010afe:	f7ff bfe3 	b.w	8010ac8 <_vsiprintf_r>
 8010b02:	bf00      	nop
 8010b04:	2000000c 	.word	0x2000000c

08010b08 <__swbuf_r>:
 8010b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0a:	460e      	mov	r6, r1
 8010b0c:	4614      	mov	r4, r2
 8010b0e:	4605      	mov	r5, r0
 8010b10:	b118      	cbz	r0, 8010b1a <__swbuf_r+0x12>
 8010b12:	6983      	ldr	r3, [r0, #24]
 8010b14:	b90b      	cbnz	r3, 8010b1a <__swbuf_r+0x12>
 8010b16:	f000 f9d7 	bl	8010ec8 <__sinit>
 8010b1a:	4b21      	ldr	r3, [pc, #132]	; (8010ba0 <__swbuf_r+0x98>)
 8010b1c:	429c      	cmp	r4, r3
 8010b1e:	d12b      	bne.n	8010b78 <__swbuf_r+0x70>
 8010b20:	686c      	ldr	r4, [r5, #4]
 8010b22:	69a3      	ldr	r3, [r4, #24]
 8010b24:	60a3      	str	r3, [r4, #8]
 8010b26:	89a3      	ldrh	r3, [r4, #12]
 8010b28:	071a      	lsls	r2, r3, #28
 8010b2a:	d52f      	bpl.n	8010b8c <__swbuf_r+0x84>
 8010b2c:	6923      	ldr	r3, [r4, #16]
 8010b2e:	b36b      	cbz	r3, 8010b8c <__swbuf_r+0x84>
 8010b30:	6923      	ldr	r3, [r4, #16]
 8010b32:	b2f6      	uxtb	r6, r6
 8010b34:	6820      	ldr	r0, [r4, #0]
 8010b36:	4637      	mov	r7, r6
 8010b38:	1ac0      	subs	r0, r0, r3
 8010b3a:	6963      	ldr	r3, [r4, #20]
 8010b3c:	4283      	cmp	r3, r0
 8010b3e:	dc04      	bgt.n	8010b4a <__swbuf_r+0x42>
 8010b40:	4621      	mov	r1, r4
 8010b42:	4628      	mov	r0, r5
 8010b44:	f000 f92c 	bl	8010da0 <_fflush_r>
 8010b48:	bb30      	cbnz	r0, 8010b98 <__swbuf_r+0x90>
 8010b4a:	68a3      	ldr	r3, [r4, #8]
 8010b4c:	3001      	adds	r0, #1
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	60a3      	str	r3, [r4, #8]
 8010b52:	6823      	ldr	r3, [r4, #0]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	6022      	str	r2, [r4, #0]
 8010b58:	701e      	strb	r6, [r3, #0]
 8010b5a:	6963      	ldr	r3, [r4, #20]
 8010b5c:	4283      	cmp	r3, r0
 8010b5e:	d004      	beq.n	8010b6a <__swbuf_r+0x62>
 8010b60:	89a3      	ldrh	r3, [r4, #12]
 8010b62:	07db      	lsls	r3, r3, #31
 8010b64:	d506      	bpl.n	8010b74 <__swbuf_r+0x6c>
 8010b66:	2e0a      	cmp	r6, #10
 8010b68:	d104      	bne.n	8010b74 <__swbuf_r+0x6c>
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f000 f917 	bl	8010da0 <_fflush_r>
 8010b72:	b988      	cbnz	r0, 8010b98 <__swbuf_r+0x90>
 8010b74:	4638      	mov	r0, r7
 8010b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b78:	4b0a      	ldr	r3, [pc, #40]	; (8010ba4 <__swbuf_r+0x9c>)
 8010b7a:	429c      	cmp	r4, r3
 8010b7c:	d101      	bne.n	8010b82 <__swbuf_r+0x7a>
 8010b7e:	68ac      	ldr	r4, [r5, #8]
 8010b80:	e7cf      	b.n	8010b22 <__swbuf_r+0x1a>
 8010b82:	4b09      	ldr	r3, [pc, #36]	; (8010ba8 <__swbuf_r+0xa0>)
 8010b84:	429c      	cmp	r4, r3
 8010b86:	bf08      	it	eq
 8010b88:	68ec      	ldreq	r4, [r5, #12]
 8010b8a:	e7ca      	b.n	8010b22 <__swbuf_r+0x1a>
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	4628      	mov	r0, r5
 8010b90:	f000 f80c 	bl	8010bac <__swsetup_r>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d0cb      	beq.n	8010b30 <__swbuf_r+0x28>
 8010b98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010b9c:	e7ea      	b.n	8010b74 <__swbuf_r+0x6c>
 8010b9e:	bf00      	nop
 8010ba0:	080134f8 	.word	0x080134f8
 8010ba4:	08013518 	.word	0x08013518
 8010ba8:	080134d8 	.word	0x080134d8

08010bac <__swsetup_r>:
 8010bac:	4b32      	ldr	r3, [pc, #200]	; (8010c78 <__swsetup_r+0xcc>)
 8010bae:	b570      	push	{r4, r5, r6, lr}
 8010bb0:	681d      	ldr	r5, [r3, #0]
 8010bb2:	4606      	mov	r6, r0
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	b125      	cbz	r5, 8010bc2 <__swsetup_r+0x16>
 8010bb8:	69ab      	ldr	r3, [r5, #24]
 8010bba:	b913      	cbnz	r3, 8010bc2 <__swsetup_r+0x16>
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	f000 f983 	bl	8010ec8 <__sinit>
 8010bc2:	4b2e      	ldr	r3, [pc, #184]	; (8010c7c <__swsetup_r+0xd0>)
 8010bc4:	429c      	cmp	r4, r3
 8010bc6:	d10f      	bne.n	8010be8 <__swsetup_r+0x3c>
 8010bc8:	686c      	ldr	r4, [r5, #4]
 8010bca:	89a3      	ldrh	r3, [r4, #12]
 8010bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bd0:	0719      	lsls	r1, r3, #28
 8010bd2:	d42c      	bmi.n	8010c2e <__swsetup_r+0x82>
 8010bd4:	06dd      	lsls	r5, r3, #27
 8010bd6:	d411      	bmi.n	8010bfc <__swsetup_r+0x50>
 8010bd8:	2309      	movs	r3, #9
 8010bda:	6033      	str	r3, [r6, #0]
 8010bdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010be4:	81a3      	strh	r3, [r4, #12]
 8010be6:	e03e      	b.n	8010c66 <__swsetup_r+0xba>
 8010be8:	4b25      	ldr	r3, [pc, #148]	; (8010c80 <__swsetup_r+0xd4>)
 8010bea:	429c      	cmp	r4, r3
 8010bec:	d101      	bne.n	8010bf2 <__swsetup_r+0x46>
 8010bee:	68ac      	ldr	r4, [r5, #8]
 8010bf0:	e7eb      	b.n	8010bca <__swsetup_r+0x1e>
 8010bf2:	4b24      	ldr	r3, [pc, #144]	; (8010c84 <__swsetup_r+0xd8>)
 8010bf4:	429c      	cmp	r4, r3
 8010bf6:	bf08      	it	eq
 8010bf8:	68ec      	ldreq	r4, [r5, #12]
 8010bfa:	e7e6      	b.n	8010bca <__swsetup_r+0x1e>
 8010bfc:	0758      	lsls	r0, r3, #29
 8010bfe:	d512      	bpl.n	8010c26 <__swsetup_r+0x7a>
 8010c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c02:	b141      	cbz	r1, 8010c16 <__swsetup_r+0x6a>
 8010c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c08:	4299      	cmp	r1, r3
 8010c0a:	d002      	beq.n	8010c12 <__swsetup_r+0x66>
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	f7ff fb35 	bl	801027c <_free_r>
 8010c12:	2300      	movs	r3, #0
 8010c14:	6363      	str	r3, [r4, #52]	; 0x34
 8010c16:	89a3      	ldrh	r3, [r4, #12]
 8010c18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c1c:	81a3      	strh	r3, [r4, #12]
 8010c1e:	2300      	movs	r3, #0
 8010c20:	6063      	str	r3, [r4, #4]
 8010c22:	6923      	ldr	r3, [r4, #16]
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	89a3      	ldrh	r3, [r4, #12]
 8010c28:	f043 0308 	orr.w	r3, r3, #8
 8010c2c:	81a3      	strh	r3, [r4, #12]
 8010c2e:	6923      	ldr	r3, [r4, #16]
 8010c30:	b94b      	cbnz	r3, 8010c46 <__swsetup_r+0x9a>
 8010c32:	89a3      	ldrh	r3, [r4, #12]
 8010c34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c3c:	d003      	beq.n	8010c46 <__swsetup_r+0x9a>
 8010c3e:	4621      	mov	r1, r4
 8010c40:	4630      	mov	r0, r6
 8010c42:	f000 fa07 	bl	8011054 <__smakebuf_r>
 8010c46:	89a0      	ldrh	r0, [r4, #12]
 8010c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c4c:	f010 0301 	ands.w	r3, r0, #1
 8010c50:	d00a      	beq.n	8010c68 <__swsetup_r+0xbc>
 8010c52:	2300      	movs	r3, #0
 8010c54:	60a3      	str	r3, [r4, #8]
 8010c56:	6963      	ldr	r3, [r4, #20]
 8010c58:	425b      	negs	r3, r3
 8010c5a:	61a3      	str	r3, [r4, #24]
 8010c5c:	6923      	ldr	r3, [r4, #16]
 8010c5e:	b943      	cbnz	r3, 8010c72 <__swsetup_r+0xc6>
 8010c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c64:	d1ba      	bne.n	8010bdc <__swsetup_r+0x30>
 8010c66:	bd70      	pop	{r4, r5, r6, pc}
 8010c68:	0781      	lsls	r1, r0, #30
 8010c6a:	bf58      	it	pl
 8010c6c:	6963      	ldrpl	r3, [r4, #20]
 8010c6e:	60a3      	str	r3, [r4, #8]
 8010c70:	e7f4      	b.n	8010c5c <__swsetup_r+0xb0>
 8010c72:	2000      	movs	r0, #0
 8010c74:	e7f7      	b.n	8010c66 <__swsetup_r+0xba>
 8010c76:	bf00      	nop
 8010c78:	2000000c 	.word	0x2000000c
 8010c7c:	080134f8 	.word	0x080134f8
 8010c80:	08013518 	.word	0x08013518
 8010c84:	080134d8 	.word	0x080134d8

08010c88 <abort>:
 8010c88:	2006      	movs	r0, #6
 8010c8a:	b508      	push	{r3, lr}
 8010c8c:	f000 fc08 	bl	80114a0 <raise>
 8010c90:	2001      	movs	r0, #1
 8010c92:	f7f7 fbc3 	bl	800841c <_exit>
	...

08010c98 <__sflush_r>:
 8010c98:	898a      	ldrh	r2, [r1, #12]
 8010c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	0710      	lsls	r0, r2, #28
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	d458      	bmi.n	8010d58 <__sflush_r+0xc0>
 8010ca6:	684b      	ldr	r3, [r1, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dc05      	bgt.n	8010cb8 <__sflush_r+0x20>
 8010cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	dc02      	bgt.n	8010cb8 <__sflush_r+0x20>
 8010cb2:	2000      	movs	r0, #0
 8010cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cba:	2e00      	cmp	r6, #0
 8010cbc:	d0f9      	beq.n	8010cb2 <__sflush_r+0x1a>
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010cc4:	682f      	ldr	r7, [r5, #0]
 8010cc6:	602b      	str	r3, [r5, #0]
 8010cc8:	d032      	beq.n	8010d30 <__sflush_r+0x98>
 8010cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ccc:	89a3      	ldrh	r3, [r4, #12]
 8010cce:	075a      	lsls	r2, r3, #29
 8010cd0:	d505      	bpl.n	8010cde <__sflush_r+0x46>
 8010cd2:	6863      	ldr	r3, [r4, #4]
 8010cd4:	1ac0      	subs	r0, r0, r3
 8010cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cd8:	b10b      	cbz	r3, 8010cde <__sflush_r+0x46>
 8010cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cdc:	1ac0      	subs	r0, r0, r3
 8010cde:	2300      	movs	r3, #0
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	6a21      	ldr	r1, [r4, #32]
 8010ce8:	47b0      	blx	r6
 8010cea:	1c43      	adds	r3, r0, #1
 8010cec:	89a3      	ldrh	r3, [r4, #12]
 8010cee:	d106      	bne.n	8010cfe <__sflush_r+0x66>
 8010cf0:	6829      	ldr	r1, [r5, #0]
 8010cf2:	291d      	cmp	r1, #29
 8010cf4:	d82c      	bhi.n	8010d50 <__sflush_r+0xb8>
 8010cf6:	4a29      	ldr	r2, [pc, #164]	; (8010d9c <__sflush_r+0x104>)
 8010cf8:	40ca      	lsrs	r2, r1
 8010cfa:	07d6      	lsls	r6, r2, #31
 8010cfc:	d528      	bpl.n	8010d50 <__sflush_r+0xb8>
 8010cfe:	2200      	movs	r2, #0
 8010d00:	04d9      	lsls	r1, r3, #19
 8010d02:	6062      	str	r2, [r4, #4]
 8010d04:	6922      	ldr	r2, [r4, #16]
 8010d06:	6022      	str	r2, [r4, #0]
 8010d08:	d504      	bpl.n	8010d14 <__sflush_r+0x7c>
 8010d0a:	1c42      	adds	r2, r0, #1
 8010d0c:	d101      	bne.n	8010d12 <__sflush_r+0x7a>
 8010d0e:	682b      	ldr	r3, [r5, #0]
 8010d10:	b903      	cbnz	r3, 8010d14 <__sflush_r+0x7c>
 8010d12:	6560      	str	r0, [r4, #84]	; 0x54
 8010d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d16:	602f      	str	r7, [r5, #0]
 8010d18:	2900      	cmp	r1, #0
 8010d1a:	d0ca      	beq.n	8010cb2 <__sflush_r+0x1a>
 8010d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d20:	4299      	cmp	r1, r3
 8010d22:	d002      	beq.n	8010d2a <__sflush_r+0x92>
 8010d24:	4628      	mov	r0, r5
 8010d26:	f7ff faa9 	bl	801027c <_free_r>
 8010d2a:	2000      	movs	r0, #0
 8010d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8010d2e:	e7c1      	b.n	8010cb4 <__sflush_r+0x1c>
 8010d30:	6a21      	ldr	r1, [r4, #32]
 8010d32:	2301      	movs	r3, #1
 8010d34:	4628      	mov	r0, r5
 8010d36:	47b0      	blx	r6
 8010d38:	1c41      	adds	r1, r0, #1
 8010d3a:	d1c7      	bne.n	8010ccc <__sflush_r+0x34>
 8010d3c:	682b      	ldr	r3, [r5, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d0c4      	beq.n	8010ccc <__sflush_r+0x34>
 8010d42:	2b1d      	cmp	r3, #29
 8010d44:	d001      	beq.n	8010d4a <__sflush_r+0xb2>
 8010d46:	2b16      	cmp	r3, #22
 8010d48:	d101      	bne.n	8010d4e <__sflush_r+0xb6>
 8010d4a:	602f      	str	r7, [r5, #0]
 8010d4c:	e7b1      	b.n	8010cb2 <__sflush_r+0x1a>
 8010d4e:	89a3      	ldrh	r3, [r4, #12]
 8010d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d54:	81a3      	strh	r3, [r4, #12]
 8010d56:	e7ad      	b.n	8010cb4 <__sflush_r+0x1c>
 8010d58:	690f      	ldr	r7, [r1, #16]
 8010d5a:	2f00      	cmp	r7, #0
 8010d5c:	d0a9      	beq.n	8010cb2 <__sflush_r+0x1a>
 8010d5e:	0793      	lsls	r3, r2, #30
 8010d60:	680e      	ldr	r6, [r1, #0]
 8010d62:	600f      	str	r7, [r1, #0]
 8010d64:	bf0c      	ite	eq
 8010d66:	694b      	ldreq	r3, [r1, #20]
 8010d68:	2300      	movne	r3, #0
 8010d6a:	eba6 0807 	sub.w	r8, r6, r7
 8010d6e:	608b      	str	r3, [r1, #8]
 8010d70:	f1b8 0f00 	cmp.w	r8, #0
 8010d74:	dd9d      	ble.n	8010cb2 <__sflush_r+0x1a>
 8010d76:	4643      	mov	r3, r8
 8010d78:	463a      	mov	r2, r7
 8010d7a:	6a21      	ldr	r1, [r4, #32]
 8010d7c:	4628      	mov	r0, r5
 8010d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d80:	47b0      	blx	r6
 8010d82:	2800      	cmp	r0, #0
 8010d84:	dc06      	bgt.n	8010d94 <__sflush_r+0xfc>
 8010d86:	89a3      	ldrh	r3, [r4, #12]
 8010d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d90:	81a3      	strh	r3, [r4, #12]
 8010d92:	e78f      	b.n	8010cb4 <__sflush_r+0x1c>
 8010d94:	4407      	add	r7, r0
 8010d96:	eba8 0800 	sub.w	r8, r8, r0
 8010d9a:	e7e9      	b.n	8010d70 <__sflush_r+0xd8>
 8010d9c:	20400001 	.word	0x20400001

08010da0 <_fflush_r>:
 8010da0:	b538      	push	{r3, r4, r5, lr}
 8010da2:	690b      	ldr	r3, [r1, #16]
 8010da4:	4605      	mov	r5, r0
 8010da6:	460c      	mov	r4, r1
 8010da8:	b913      	cbnz	r3, 8010db0 <_fflush_r+0x10>
 8010daa:	2500      	movs	r5, #0
 8010dac:	4628      	mov	r0, r5
 8010dae:	bd38      	pop	{r3, r4, r5, pc}
 8010db0:	b118      	cbz	r0, 8010dba <_fflush_r+0x1a>
 8010db2:	6983      	ldr	r3, [r0, #24]
 8010db4:	b90b      	cbnz	r3, 8010dba <_fflush_r+0x1a>
 8010db6:	f000 f887 	bl	8010ec8 <__sinit>
 8010dba:	4b14      	ldr	r3, [pc, #80]	; (8010e0c <_fflush_r+0x6c>)
 8010dbc:	429c      	cmp	r4, r3
 8010dbe:	d11b      	bne.n	8010df8 <_fflush_r+0x58>
 8010dc0:	686c      	ldr	r4, [r5, #4]
 8010dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d0ef      	beq.n	8010daa <_fflush_r+0xa>
 8010dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010dcc:	07d0      	lsls	r0, r2, #31
 8010dce:	d404      	bmi.n	8010dda <_fflush_r+0x3a>
 8010dd0:	0599      	lsls	r1, r3, #22
 8010dd2:	d402      	bmi.n	8010dda <_fflush_r+0x3a>
 8010dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dd6:	f000 f915 	bl	8011004 <__retarget_lock_acquire_recursive>
 8010dda:	4628      	mov	r0, r5
 8010ddc:	4621      	mov	r1, r4
 8010dde:	f7ff ff5b 	bl	8010c98 <__sflush_r>
 8010de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010de4:	4605      	mov	r5, r0
 8010de6:	07da      	lsls	r2, r3, #31
 8010de8:	d4e0      	bmi.n	8010dac <_fflush_r+0xc>
 8010dea:	89a3      	ldrh	r3, [r4, #12]
 8010dec:	059b      	lsls	r3, r3, #22
 8010dee:	d4dd      	bmi.n	8010dac <_fflush_r+0xc>
 8010df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010df2:	f000 f908 	bl	8011006 <__retarget_lock_release_recursive>
 8010df6:	e7d9      	b.n	8010dac <_fflush_r+0xc>
 8010df8:	4b05      	ldr	r3, [pc, #20]	; (8010e10 <_fflush_r+0x70>)
 8010dfa:	429c      	cmp	r4, r3
 8010dfc:	d101      	bne.n	8010e02 <_fflush_r+0x62>
 8010dfe:	68ac      	ldr	r4, [r5, #8]
 8010e00:	e7df      	b.n	8010dc2 <_fflush_r+0x22>
 8010e02:	4b04      	ldr	r3, [pc, #16]	; (8010e14 <_fflush_r+0x74>)
 8010e04:	429c      	cmp	r4, r3
 8010e06:	bf08      	it	eq
 8010e08:	68ec      	ldreq	r4, [r5, #12]
 8010e0a:	e7da      	b.n	8010dc2 <_fflush_r+0x22>
 8010e0c:	080134f8 	.word	0x080134f8
 8010e10:	08013518 	.word	0x08013518
 8010e14:	080134d8 	.word	0x080134d8

08010e18 <std>:
 8010e18:	2300      	movs	r3, #0
 8010e1a:	b510      	push	{r4, lr}
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	6083      	str	r3, [r0, #8]
 8010e20:	8181      	strh	r1, [r0, #12]
 8010e22:	4619      	mov	r1, r3
 8010e24:	6643      	str	r3, [r0, #100]	; 0x64
 8010e26:	81c2      	strh	r2, [r0, #14]
 8010e28:	2208      	movs	r2, #8
 8010e2a:	6183      	str	r3, [r0, #24]
 8010e2c:	e9c0 3300 	strd	r3, r3, [r0]
 8010e30:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e34:	305c      	adds	r0, #92	; 0x5c
 8010e36:	f7ff fa18 	bl	801026a <memset>
 8010e3a:	4b05      	ldr	r3, [pc, #20]	; (8010e50 <std+0x38>)
 8010e3c:	6224      	str	r4, [r4, #32]
 8010e3e:	6263      	str	r3, [r4, #36]	; 0x24
 8010e40:	4b04      	ldr	r3, [pc, #16]	; (8010e54 <std+0x3c>)
 8010e42:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e44:	4b04      	ldr	r3, [pc, #16]	; (8010e58 <std+0x40>)
 8010e46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e48:	4b04      	ldr	r3, [pc, #16]	; (8010e5c <std+0x44>)
 8010e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8010e4c:	bd10      	pop	{r4, pc}
 8010e4e:	bf00      	nop
 8010e50:	080114d9 	.word	0x080114d9
 8010e54:	080114fb 	.word	0x080114fb
 8010e58:	08011533 	.word	0x08011533
 8010e5c:	08011557 	.word	0x08011557

08010e60 <_cleanup_r>:
 8010e60:	4901      	ldr	r1, [pc, #4]	; (8010e68 <_cleanup_r+0x8>)
 8010e62:	f000 b8af 	b.w	8010fc4 <_fwalk_reent>
 8010e66:	bf00      	nop
 8010e68:	08010da1 	.word	0x08010da1

08010e6c <__sfmoreglue>:
 8010e6c:	b570      	push	{r4, r5, r6, lr}
 8010e6e:	2268      	movs	r2, #104	; 0x68
 8010e70:	1e4d      	subs	r5, r1, #1
 8010e72:	460e      	mov	r6, r1
 8010e74:	4355      	muls	r5, r2
 8010e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e7a:	f7ff fa6b 	bl	8010354 <_malloc_r>
 8010e7e:	4604      	mov	r4, r0
 8010e80:	b140      	cbz	r0, 8010e94 <__sfmoreglue+0x28>
 8010e82:	2100      	movs	r1, #0
 8010e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e88:	e9c0 1600 	strd	r1, r6, [r0]
 8010e8c:	300c      	adds	r0, #12
 8010e8e:	60a0      	str	r0, [r4, #8]
 8010e90:	f7ff f9eb 	bl	801026a <memset>
 8010e94:	4620      	mov	r0, r4
 8010e96:	bd70      	pop	{r4, r5, r6, pc}

08010e98 <__sfp_lock_acquire>:
 8010e98:	4801      	ldr	r0, [pc, #4]	; (8010ea0 <__sfp_lock_acquire+0x8>)
 8010e9a:	f000 b8b3 	b.w	8011004 <__retarget_lock_acquire_recursive>
 8010e9e:	bf00      	nop
 8010ea0:	20000789 	.word	0x20000789

08010ea4 <__sfp_lock_release>:
 8010ea4:	4801      	ldr	r0, [pc, #4]	; (8010eac <__sfp_lock_release+0x8>)
 8010ea6:	f000 b8ae 	b.w	8011006 <__retarget_lock_release_recursive>
 8010eaa:	bf00      	nop
 8010eac:	20000789 	.word	0x20000789

08010eb0 <__sinit_lock_acquire>:
 8010eb0:	4801      	ldr	r0, [pc, #4]	; (8010eb8 <__sinit_lock_acquire+0x8>)
 8010eb2:	f000 b8a7 	b.w	8011004 <__retarget_lock_acquire_recursive>
 8010eb6:	bf00      	nop
 8010eb8:	2000078a 	.word	0x2000078a

08010ebc <__sinit_lock_release>:
 8010ebc:	4801      	ldr	r0, [pc, #4]	; (8010ec4 <__sinit_lock_release+0x8>)
 8010ebe:	f000 b8a2 	b.w	8011006 <__retarget_lock_release_recursive>
 8010ec2:	bf00      	nop
 8010ec4:	2000078a 	.word	0x2000078a

08010ec8 <__sinit>:
 8010ec8:	b510      	push	{r4, lr}
 8010eca:	4604      	mov	r4, r0
 8010ecc:	f7ff fff0 	bl	8010eb0 <__sinit_lock_acquire>
 8010ed0:	69a3      	ldr	r3, [r4, #24]
 8010ed2:	b11b      	cbz	r3, 8010edc <__sinit+0x14>
 8010ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ed8:	f7ff bff0 	b.w	8010ebc <__sinit_lock_release>
 8010edc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010ee0:	6523      	str	r3, [r4, #80]	; 0x50
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	4b12      	ldr	r3, [pc, #72]	; (8010f30 <__sinit+0x68>)
 8010ee6:	4a13      	ldr	r2, [pc, #76]	; (8010f34 <__sinit+0x6c>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	62a2      	str	r2, [r4, #40]	; 0x28
 8010eec:	42a3      	cmp	r3, r4
 8010eee:	bf04      	itt	eq
 8010ef0:	2301      	moveq	r3, #1
 8010ef2:	61a3      	streq	r3, [r4, #24]
 8010ef4:	f000 f820 	bl	8010f38 <__sfp>
 8010ef8:	6060      	str	r0, [r4, #4]
 8010efa:	4620      	mov	r0, r4
 8010efc:	f000 f81c 	bl	8010f38 <__sfp>
 8010f00:	60a0      	str	r0, [r4, #8]
 8010f02:	4620      	mov	r0, r4
 8010f04:	f000 f818 	bl	8010f38 <__sfp>
 8010f08:	2200      	movs	r2, #0
 8010f0a:	2104      	movs	r1, #4
 8010f0c:	60e0      	str	r0, [r4, #12]
 8010f0e:	6860      	ldr	r0, [r4, #4]
 8010f10:	f7ff ff82 	bl	8010e18 <std>
 8010f14:	2201      	movs	r2, #1
 8010f16:	2109      	movs	r1, #9
 8010f18:	68a0      	ldr	r0, [r4, #8]
 8010f1a:	f7ff ff7d 	bl	8010e18 <std>
 8010f1e:	2202      	movs	r2, #2
 8010f20:	2112      	movs	r1, #18
 8010f22:	68e0      	ldr	r0, [r4, #12]
 8010f24:	f7ff ff78 	bl	8010e18 <std>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	61a3      	str	r3, [r4, #24]
 8010f2c:	e7d2      	b.n	8010ed4 <__sinit+0xc>
 8010f2e:	bf00      	nop
 8010f30:	080134a0 	.word	0x080134a0
 8010f34:	08010e61 	.word	0x08010e61

08010f38 <__sfp>:
 8010f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3a:	4607      	mov	r7, r0
 8010f3c:	f7ff ffac 	bl	8010e98 <__sfp_lock_acquire>
 8010f40:	4b1e      	ldr	r3, [pc, #120]	; (8010fbc <__sfp+0x84>)
 8010f42:	681e      	ldr	r6, [r3, #0]
 8010f44:	69b3      	ldr	r3, [r6, #24]
 8010f46:	b913      	cbnz	r3, 8010f4e <__sfp+0x16>
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f7ff ffbd 	bl	8010ec8 <__sinit>
 8010f4e:	3648      	adds	r6, #72	; 0x48
 8010f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f54:	3b01      	subs	r3, #1
 8010f56:	d503      	bpl.n	8010f60 <__sfp+0x28>
 8010f58:	6833      	ldr	r3, [r6, #0]
 8010f5a:	b30b      	cbz	r3, 8010fa0 <__sfp+0x68>
 8010f5c:	6836      	ldr	r6, [r6, #0]
 8010f5e:	e7f7      	b.n	8010f50 <__sfp+0x18>
 8010f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f64:	b9d5      	cbnz	r5, 8010f9c <__sfp+0x64>
 8010f66:	4b16      	ldr	r3, [pc, #88]	; (8010fc0 <__sfp+0x88>)
 8010f68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f6c:	6665      	str	r5, [r4, #100]	; 0x64
 8010f6e:	60e3      	str	r3, [r4, #12]
 8010f70:	f000 f847 	bl	8011002 <__retarget_lock_init_recursive>
 8010f74:	f7ff ff96 	bl	8010ea4 <__sfp_lock_release>
 8010f78:	2208      	movs	r2, #8
 8010f7a:	4629      	mov	r1, r5
 8010f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f80:	6025      	str	r5, [r4, #0]
 8010f82:	61a5      	str	r5, [r4, #24]
 8010f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f8c:	f7ff f96d 	bl	801026a <memset>
 8010f90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f98:	4620      	mov	r0, r4
 8010f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f9c:	3468      	adds	r4, #104	; 0x68
 8010f9e:	e7d9      	b.n	8010f54 <__sfp+0x1c>
 8010fa0:	2104      	movs	r1, #4
 8010fa2:	4638      	mov	r0, r7
 8010fa4:	f7ff ff62 	bl	8010e6c <__sfmoreglue>
 8010fa8:	4604      	mov	r4, r0
 8010faa:	6030      	str	r0, [r6, #0]
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d1d5      	bne.n	8010f5c <__sfp+0x24>
 8010fb0:	f7ff ff78 	bl	8010ea4 <__sfp_lock_release>
 8010fb4:	230c      	movs	r3, #12
 8010fb6:	603b      	str	r3, [r7, #0]
 8010fb8:	e7ee      	b.n	8010f98 <__sfp+0x60>
 8010fba:	bf00      	nop
 8010fbc:	080134a0 	.word	0x080134a0
 8010fc0:	ffff0001 	.word	0xffff0001

08010fc4 <_fwalk_reent>:
 8010fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fc8:	4606      	mov	r6, r0
 8010fca:	4688      	mov	r8, r1
 8010fcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010fd0:	2700      	movs	r7, #0
 8010fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8010fda:	d505      	bpl.n	8010fe8 <_fwalk_reent+0x24>
 8010fdc:	6824      	ldr	r4, [r4, #0]
 8010fde:	2c00      	cmp	r4, #0
 8010fe0:	d1f7      	bne.n	8010fd2 <_fwalk_reent+0xe>
 8010fe2:	4638      	mov	r0, r7
 8010fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fe8:	89ab      	ldrh	r3, [r5, #12]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d907      	bls.n	8010ffe <_fwalk_reent+0x3a>
 8010fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	d003      	beq.n	8010ffe <_fwalk_reent+0x3a>
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	47c0      	blx	r8
 8010ffc:	4307      	orrs	r7, r0
 8010ffe:	3568      	adds	r5, #104	; 0x68
 8011000:	e7e9      	b.n	8010fd6 <_fwalk_reent+0x12>

08011002 <__retarget_lock_init_recursive>:
 8011002:	4770      	bx	lr

08011004 <__retarget_lock_acquire_recursive>:
 8011004:	4770      	bx	lr

08011006 <__retarget_lock_release_recursive>:
 8011006:	4770      	bx	lr

08011008 <__swhatbuf_r>:
 8011008:	b570      	push	{r4, r5, r6, lr}
 801100a:	460e      	mov	r6, r1
 801100c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011010:	b096      	sub	sp, #88	; 0x58
 8011012:	4614      	mov	r4, r2
 8011014:	2900      	cmp	r1, #0
 8011016:	461d      	mov	r5, r3
 8011018:	da08      	bge.n	801102c <__swhatbuf_r+0x24>
 801101a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801101e:	2200      	movs	r2, #0
 8011020:	602a      	str	r2, [r5, #0]
 8011022:	061a      	lsls	r2, r3, #24
 8011024:	d410      	bmi.n	8011048 <__swhatbuf_r+0x40>
 8011026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801102a:	e00e      	b.n	801104a <__swhatbuf_r+0x42>
 801102c:	466a      	mov	r2, sp
 801102e:	f000 fab9 	bl	80115a4 <_fstat_r>
 8011032:	2800      	cmp	r0, #0
 8011034:	dbf1      	blt.n	801101a <__swhatbuf_r+0x12>
 8011036:	9a01      	ldr	r2, [sp, #4]
 8011038:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801103c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011040:	425a      	negs	r2, r3
 8011042:	415a      	adcs	r2, r3
 8011044:	602a      	str	r2, [r5, #0]
 8011046:	e7ee      	b.n	8011026 <__swhatbuf_r+0x1e>
 8011048:	2340      	movs	r3, #64	; 0x40
 801104a:	2000      	movs	r0, #0
 801104c:	6023      	str	r3, [r4, #0]
 801104e:	b016      	add	sp, #88	; 0x58
 8011050:	bd70      	pop	{r4, r5, r6, pc}
	...

08011054 <__smakebuf_r>:
 8011054:	898b      	ldrh	r3, [r1, #12]
 8011056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011058:	079d      	lsls	r5, r3, #30
 801105a:	4606      	mov	r6, r0
 801105c:	460c      	mov	r4, r1
 801105e:	d507      	bpl.n	8011070 <__smakebuf_r+0x1c>
 8011060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011064:	6023      	str	r3, [r4, #0]
 8011066:	6123      	str	r3, [r4, #16]
 8011068:	2301      	movs	r3, #1
 801106a:	6163      	str	r3, [r4, #20]
 801106c:	b002      	add	sp, #8
 801106e:	bd70      	pop	{r4, r5, r6, pc}
 8011070:	ab01      	add	r3, sp, #4
 8011072:	466a      	mov	r2, sp
 8011074:	f7ff ffc8 	bl	8011008 <__swhatbuf_r>
 8011078:	9900      	ldr	r1, [sp, #0]
 801107a:	4605      	mov	r5, r0
 801107c:	4630      	mov	r0, r6
 801107e:	f7ff f969 	bl	8010354 <_malloc_r>
 8011082:	b948      	cbnz	r0, 8011098 <__smakebuf_r+0x44>
 8011084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011088:	059a      	lsls	r2, r3, #22
 801108a:	d4ef      	bmi.n	801106c <__smakebuf_r+0x18>
 801108c:	f023 0303 	bic.w	r3, r3, #3
 8011090:	f043 0302 	orr.w	r3, r3, #2
 8011094:	81a3      	strh	r3, [r4, #12]
 8011096:	e7e3      	b.n	8011060 <__smakebuf_r+0xc>
 8011098:	4b0d      	ldr	r3, [pc, #52]	; (80110d0 <__smakebuf_r+0x7c>)
 801109a:	62b3      	str	r3, [r6, #40]	; 0x28
 801109c:	89a3      	ldrh	r3, [r4, #12]
 801109e:	6020      	str	r0, [r4, #0]
 80110a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110a4:	6120      	str	r0, [r4, #16]
 80110a6:	81a3      	strh	r3, [r4, #12]
 80110a8:	9b00      	ldr	r3, [sp, #0]
 80110aa:	6163      	str	r3, [r4, #20]
 80110ac:	9b01      	ldr	r3, [sp, #4]
 80110ae:	b15b      	cbz	r3, 80110c8 <__smakebuf_r+0x74>
 80110b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110b4:	4630      	mov	r0, r6
 80110b6:	f000 fa87 	bl	80115c8 <_isatty_r>
 80110ba:	b128      	cbz	r0, 80110c8 <__smakebuf_r+0x74>
 80110bc:	89a3      	ldrh	r3, [r4, #12]
 80110be:	f023 0303 	bic.w	r3, r3, #3
 80110c2:	f043 0301 	orr.w	r3, r3, #1
 80110c6:	81a3      	strh	r3, [r4, #12]
 80110c8:	89a0      	ldrh	r0, [r4, #12]
 80110ca:	4305      	orrs	r5, r0
 80110cc:	81a5      	strh	r5, [r4, #12]
 80110ce:	e7cd      	b.n	801106c <__smakebuf_r+0x18>
 80110d0:	08010e61 	.word	0x08010e61

080110d4 <memchr>:
 80110d4:	b2c9      	uxtb	r1, r1
 80110d6:	4402      	add	r2, r0
 80110d8:	b510      	push	{r4, lr}
 80110da:	4290      	cmp	r0, r2
 80110dc:	4603      	mov	r3, r0
 80110de:	d101      	bne.n	80110e4 <memchr+0x10>
 80110e0:	2300      	movs	r3, #0
 80110e2:	e003      	b.n	80110ec <memchr+0x18>
 80110e4:	781c      	ldrb	r4, [r3, #0]
 80110e6:	3001      	adds	r0, #1
 80110e8:	428c      	cmp	r4, r1
 80110ea:	d1f6      	bne.n	80110da <memchr+0x6>
 80110ec:	4618      	mov	r0, r3
 80110ee:	bd10      	pop	{r4, pc}

080110f0 <memmove>:
 80110f0:	4288      	cmp	r0, r1
 80110f2:	b510      	push	{r4, lr}
 80110f4:	eb01 0402 	add.w	r4, r1, r2
 80110f8:	d902      	bls.n	8011100 <memmove+0x10>
 80110fa:	4284      	cmp	r4, r0
 80110fc:	4623      	mov	r3, r4
 80110fe:	d807      	bhi.n	8011110 <memmove+0x20>
 8011100:	1e43      	subs	r3, r0, #1
 8011102:	42a1      	cmp	r1, r4
 8011104:	d008      	beq.n	8011118 <memmove+0x28>
 8011106:	f811 2b01 	ldrb.w	r2, [r1], #1
 801110a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801110e:	e7f8      	b.n	8011102 <memmove+0x12>
 8011110:	4402      	add	r2, r0
 8011112:	4601      	mov	r1, r0
 8011114:	428a      	cmp	r2, r1
 8011116:	d100      	bne.n	801111a <memmove+0x2a>
 8011118:	bd10      	pop	{r4, pc}
 801111a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801111e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011122:	e7f7      	b.n	8011114 <memmove+0x24>

08011124 <__malloc_lock>:
 8011124:	4801      	ldr	r0, [pc, #4]	; (801112c <__malloc_lock+0x8>)
 8011126:	f7ff bf6d 	b.w	8011004 <__retarget_lock_acquire_recursive>
 801112a:	bf00      	nop
 801112c:	20000788 	.word	0x20000788

08011130 <__malloc_unlock>:
 8011130:	4801      	ldr	r0, [pc, #4]	; (8011138 <__malloc_unlock+0x8>)
 8011132:	f7ff bf68 	b.w	8011006 <__retarget_lock_release_recursive>
 8011136:	bf00      	nop
 8011138:	20000788 	.word	0x20000788

0801113c <_realloc_r>:
 801113c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011140:	4680      	mov	r8, r0
 8011142:	4614      	mov	r4, r2
 8011144:	460e      	mov	r6, r1
 8011146:	b921      	cbnz	r1, 8011152 <_realloc_r+0x16>
 8011148:	4611      	mov	r1, r2
 801114a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801114e:	f7ff b901 	b.w	8010354 <_malloc_r>
 8011152:	b92a      	cbnz	r2, 8011160 <_realloc_r+0x24>
 8011154:	4625      	mov	r5, r4
 8011156:	f7ff f891 	bl	801027c <_free_r>
 801115a:	4628      	mov	r0, r5
 801115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011160:	f000 fa54 	bl	801160c <_malloc_usable_size_r>
 8011164:	4284      	cmp	r4, r0
 8011166:	4607      	mov	r7, r0
 8011168:	d802      	bhi.n	8011170 <_realloc_r+0x34>
 801116a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801116e:	d812      	bhi.n	8011196 <_realloc_r+0x5a>
 8011170:	4621      	mov	r1, r4
 8011172:	4640      	mov	r0, r8
 8011174:	f7ff f8ee 	bl	8010354 <_malloc_r>
 8011178:	4605      	mov	r5, r0
 801117a:	2800      	cmp	r0, #0
 801117c:	d0ed      	beq.n	801115a <_realloc_r+0x1e>
 801117e:	42bc      	cmp	r4, r7
 8011180:	4622      	mov	r2, r4
 8011182:	4631      	mov	r1, r6
 8011184:	bf28      	it	cs
 8011186:	463a      	movcs	r2, r7
 8011188:	f7ff f862 	bl	8010250 <memcpy>
 801118c:	4631      	mov	r1, r6
 801118e:	4640      	mov	r0, r8
 8011190:	f7ff f874 	bl	801027c <_free_r>
 8011194:	e7e1      	b.n	801115a <_realloc_r+0x1e>
 8011196:	4635      	mov	r5, r6
 8011198:	e7df      	b.n	801115a <_realloc_r+0x1e>

0801119a <__ssputs_r>:
 801119a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801119e:	688e      	ldr	r6, [r1, #8]
 80111a0:	4682      	mov	sl, r0
 80111a2:	460c      	mov	r4, r1
 80111a4:	4690      	mov	r8, r2
 80111a6:	429e      	cmp	r6, r3
 80111a8:	461f      	mov	r7, r3
 80111aa:	d838      	bhi.n	801121e <__ssputs_r+0x84>
 80111ac:	898a      	ldrh	r2, [r1, #12]
 80111ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80111b2:	d032      	beq.n	801121a <__ssputs_r+0x80>
 80111b4:	6825      	ldr	r5, [r4, #0]
 80111b6:	3301      	adds	r3, #1
 80111b8:	6909      	ldr	r1, [r1, #16]
 80111ba:	eba5 0901 	sub.w	r9, r5, r1
 80111be:	6965      	ldr	r5, [r4, #20]
 80111c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111c4:	444b      	add	r3, r9
 80111c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111ca:	106d      	asrs	r5, r5, #1
 80111cc:	429d      	cmp	r5, r3
 80111ce:	bf38      	it	cc
 80111d0:	461d      	movcc	r5, r3
 80111d2:	0553      	lsls	r3, r2, #21
 80111d4:	d531      	bpl.n	801123a <__ssputs_r+0xa0>
 80111d6:	4629      	mov	r1, r5
 80111d8:	f7ff f8bc 	bl	8010354 <_malloc_r>
 80111dc:	4606      	mov	r6, r0
 80111de:	b950      	cbnz	r0, 80111f6 <__ssputs_r+0x5c>
 80111e0:	230c      	movs	r3, #12
 80111e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111e6:	f8ca 3000 	str.w	r3, [sl]
 80111ea:	89a3      	ldrh	r3, [r4, #12]
 80111ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111f0:	81a3      	strh	r3, [r4, #12]
 80111f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111f6:	464a      	mov	r2, r9
 80111f8:	6921      	ldr	r1, [r4, #16]
 80111fa:	f7ff f829 	bl	8010250 <memcpy>
 80111fe:	89a3      	ldrh	r3, [r4, #12]
 8011200:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011208:	81a3      	strh	r3, [r4, #12]
 801120a:	6126      	str	r6, [r4, #16]
 801120c:	444e      	add	r6, r9
 801120e:	6165      	str	r5, [r4, #20]
 8011210:	eba5 0509 	sub.w	r5, r5, r9
 8011214:	6026      	str	r6, [r4, #0]
 8011216:	463e      	mov	r6, r7
 8011218:	60a5      	str	r5, [r4, #8]
 801121a:	42be      	cmp	r6, r7
 801121c:	d900      	bls.n	8011220 <__ssputs_r+0x86>
 801121e:	463e      	mov	r6, r7
 8011220:	4632      	mov	r2, r6
 8011222:	4641      	mov	r1, r8
 8011224:	6820      	ldr	r0, [r4, #0]
 8011226:	f7ff ff63 	bl	80110f0 <memmove>
 801122a:	68a3      	ldr	r3, [r4, #8]
 801122c:	2000      	movs	r0, #0
 801122e:	1b9b      	subs	r3, r3, r6
 8011230:	60a3      	str	r3, [r4, #8]
 8011232:	6823      	ldr	r3, [r4, #0]
 8011234:	4433      	add	r3, r6
 8011236:	6023      	str	r3, [r4, #0]
 8011238:	e7db      	b.n	80111f2 <__ssputs_r+0x58>
 801123a:	462a      	mov	r2, r5
 801123c:	f7ff ff7e 	bl	801113c <_realloc_r>
 8011240:	4606      	mov	r6, r0
 8011242:	2800      	cmp	r0, #0
 8011244:	d1e1      	bne.n	801120a <__ssputs_r+0x70>
 8011246:	6921      	ldr	r1, [r4, #16]
 8011248:	4650      	mov	r0, sl
 801124a:	f7ff f817 	bl	801027c <_free_r>
 801124e:	e7c7      	b.n	80111e0 <__ssputs_r+0x46>

08011250 <_svfiprintf_r>:
 8011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011254:	4698      	mov	r8, r3
 8011256:	898b      	ldrh	r3, [r1, #12]
 8011258:	b09d      	sub	sp, #116	; 0x74
 801125a:	4607      	mov	r7, r0
 801125c:	061b      	lsls	r3, r3, #24
 801125e:	460d      	mov	r5, r1
 8011260:	4614      	mov	r4, r2
 8011262:	d50e      	bpl.n	8011282 <_svfiprintf_r+0x32>
 8011264:	690b      	ldr	r3, [r1, #16]
 8011266:	b963      	cbnz	r3, 8011282 <_svfiprintf_r+0x32>
 8011268:	2140      	movs	r1, #64	; 0x40
 801126a:	f7ff f873 	bl	8010354 <_malloc_r>
 801126e:	6028      	str	r0, [r5, #0]
 8011270:	6128      	str	r0, [r5, #16]
 8011272:	b920      	cbnz	r0, 801127e <_svfiprintf_r+0x2e>
 8011274:	230c      	movs	r3, #12
 8011276:	603b      	str	r3, [r7, #0]
 8011278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801127c:	e0d1      	b.n	8011422 <_svfiprintf_r+0x1d2>
 801127e:	2340      	movs	r3, #64	; 0x40
 8011280:	616b      	str	r3, [r5, #20]
 8011282:	2300      	movs	r3, #0
 8011284:	f8cd 800c 	str.w	r8, [sp, #12]
 8011288:	f04f 0901 	mov.w	r9, #1
 801128c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801143c <_svfiprintf_r+0x1ec>
 8011290:	9309      	str	r3, [sp, #36]	; 0x24
 8011292:	2320      	movs	r3, #32
 8011294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011298:	2330      	movs	r3, #48	; 0x30
 801129a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801129e:	4623      	mov	r3, r4
 80112a0:	469a      	mov	sl, r3
 80112a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112a6:	b10a      	cbz	r2, 80112ac <_svfiprintf_r+0x5c>
 80112a8:	2a25      	cmp	r2, #37	; 0x25
 80112aa:	d1f9      	bne.n	80112a0 <_svfiprintf_r+0x50>
 80112ac:	ebba 0b04 	subs.w	fp, sl, r4
 80112b0:	d00b      	beq.n	80112ca <_svfiprintf_r+0x7a>
 80112b2:	465b      	mov	r3, fp
 80112b4:	4622      	mov	r2, r4
 80112b6:	4629      	mov	r1, r5
 80112b8:	4638      	mov	r0, r7
 80112ba:	f7ff ff6e 	bl	801119a <__ssputs_r>
 80112be:	3001      	adds	r0, #1
 80112c0:	f000 80aa 	beq.w	8011418 <_svfiprintf_r+0x1c8>
 80112c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112c6:	445a      	add	r2, fp
 80112c8:	9209      	str	r2, [sp, #36]	; 0x24
 80112ca:	f89a 3000 	ldrb.w	r3, [sl]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	f000 80a2 	beq.w	8011418 <_svfiprintf_r+0x1c8>
 80112d4:	2300      	movs	r3, #0
 80112d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112da:	f10a 0a01 	add.w	sl, sl, #1
 80112de:	9304      	str	r3, [sp, #16]
 80112e0:	9307      	str	r3, [sp, #28]
 80112e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112e6:	931a      	str	r3, [sp, #104]	; 0x68
 80112e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112ec:	4654      	mov	r4, sl
 80112ee:	2205      	movs	r2, #5
 80112f0:	4852      	ldr	r0, [pc, #328]	; (801143c <_svfiprintf_r+0x1ec>)
 80112f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112f6:	f7ff feed 	bl	80110d4 <memchr>
 80112fa:	9a04      	ldr	r2, [sp, #16]
 80112fc:	b9d8      	cbnz	r0, 8011336 <_svfiprintf_r+0xe6>
 80112fe:	06d0      	lsls	r0, r2, #27
 8011300:	bf44      	itt	mi
 8011302:	2320      	movmi	r3, #32
 8011304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011308:	0711      	lsls	r1, r2, #28
 801130a:	bf44      	itt	mi
 801130c:	232b      	movmi	r3, #43	; 0x2b
 801130e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011312:	f89a 3000 	ldrb.w	r3, [sl]
 8011316:	2b2a      	cmp	r3, #42	; 0x2a
 8011318:	d015      	beq.n	8011346 <_svfiprintf_r+0xf6>
 801131a:	9a07      	ldr	r2, [sp, #28]
 801131c:	4654      	mov	r4, sl
 801131e:	2000      	movs	r0, #0
 8011320:	f04f 0c0a 	mov.w	ip, #10
 8011324:	4621      	mov	r1, r4
 8011326:	f811 3b01 	ldrb.w	r3, [r1], #1
 801132a:	3b30      	subs	r3, #48	; 0x30
 801132c:	2b09      	cmp	r3, #9
 801132e:	d94e      	bls.n	80113ce <_svfiprintf_r+0x17e>
 8011330:	b1b0      	cbz	r0, 8011360 <_svfiprintf_r+0x110>
 8011332:	9207      	str	r2, [sp, #28]
 8011334:	e014      	b.n	8011360 <_svfiprintf_r+0x110>
 8011336:	eba0 0308 	sub.w	r3, r0, r8
 801133a:	46a2      	mov	sl, r4
 801133c:	fa09 f303 	lsl.w	r3, r9, r3
 8011340:	4313      	orrs	r3, r2
 8011342:	9304      	str	r3, [sp, #16]
 8011344:	e7d2      	b.n	80112ec <_svfiprintf_r+0x9c>
 8011346:	9b03      	ldr	r3, [sp, #12]
 8011348:	1d19      	adds	r1, r3, #4
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	9103      	str	r1, [sp, #12]
 8011350:	bfbb      	ittet	lt
 8011352:	425b      	neglt	r3, r3
 8011354:	f042 0202 	orrlt.w	r2, r2, #2
 8011358:	9307      	strge	r3, [sp, #28]
 801135a:	9307      	strlt	r3, [sp, #28]
 801135c:	bfb8      	it	lt
 801135e:	9204      	strlt	r2, [sp, #16]
 8011360:	7823      	ldrb	r3, [r4, #0]
 8011362:	2b2e      	cmp	r3, #46	; 0x2e
 8011364:	d10c      	bne.n	8011380 <_svfiprintf_r+0x130>
 8011366:	7863      	ldrb	r3, [r4, #1]
 8011368:	2b2a      	cmp	r3, #42	; 0x2a
 801136a:	d135      	bne.n	80113d8 <_svfiprintf_r+0x188>
 801136c:	9b03      	ldr	r3, [sp, #12]
 801136e:	3402      	adds	r4, #2
 8011370:	1d1a      	adds	r2, r3, #4
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	9203      	str	r2, [sp, #12]
 8011378:	bfb8      	it	lt
 801137a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801137e:	9305      	str	r3, [sp, #20]
 8011380:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801144c <_svfiprintf_r+0x1fc>
 8011384:	2203      	movs	r2, #3
 8011386:	7821      	ldrb	r1, [r4, #0]
 8011388:	4650      	mov	r0, sl
 801138a:	f7ff fea3 	bl	80110d4 <memchr>
 801138e:	b140      	cbz	r0, 80113a2 <_svfiprintf_r+0x152>
 8011390:	2340      	movs	r3, #64	; 0x40
 8011392:	eba0 000a 	sub.w	r0, r0, sl
 8011396:	3401      	adds	r4, #1
 8011398:	fa03 f000 	lsl.w	r0, r3, r0
 801139c:	9b04      	ldr	r3, [sp, #16]
 801139e:	4303      	orrs	r3, r0
 80113a0:	9304      	str	r3, [sp, #16]
 80113a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113a6:	2206      	movs	r2, #6
 80113a8:	4825      	ldr	r0, [pc, #148]	; (8011440 <_svfiprintf_r+0x1f0>)
 80113aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113ae:	f7ff fe91 	bl	80110d4 <memchr>
 80113b2:	2800      	cmp	r0, #0
 80113b4:	d038      	beq.n	8011428 <_svfiprintf_r+0x1d8>
 80113b6:	4b23      	ldr	r3, [pc, #140]	; (8011444 <_svfiprintf_r+0x1f4>)
 80113b8:	bb1b      	cbnz	r3, 8011402 <_svfiprintf_r+0x1b2>
 80113ba:	9b03      	ldr	r3, [sp, #12]
 80113bc:	3307      	adds	r3, #7
 80113be:	f023 0307 	bic.w	r3, r3, #7
 80113c2:	3308      	adds	r3, #8
 80113c4:	9303      	str	r3, [sp, #12]
 80113c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113c8:	4433      	add	r3, r6
 80113ca:	9309      	str	r3, [sp, #36]	; 0x24
 80113cc:	e767      	b.n	801129e <_svfiprintf_r+0x4e>
 80113ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80113d2:	460c      	mov	r4, r1
 80113d4:	2001      	movs	r0, #1
 80113d6:	e7a5      	b.n	8011324 <_svfiprintf_r+0xd4>
 80113d8:	2300      	movs	r3, #0
 80113da:	3401      	adds	r4, #1
 80113dc:	f04f 0c0a 	mov.w	ip, #10
 80113e0:	4619      	mov	r1, r3
 80113e2:	9305      	str	r3, [sp, #20]
 80113e4:	4620      	mov	r0, r4
 80113e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113ea:	3a30      	subs	r2, #48	; 0x30
 80113ec:	2a09      	cmp	r2, #9
 80113ee:	d903      	bls.n	80113f8 <_svfiprintf_r+0x1a8>
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d0c5      	beq.n	8011380 <_svfiprintf_r+0x130>
 80113f4:	9105      	str	r1, [sp, #20]
 80113f6:	e7c3      	b.n	8011380 <_svfiprintf_r+0x130>
 80113f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80113fc:	4604      	mov	r4, r0
 80113fe:	2301      	movs	r3, #1
 8011400:	e7f0      	b.n	80113e4 <_svfiprintf_r+0x194>
 8011402:	ab03      	add	r3, sp, #12
 8011404:	462a      	mov	r2, r5
 8011406:	a904      	add	r1, sp, #16
 8011408:	4638      	mov	r0, r7
 801140a:	9300      	str	r3, [sp, #0]
 801140c:	4b0e      	ldr	r3, [pc, #56]	; (8011448 <_svfiprintf_r+0x1f8>)
 801140e:	e000      	b.n	8011412 <_svfiprintf_r+0x1c2>
 8011410:	bf00      	nop
 8011412:	1c42      	adds	r2, r0, #1
 8011414:	4606      	mov	r6, r0
 8011416:	d1d6      	bne.n	80113c6 <_svfiprintf_r+0x176>
 8011418:	89ab      	ldrh	r3, [r5, #12]
 801141a:	065b      	lsls	r3, r3, #25
 801141c:	f53f af2c 	bmi.w	8011278 <_svfiprintf_r+0x28>
 8011420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011422:	b01d      	add	sp, #116	; 0x74
 8011424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011428:	ab03      	add	r3, sp, #12
 801142a:	462a      	mov	r2, r5
 801142c:	a904      	add	r1, sp, #16
 801142e:	4638      	mov	r0, r7
 8011430:	9300      	str	r3, [sp, #0]
 8011432:	4b05      	ldr	r3, [pc, #20]	; (8011448 <_svfiprintf_r+0x1f8>)
 8011434:	f7ff f9cc 	bl	80107d0 <_printf_i>
 8011438:	e7eb      	b.n	8011412 <_svfiprintf_r+0x1c2>
 801143a:	bf00      	nop
 801143c:	080134a4 	.word	0x080134a4
 8011440:	080134ae 	.word	0x080134ae
 8011444:	00000000 	.word	0x00000000
 8011448:	0801119b 	.word	0x0801119b
 801144c:	080134aa 	.word	0x080134aa

08011450 <_raise_r>:
 8011450:	291f      	cmp	r1, #31
 8011452:	b538      	push	{r3, r4, r5, lr}
 8011454:	4604      	mov	r4, r0
 8011456:	460d      	mov	r5, r1
 8011458:	d904      	bls.n	8011464 <_raise_r+0x14>
 801145a:	2316      	movs	r3, #22
 801145c:	6003      	str	r3, [r0, #0]
 801145e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011462:	bd38      	pop	{r3, r4, r5, pc}
 8011464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011466:	b112      	cbz	r2, 801146e <_raise_r+0x1e>
 8011468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801146c:	b94b      	cbnz	r3, 8011482 <_raise_r+0x32>
 801146e:	4620      	mov	r0, r4
 8011470:	f000 f830 	bl	80114d4 <_getpid_r>
 8011474:	462a      	mov	r2, r5
 8011476:	4601      	mov	r1, r0
 8011478:	4620      	mov	r0, r4
 801147a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801147e:	f000 b817 	b.w	80114b0 <_kill_r>
 8011482:	2b01      	cmp	r3, #1
 8011484:	d00a      	beq.n	801149c <_raise_r+0x4c>
 8011486:	1c59      	adds	r1, r3, #1
 8011488:	d103      	bne.n	8011492 <_raise_r+0x42>
 801148a:	2316      	movs	r3, #22
 801148c:	6003      	str	r3, [r0, #0]
 801148e:	2001      	movs	r0, #1
 8011490:	e7e7      	b.n	8011462 <_raise_r+0x12>
 8011492:	2400      	movs	r4, #0
 8011494:	4628      	mov	r0, r5
 8011496:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801149a:	4798      	blx	r3
 801149c:	2000      	movs	r0, #0
 801149e:	e7e0      	b.n	8011462 <_raise_r+0x12>

080114a0 <raise>:
 80114a0:	4b02      	ldr	r3, [pc, #8]	; (80114ac <raise+0xc>)
 80114a2:	4601      	mov	r1, r0
 80114a4:	6818      	ldr	r0, [r3, #0]
 80114a6:	f7ff bfd3 	b.w	8011450 <_raise_r>
 80114aa:	bf00      	nop
 80114ac:	2000000c 	.word	0x2000000c

080114b0 <_kill_r>:
 80114b0:	b538      	push	{r3, r4, r5, lr}
 80114b2:	2300      	movs	r3, #0
 80114b4:	4d06      	ldr	r5, [pc, #24]	; (80114d0 <_kill_r+0x20>)
 80114b6:	4604      	mov	r4, r0
 80114b8:	4608      	mov	r0, r1
 80114ba:	4611      	mov	r1, r2
 80114bc:	602b      	str	r3, [r5, #0]
 80114be:	f7f6 ff9d 	bl	80083fc <_kill>
 80114c2:	1c43      	adds	r3, r0, #1
 80114c4:	d102      	bne.n	80114cc <_kill_r+0x1c>
 80114c6:	682b      	ldr	r3, [r5, #0]
 80114c8:	b103      	cbz	r3, 80114cc <_kill_r+0x1c>
 80114ca:	6023      	str	r3, [r4, #0]
 80114cc:	bd38      	pop	{r3, r4, r5, pc}
 80114ce:	bf00      	nop
 80114d0:	2000078c 	.word	0x2000078c

080114d4 <_getpid_r>:
 80114d4:	f7f6 bf8a 	b.w	80083ec <_getpid>

080114d8 <__sread>:
 80114d8:	b510      	push	{r4, lr}
 80114da:	460c      	mov	r4, r1
 80114dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114e0:	f000 f89c 	bl	801161c <_read_r>
 80114e4:	2800      	cmp	r0, #0
 80114e6:	bfab      	itete	ge
 80114e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80114ea:	89a3      	ldrhlt	r3, [r4, #12]
 80114ec:	181b      	addge	r3, r3, r0
 80114ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80114f2:	bfac      	ite	ge
 80114f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80114f6:	81a3      	strhlt	r3, [r4, #12]
 80114f8:	bd10      	pop	{r4, pc}

080114fa <__swrite>:
 80114fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114fe:	461f      	mov	r7, r3
 8011500:	898b      	ldrh	r3, [r1, #12]
 8011502:	4605      	mov	r5, r0
 8011504:	460c      	mov	r4, r1
 8011506:	05db      	lsls	r3, r3, #23
 8011508:	4616      	mov	r6, r2
 801150a:	d505      	bpl.n	8011518 <__swrite+0x1e>
 801150c:	2302      	movs	r3, #2
 801150e:	2200      	movs	r2, #0
 8011510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011514:	f000 f868 	bl	80115e8 <_lseek_r>
 8011518:	89a3      	ldrh	r3, [r4, #12]
 801151a:	4632      	mov	r2, r6
 801151c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011520:	4628      	mov	r0, r5
 8011522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011526:	81a3      	strh	r3, [r4, #12]
 8011528:	463b      	mov	r3, r7
 801152a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801152e:	f000 b817 	b.w	8011560 <_write_r>

08011532 <__sseek>:
 8011532:	b510      	push	{r4, lr}
 8011534:	460c      	mov	r4, r1
 8011536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801153a:	f000 f855 	bl	80115e8 <_lseek_r>
 801153e:	1c43      	adds	r3, r0, #1
 8011540:	89a3      	ldrh	r3, [r4, #12]
 8011542:	bf15      	itete	ne
 8011544:	6560      	strne	r0, [r4, #84]	; 0x54
 8011546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801154a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801154e:	81a3      	strheq	r3, [r4, #12]
 8011550:	bf18      	it	ne
 8011552:	81a3      	strhne	r3, [r4, #12]
 8011554:	bd10      	pop	{r4, pc}

08011556 <__sclose>:
 8011556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801155a:	f000 b813 	b.w	8011584 <_close_r>
	...

08011560 <_write_r>:
 8011560:	b538      	push	{r3, r4, r5, lr}
 8011562:	4604      	mov	r4, r0
 8011564:	4d06      	ldr	r5, [pc, #24]	; (8011580 <_write_r+0x20>)
 8011566:	4608      	mov	r0, r1
 8011568:	4611      	mov	r1, r2
 801156a:	2200      	movs	r2, #0
 801156c:	602a      	str	r2, [r5, #0]
 801156e:	461a      	mov	r2, r3
 8011570:	f7f6 ff7b 	bl	800846a <_write>
 8011574:	1c43      	adds	r3, r0, #1
 8011576:	d102      	bne.n	801157e <_write_r+0x1e>
 8011578:	682b      	ldr	r3, [r5, #0]
 801157a:	b103      	cbz	r3, 801157e <_write_r+0x1e>
 801157c:	6023      	str	r3, [r4, #0]
 801157e:	bd38      	pop	{r3, r4, r5, pc}
 8011580:	2000078c 	.word	0x2000078c

08011584 <_close_r>:
 8011584:	b538      	push	{r3, r4, r5, lr}
 8011586:	2300      	movs	r3, #0
 8011588:	4d05      	ldr	r5, [pc, #20]	; (80115a0 <_close_r+0x1c>)
 801158a:	4604      	mov	r4, r0
 801158c:	4608      	mov	r0, r1
 801158e:	602b      	str	r3, [r5, #0]
 8011590:	f7f6 ff87 	bl	80084a2 <_close>
 8011594:	1c43      	adds	r3, r0, #1
 8011596:	d102      	bne.n	801159e <_close_r+0x1a>
 8011598:	682b      	ldr	r3, [r5, #0]
 801159a:	b103      	cbz	r3, 801159e <_close_r+0x1a>
 801159c:	6023      	str	r3, [r4, #0]
 801159e:	bd38      	pop	{r3, r4, r5, pc}
 80115a0:	2000078c 	.word	0x2000078c

080115a4 <_fstat_r>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	2300      	movs	r3, #0
 80115a8:	4d06      	ldr	r5, [pc, #24]	; (80115c4 <_fstat_r+0x20>)
 80115aa:	4604      	mov	r4, r0
 80115ac:	4608      	mov	r0, r1
 80115ae:	4611      	mov	r1, r2
 80115b0:	602b      	str	r3, [r5, #0]
 80115b2:	f7f6 ff82 	bl	80084ba <_fstat>
 80115b6:	1c43      	adds	r3, r0, #1
 80115b8:	d102      	bne.n	80115c0 <_fstat_r+0x1c>
 80115ba:	682b      	ldr	r3, [r5, #0]
 80115bc:	b103      	cbz	r3, 80115c0 <_fstat_r+0x1c>
 80115be:	6023      	str	r3, [r4, #0]
 80115c0:	bd38      	pop	{r3, r4, r5, pc}
 80115c2:	bf00      	nop
 80115c4:	2000078c 	.word	0x2000078c

080115c8 <_isatty_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	2300      	movs	r3, #0
 80115cc:	4d05      	ldr	r5, [pc, #20]	; (80115e4 <_isatty_r+0x1c>)
 80115ce:	4604      	mov	r4, r0
 80115d0:	4608      	mov	r0, r1
 80115d2:	602b      	str	r3, [r5, #0]
 80115d4:	f7f6 ff81 	bl	80084da <_isatty>
 80115d8:	1c43      	adds	r3, r0, #1
 80115da:	d102      	bne.n	80115e2 <_isatty_r+0x1a>
 80115dc:	682b      	ldr	r3, [r5, #0]
 80115de:	b103      	cbz	r3, 80115e2 <_isatty_r+0x1a>
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	bd38      	pop	{r3, r4, r5, pc}
 80115e4:	2000078c 	.word	0x2000078c

080115e8 <_lseek_r>:
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	4604      	mov	r4, r0
 80115ec:	4d06      	ldr	r5, [pc, #24]	; (8011608 <_lseek_r+0x20>)
 80115ee:	4608      	mov	r0, r1
 80115f0:	4611      	mov	r1, r2
 80115f2:	2200      	movs	r2, #0
 80115f4:	602a      	str	r2, [r5, #0]
 80115f6:	461a      	mov	r2, r3
 80115f8:	f7f6 ff7a 	bl	80084f0 <_lseek>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_lseek_r+0x1e>
 8011600:	682b      	ldr	r3, [r5, #0]
 8011602:	b103      	cbz	r3, 8011606 <_lseek_r+0x1e>
 8011604:	6023      	str	r3, [r4, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	2000078c 	.word	0x2000078c

0801160c <_malloc_usable_size_r>:
 801160c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011610:	1f18      	subs	r0, r3, #4
 8011612:	2b00      	cmp	r3, #0
 8011614:	bfbc      	itt	lt
 8011616:	580b      	ldrlt	r3, [r1, r0]
 8011618:	18c0      	addlt	r0, r0, r3
 801161a:	4770      	bx	lr

0801161c <_read_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4604      	mov	r4, r0
 8011620:	4d06      	ldr	r5, [pc, #24]	; (801163c <_read_r+0x20>)
 8011622:	4608      	mov	r0, r1
 8011624:	4611      	mov	r1, r2
 8011626:	2200      	movs	r2, #0
 8011628:	602a      	str	r2, [r5, #0]
 801162a:	461a      	mov	r2, r3
 801162c:	f7f6 ff00 	bl	8008430 <_read>
 8011630:	1c43      	adds	r3, r0, #1
 8011632:	d102      	bne.n	801163a <_read_r+0x1e>
 8011634:	682b      	ldr	r3, [r5, #0]
 8011636:	b103      	cbz	r3, 801163a <_read_r+0x1e>
 8011638:	6023      	str	r3, [r4, #0]
 801163a:	bd38      	pop	{r3, r4, r5, pc}
 801163c:	2000078c 	.word	0x2000078c

08011640 <_init>:
 8011640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011642:	bf00      	nop
 8011644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011646:	bc08      	pop	{r3}
 8011648:	469e      	mov	lr, r3
 801164a:	4770      	bx	lr

0801164c <_fini>:
 801164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164e:	bf00      	nop
 8011650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011652:	bc08      	pop	{r3}
 8011654:	469e      	mov	lr, r3
 8011656:	4770      	bx	lr
